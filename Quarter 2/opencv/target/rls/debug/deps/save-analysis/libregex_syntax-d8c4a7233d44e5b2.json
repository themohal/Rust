{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18","program":"/home/farjad-ali/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","regex_syntax","/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"unicode\"","--cfg","feature=\"unicode-age\"","--cfg","feature=\"unicode-bool\"","--cfg","feature=\"unicode-case\"","--cfg","feature=\"unicode-gencat\"","--cfg","feature=\"unicode-perl\"","--cfg","feature=\"unicode-script\"","--cfg","feature=\"unicode-segment\"","-C","metadata=d8c4a7233d44e5b2","-C","extra-filename=-d8c4a7233d44e5b2","--out-dir","/home/farjad-ali/Rust/Quarter 2/opencv/target/rls/debug/deps","-L","dependency=/home/farjad-ali/Rust/Quarter 2/opencv/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/farjad-ali/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/farjad-ali/Rust/Quarter 2/opencv/target/rls/debug/deps/libregex_syntax-d8c4a7233d44e5b2.rmeta"},"prelude":{"crate_id":{"name":"regex_syntax","disambiguator":[17530115376338881557,3329777362325151560]},"crate_root":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src","external_crates":[{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9564622754343001814,6395353584576912375]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16347567532895737325,10433174518283571136]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6035154360143295752,3120051156278071757]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17970804288108720841,8277620835330235672]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16732030649177302276,7623982932271952002]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[2049976911787826744,13979720418681232837]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17847122289935873599,14578858192368606437]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12400616498443773685,4537628398871354645]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1484644931138181661,6065563251080435870]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10540921678309121045,13783658537477923762]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14352423081837475994,16315607114161141584]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[15159368332461590608,12067571535011159917]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[565700744459104052,3788273681611333969]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[2676206115383283879,17948995864942817625]}}],"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":0,"byte_end":12024,"line_start":1,"line_end":311,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2603},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7193,"byte_end":7198,"line_start":160,"line_end":160,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":409},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7200,"byte_end":7206,"line_start":160,"line_end":160,"column_start":24,"column_end":30},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3164},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7226,"byte_end":7232,"line_start":161,"line_end":161,"column_start":18,"column_end":24},"alias_span":null,"name":"Parser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3155},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7234,"byte_end":7247,"line_start":161,"line_end":161,"column_start":26,"column_end":39},"alias_span":null,"name":"ParserBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3185},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7267,"byte_end":7283,"line_start":162,"line_end":162,"column_start":18,"column_end":34},"alias_span":null,"name":"UnicodeWordError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12164,"byte_end":12169,"line_start":9,"line_end":9,"column_start":24,"column_end":29},"alias_span":null,"name":"visit","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":223},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12171,"byte_end":12178,"line_start":9,"line_end":9,"column_start":31,"column_end":38},"alias_span":null,"name":"Visitor","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":774},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":314489,"byte_end":314494,"line_start":15,"line_end":15,"column_start":24,"column_end":29},"alias_span":null,"name":"visit","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":0,"index":766},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":314496,"byte_end":314503,"line_start":15,"line_end":15,"column_start":31,"column_end":38},"alias_span":null,"name":"Visitor","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":0,"index":3180},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":314523,"byte_end":314536,"line_start":16,"line_end":16,"column_start":18,"column_end":31},"alias_span":null,"name":"CaseFoldError","value":"","parent":{"krate":0,"index":446}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":0,"byte_end":12024,"line_start":1,"line_end":311,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":446},{"krate":0,"index":938},{"krate":0,"index":957},{"krate":0,"index":1060},{"krate":0,"index":1562},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1614},{"krate":0,"index":1615}],"decl_id":null,"docs":"This crate provides a robust regular expression parser.","sig":null,"attributes":[{"value":"!\nThis crate provides a robust regular expression parser.\n\nThis crate defines two primary types:\n\n* [`Ast`](ast/enum.Ast.html) is the abstract syntax of a regular expression.\n  An abstract syntax corresponds to a *structured representation* of the\n  concrete syntax of a regular expression, where the concrete syntax is the\n  pattern string itself (e.g., `foo(bar)+`). Given some abstract syntax, it\n  can be converted back to the original concrete syntax (modulo some details,\n  like whitespace). To a first approximation, the abstract syntax is complex\n  and difficult to analyze.\n* [`Hir`](hir/struct.Hir.html) is the high-level intermediate representation\n  (\"HIR\" or \"high-level IR\" for short) of regular expression. It corresponds to\n  an intermediate state of a regular expression that sits between the abstract\n  syntax and the low level compiled opcodes that are eventually responsible for\n  executing a regular expression search. Given some high-level IR, it is not\n  possible to produce the original concrete syntax (although it is possible to\n  produce an equivalent concrete syntax, but it will likely scarcely resemble\n  the original pattern). To a first approximation, the high-level IR is simple\n  and easy to analyze.\n\nThese two types come with conversion routines:\n\n* An [`ast::parse::Parser`](ast/parse/struct.Parser.html) converts concrete\n  syntax (a `&str`) to an [`Ast`](ast/enum.Ast.html).\n* A [`hir::translate::Translator`](hir/translate/struct.Translator.html)\n  converts an [`Ast`](ast/enum.Ast.html) to a [`Hir`](hir/struct.Hir.html).\n\nAs a convenience, the above two conversion routines are combined into one via\nthe top-level [`Parser`](struct.Parser.html) type. This `Parser` will first\nconvert your pattern to an `Ast` and then convert the `Ast` to an `Hir`.\n\n\n# Example\n\nThis example shows how to parse a pattern string into its HIR:\n\n```\nuse regex_syntax::Parser;\nuse regex_syntax::hir::{self, Hir};\n\nlet hir = Parser::new().parse(\"a|b\").unwrap();\nassert_eq!(hir, Hir::alternation(vec![\n    Hir::literal(hir::Literal::Unicode('a')),\n    Hir::literal(hir::Literal::Unicode('b')),\n]));\n```\n\n\n# Concrete syntax supported\n\nThe concrete syntax is documented as part of the public API of the\n[`regex` crate](https://docs.rs/regex/%2A/regex/#syntax).\n\n\n# Input safety\n\nA key feature of this library is that it is safe to use with end user facing\ninput. This plays a significant role in the internal implementation. In\nparticular:\n\n1. Parsers provide a `nest_limit` option that permits callers to control how\n   deeply nested a regular expression is allowed to be. This makes it possible\n   to do case analysis over an `Ast` or an `Hir` using recursion without\n   worrying about stack overflow.\n2. Since relying on a particular stack size is brittle, this crate goes to\n   great lengths to ensure that all interactions with both the `Ast` and the\n   `Hir` do not use recursion. Namely, they use constant stack space and heap\n   space proportional to the size of the original pattern string (in bytes).\n   This includes the type's corresponding destructors. (One exception to this\n   is literal extraction, but this will eventually get fixed.)\n\n\n# Error reporting\n\nThe `Display` implementations on all `Error` types exposed in this library\nprovide nice human readable errors that are suitable for showing to end users\nin a monospace font.\n\n\n# Literal extraction\n\nThis crate provides limited support for\n[literal extraction from `Hir` values](hir/literal/struct.Literals.html).\nBe warned that literal extraction currently uses recursion, and therefore,\nstack size proportional to the size of the `Hir`.\n\nThe purpose of literal extraction is to speed up searches. That is, if you\nknow a regular expression must match a prefix or suffix literal, then it is\noften quicker to search for instances of that literal, and then confirm or deny\nthe match using the full regular expression engine. These optimizations are\ndone automatically in the `regex` crate.\n\n\n# Crate features\n\nAn important feature provided by this crate is its Unicode support. This\nincludes things like case folding, boolean properties, general categories,\nscripts and Unicode-aware support for the Perl classes `\\w`, `\\s` and `\\d`.\nHowever, a downside of this support is that it requires bundling several\nUnicode data tables that are substantial in size.\n\nA fair number of use cases do not require full Unicode support. For this\nreason, this crate exposes a number of features to control which Unicode\ndata is available.\n\nIf a regular expression attempts to use a Unicode feature that is not available\nbecause the corresponding crate feature was disabled, then translating that\nregular expression to an `Hir` will return an error. (It is still possible\nconstruct an `Ast` for such a regular expression, since Unicode data is not\nused until translation to an `Hir`.) Stated differently, enabling or disabling\nany of the features below can only add or subtract from the total set of valid\nregular expressions. Enabling or disabling a feature will never modify the\nmatch semantics of a regular expression.\n\nThe following features are available:\n\n* **unicode** -\n  Enables all Unicode features. This feature is enabled by default, and will\n  always cover all Unicode features, even if more are added in the future.\n* **unicode-age** -\n  Provide the data for the\n  [Unicode `Age` property](https://www.unicode.org/reports/tr44/tr44-24.html#Character_Age).\n  This makes it possible to use classes like `\\p{Age:6.0}` to refer to all\n  codepoints first introduced in Unicode 6.0\n* **unicode-bool** -\n  Provide the data for numerous Unicode boolean properties. The full list\n  is not included here, but contains properties like `Alphabetic`, `Emoji`,\n  `Lowercase`, `Math`, `Uppercase` and `White_Space`.\n* **unicode-case** -\n  Provide the data for case insensitive matching using\n  [Unicode's \"simple loose matches\" specification](https://www.unicode.org/reports/tr18/#Simple_Loose_Matches).\n* **unicode-gencat** -\n  Provide the data for\n  [Uncode general categories](https://www.unicode.org/reports/tr44/tr44-24.html#General_Category_Values).\n  This includes, but is not limited to, `Decimal_Number`, `Letter`,\n  `Math_Symbol`, `Number` and `Punctuation`.\n* **unicode-perl** -\n  Provide the data for supporting the Unicode-aware Perl character classes,\n  corresponding to `\\w`, `\\s` and `\\d`. This is also necessary for using\n  Unicode-aware word boundary assertions. Note that if this feature is\n  disabled, the `\\s` and `\\d` character classes are still available if the\n  `unicode-bool` and `unicode-gencat` features are enabled, respectively.\n* **unicode-script** -\n  Provide the data for\n  [Unicode scripts and script extensions](https://www.unicode.org/reports/tr24/).\n  This includes, but is not limited to, `Arabic`, `Cyrillic`, `Hebrew`,\n  `Latin` and `Thai`.\n* **unicode-segment** -\n  Provide the data necessary to provide the properties used to implement the\n  [Unicode text segmentation algorithms](https://www.unicode.org/reports/tr29/).\n  This enables using classes like `\\p{gcb=Extend}`, `\\p{wb=Katakana}` and\n  `\\p{sb=ATerm}`.\n*/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":0,"byte_end":7127,"line_start":1,"line_end":155,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7129,"byte_end":7151,"line_start":157,"line_end":157,"column_start":1,"column_end":23}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7152,"byte_end":7175,"line_start":158,"line_end":158,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ast","qualname":"::ast","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":157},{"krate":0,"index":218},{"krate":0,"index":1733},{"krate":0,"index":1746},{"krate":0,"index":1744},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":310},{"krate":0,"index":1748},{"krate":0,"index":1823},{"krate":0,"index":1821},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":1825},{"krate":0,"index":1836},{"krate":0,"index":1835},{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":1838},{"krate":0,"index":1850},{"krate":0,"index":1849},{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":343},{"krate":0,"index":1852},{"krate":0,"index":1864},{"krate":0,"index":1862},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1866},{"krate":0,"index":1878},{"krate":0,"index":1876},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1880},{"krate":0,"index":1920},{"krate":0,"index":1918},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":345},{"krate":0,"index":349},{"krate":0,"index":1922},{"krate":0,"index":1934},{"krate":0,"index":1932},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":352},{"krate":0,"index":1936},{"krate":0,"index":1948},{"krate":0,"index":1946},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":354},{"krate":0,"index":1950},{"krate":0,"index":1963},{"krate":0,"index":1961},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":356},{"krate":0,"index":1965},{"krate":0,"index":1990},{"krate":0,"index":1988},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1992},{"krate":0,"index":2015},{"krate":0,"index":2013},{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2017},{"krate":0,"index":2032},{"krate":0,"index":2030},{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2024},{"krate":0,"index":2025},{"krate":0,"index":358},{"krate":0,"index":2034},{"krate":0,"index":2053},{"krate":0,"index":2051},{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":360},{"krate":0,"index":2055},{"krate":0,"index":2068},{"krate":0,"index":2066},{"krate":0,"index":2063},{"krate":0,"index":2064},{"krate":0,"index":2059},{"krate":0,"index":2060},{"krate":0,"index":2070},{"krate":0,"index":2085},{"krate":0,"index":2083},{"krate":0,"index":2080},{"krate":0,"index":2081},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2087},{"krate":0,"index":2100},{"krate":0,"index":2098},{"krate":0,"index":2095},{"krate":0,"index":2096},{"krate":0,"index":2091},{"krate":0,"index":2092},{"krate":0,"index":2102},{"krate":0,"index":2139},{"krate":0,"index":2137},{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":362},{"krate":0,"index":2141},{"krate":0,"index":2154},{"krate":0,"index":2152},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2145},{"krate":0,"index":2146},{"krate":0,"index":365},{"krate":0,"index":2156},{"krate":0,"index":2176},{"krate":0,"index":2174},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2167},{"krate":0,"index":2168},{"krate":0,"index":2178},{"krate":0,"index":2193},{"krate":0,"index":2191},{"krate":0,"index":2188},{"krate":0,"index":2189},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":367},{"krate":0,"index":2195},{"krate":0,"index":2208},{"krate":0,"index":2206},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2210},{"krate":0,"index":2226},{"krate":0,"index":2224},{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":369},{"krate":0,"index":2228},{"krate":0,"index":2262},{"krate":0,"index":2260},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2253},{"krate":0,"index":2254},{"krate":0,"index":373},{"krate":0,"index":2264},{"krate":0,"index":2277},{"krate":0,"index":2275},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":375},{"krate":0,"index":2279},{"krate":0,"index":2291},{"krate":0,"index":2289},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":377},{"krate":0,"index":2293},{"krate":0,"index":2307},{"krate":0,"index":2305},{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2298},{"krate":0,"index":2299},{"krate":0,"index":2309},{"krate":0,"index":2325},{"krate":0,"index":2324},{"krate":0,"index":2322},{"krate":0,"index":2319},{"krate":0,"index":2320},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2327},{"krate":0,"index":2339},{"krate":0,"index":2337},{"krate":0,"index":2334},{"krate":0,"index":2335},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2341},{"krate":0,"index":2362},{"krate":0,"index":2360},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2364},{"krate":0,"index":2378},{"krate":0,"index":2376},{"krate":0,"index":2373},{"krate":0,"index":2374},{"krate":0,"index":2369},{"krate":0,"index":2370},{"krate":0,"index":2380},{"krate":0,"index":2392},{"krate":0,"index":2390},{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2383},{"krate":0,"index":2384},{"krate":0,"index":2394},{"krate":0,"index":2413},{"krate":0,"index":2411},{"krate":0,"index":2408},{"krate":0,"index":2409},{"krate":0,"index":2404},{"krate":0,"index":2405},{"krate":0,"index":2415},{"krate":0,"index":2435},{"krate":0,"index":2433},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2426},{"krate":0,"index":2427},{"krate":0,"index":380},{"krate":0,"index":2437},{"krate":0,"index":2450},{"krate":0,"index":2448},{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":2441},{"krate":0,"index":2442},{"krate":0,"index":382},{"krate":0,"index":2452},{"krate":0,"index":2471},{"krate":0,"index":2469},{"krate":0,"index":2466},{"krate":0,"index":2467},{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2473},{"krate":0,"index":2486},{"krate":0,"index":2484},{"krate":0,"index":2481},{"krate":0,"index":2482},{"krate":0,"index":2477},{"krate":0,"index":2478},{"krate":0,"index":2488},{"krate":0,"index":2500},{"krate":0,"index":2498},{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2491},{"krate":0,"index":2492},{"krate":0,"index":2502},{"krate":0,"index":2514},{"krate":0,"index":2512},{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":386},{"krate":0,"index":2516},{"krate":0,"index":2528},{"krate":0,"index":2526},{"krate":0,"index":2523},{"krate":0,"index":2524},{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2530},{"krate":0,"index":2545},{"krate":0,"index":2543},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2536},{"krate":0,"index":2537},{"krate":0,"index":389},{"krate":0,"index":2547},{"krate":0,"index":2569},{"krate":0,"index":2568},{"krate":0,"index":2566},{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":391},{"krate":0,"index":396}],"decl_id":null,"docs":"Defines an abstract syntax for regular expressions.\n","sig":null,"attributes":[{"value":"!\nDefines an abstract syntax for regular expressions.\n*/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12026,"byte_end":12084,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":17},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parse","qualname":"::ast::parse","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":1616},{"krate":0,"index":1641},{"krate":0,"index":1639},{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":33},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":1643},{"krate":0,"index":1649},{"krate":0,"index":1647},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":1651},{"krate":0,"index":1665},{"krate":0,"index":1663},{"krate":0,"index":1667},{"krate":0,"index":1676},{"krate":0,"index":1672},{"krate":0,"index":1680},{"krate":0,"index":1690},{"krate":0,"index":1688},{"krate":0,"index":1692},{"krate":0,"index":1701},{"krate":0,"index":1699},{"krate":0,"index":53},{"krate":0,"index":58},{"krate":0,"index":100},{"krate":0,"index":1703},{"krate":0,"index":1709},{"krate":0,"index":133},{"krate":0,"index":142},{"krate":0,"index":155}],"decl_id":null,"docs":"This module provides a regular expression parser.\n","sig":null,"attributes":[{"value":"!\nThis module provides a regular expression parser.\n*/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":62034,"byte_end":62090,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1643},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":65596,"byte_end":65609,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"name":"ParserBuilder","qualname":"::ast::parse::ParserBuilder","value":"ParserBuilder {  }","parent":null,"children":[{"krate":0,"index":1644},{"krate":0,"index":1645},{"krate":0,"index":1646}],"decl_id":null,"docs":" A builder for a regular expression parser.","sig":null,"attributes":[{"value":"/ A builder for a regular expression parser.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":65437,"byte_end":65483,"line_start":109,"line_end":109,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":65484,"byte_end":65487,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ This builder permits modifying configuration options for the parser.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":65488,"byte_end":65560,"line_start":111,"line_end":111,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":65887,"byte_end":65890,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserBuilder>::new","value":"fn () -> ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser builder with a default configuration.\n","sig":null,"attributes":[{"value":"/ Create a new parser builder with a default configuration.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":65814,"byte_end":65875,"line_start":126,"line_end":126,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":66128,"byte_end":66133,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"build","qualname":"<ParserBuilder>::build","value":"fn (&self) -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Build a parser from this configuration with the given pattern.\n","sig":null,"attributes":[{"value":"/ Build a parser from this configuration with the given pattern.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":66050,"byte_end":66116,"line_start":135,"line_end":135,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68209,"byte_end":68219,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"nest_limit","qualname":"<ParserBuilder>::nest_limit","value":"fn (&mut self, limit: u32) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the nesting limit for this parser.","sig":null,"attributes":[{"value":"/ Set the nesting limit for this parser.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":66742,"byte_end":66784,"line_start":152,"line_end":152,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":66789,"byte_end":66792,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ The nesting limit controls how deep the abstract syntax tree is allowed","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":66797,"byte_end":66872,"line_start":154,"line_end":154,"column_start":5,"column_end":80}},{"value":"/ to be. If the AST exceeds the given limit (e.g., with too many nested","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":66877,"byte_end":66950,"line_start":155,"line_end":155,"column_start":5,"column_end":78}},{"value":"/ groups), then an error is returned by the parser.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":66955,"byte_end":67008,"line_start":156,"line_end":156,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67013,"byte_end":67016,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ The purpose of this limit is to act as a heuristic to prevent stack","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67021,"byte_end":67092,"line_start":158,"line_end":158,"column_start":5,"column_end":76}},{"value":"/ overflow for consumers that do structural induction on an `Ast` using","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67097,"byte_end":67170,"line_start":159,"line_end":159,"column_start":5,"column_end":78}},{"value":"/ explicit recursion. While this crate never does this (instead using","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67175,"byte_end":67246,"line_start":160,"line_end":160,"column_start":5,"column_end":76}},{"value":"/ constant stack space and moving the call stack to the heap), other","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67251,"byte_end":67321,"line_start":161,"line_end":161,"column_start":5,"column_end":75}},{"value":"/ crates may.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67326,"byte_end":67341,"line_start":162,"line_end":162,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67346,"byte_end":67349,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ This limit is not checked until the entire Ast is parsed. Therefore,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67354,"byte_end":67426,"line_start":164,"line_end":164,"column_start":5,"column_end":77}},{"value":"/ if callers want to put a limit on the amount of heap space used, then","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67431,"byte_end":67504,"line_start":165,"line_end":165,"column_start":5,"column_end":78}},{"value":"/ they should impose a limit on the length, in bytes, of the concrete","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67509,"byte_end":67580,"line_start":166,"line_end":166,"column_start":5,"column_end":76}},{"value":"/ pattern string. In particular, this is viable since this parser","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67585,"byte_end":67652,"line_start":167,"line_end":167,"column_start":5,"column_end":72}},{"value":"/ implementation will limit itself to heap space proportional to the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67657,"byte_end":67727,"line_start":168,"line_end":168,"column_start":5,"column_end":75}},{"value":"/ lenth of the pattern string.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67732,"byte_end":67764,"line_start":169,"line_end":169,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67769,"byte_end":67772,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Note that a nest limit of `0` will return a nest limit error for most","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67777,"byte_end":67850,"line_start":171,"line_end":171,"column_start":5,"column_end":78}},{"value":"/ patterns but not all. For example, a nest limit of `0` permits `a` but","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67855,"byte_end":67929,"line_start":172,"line_end":172,"column_start":5,"column_end":79}},{"value":"/ not `ab`, since `ab` requires a concatenation, which results in a nest","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":67934,"byte_end":68008,"line_start":173,"line_end":173,"column_start":5,"column_end":79}},{"value":"/ depth of `1`. In general, a nest limit is not something that manifests","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68013,"byte_end":68087,"line_start":174,"line_end":174,"column_start":5,"column_end":79}},{"value":"/ in an obvious way in the concrete syntax, therefore, it should not be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68092,"byte_end":68165,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ used in a granular way.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68170,"byte_end":68197,"line_start":176,"line_end":176,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69159,"byte_end":69164,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"octal","qualname":"<ParserBuilder>::octal","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to support octal syntax or not.","sig":null,"attributes":[{"value":"/ Whether to support octal syntax or not.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68324,"byte_end":68367,"line_start":182,"line_end":182,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68372,"byte_end":68375,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Octal syntax is a little-known way of uttering Unicode codepoints in","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68380,"byte_end":68452,"line_start":184,"line_end":184,"column_start":5,"column_end":77}},{"value":"/ a regular expression. For example, `a`, `\\x61`, `\\u0061` and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68457,"byte_end":68521,"line_start":185,"line_end":185,"column_start":5,"column_end":69}},{"value":"/ `\\141` are all equivalent regular expressions, where the last example","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68526,"byte_end":68599,"line_start":186,"line_end":186,"column_start":5,"column_end":78}},{"value":"/ shows octal syntax.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68604,"byte_end":68627,"line_start":187,"line_end":187,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68632,"byte_end":68635,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ While supporting octal syntax isn't in and of itself a problem, it does","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68640,"byte_end":68715,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/ make good error messages harder. That is, in PCRE based regex engines,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68720,"byte_end":68794,"line_start":190,"line_end":190,"column_start":5,"column_end":79}},{"value":"/ syntax like `\\0` invokes a backreference, which is explicitly","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68799,"byte_end":68864,"line_start":191,"line_end":191,"column_start":5,"column_end":70}},{"value":"/ unsupported in Rust's regex engine. However, many users expect it to","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68869,"byte_end":68941,"line_start":192,"line_end":192,"column_start":5,"column_end":77}},{"value":"/ be supported. Therefore, when octal support is disabled, the error","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":68946,"byte_end":69016,"line_start":193,"line_end":193,"column_start":5,"column_end":75}},{"value":"/ message will explicitly mention that backreferences aren't supported.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69021,"byte_end":69094,"line_start":194,"line_end":194,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69099,"byte_end":69102,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Octal syntax is disabled by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69107,"byte_end":69147,"line_start":196,"line_end":196,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69708,"byte_end":69725,"line_start":210,"line_end":210,"column_start":12,"column_end":29},"name":"ignore_whitespace","qualname":"<ParserBuilder>::ignore_whitespace","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable verbose mode in the regular expression.","sig":null,"attributes":[{"value":"/ Enable verbose mode in the regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69261,"byte_end":69311,"line_start":202,"line_end":202,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69316,"byte_end":69319,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ When enabled, verbose mode permits insigificant whitespace in many","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69324,"byte_end":69394,"line_start":204,"line_end":204,"column_start":5,"column_end":75}},{"value":"/ places in the regular expression, as well as comments. Comments are","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69399,"byte_end":69470,"line_start":205,"line_end":205,"column_start":5,"column_end":76}},{"value":"/ started using `#` and continue until the end of the line.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69475,"byte_end":69536,"line_start":206,"line_end":206,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69541,"byte_end":69544,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ By default, this is disabled. It may be selectively enabled in the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69549,"byte_end":69619,"line_start":208,"line_end":208,"column_start":5,"column_end":75}},{"value":"/ regular expression by using the `x` flag regardless of this setting.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69624,"byte_end":69696,"line_start":209,"line_end":209,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1651},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":70200,"byte_end":70206,"line_start":225,"line_end":225,"column_start":12,"column_end":18},"name":"Parser","qualname":"::ast::parse::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1654},{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1659},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662}],"decl_id":null,"docs":" A regular expression parser.","sig":null,"attributes":[{"value":"/ A regular expression parser.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69832,"byte_end":69864,"line_start":216,"line_end":216,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69865,"byte_end":69868,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ This parses a string representation of a regular expression into an","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69869,"byte_end":69940,"line_start":218,"line_end":218,"column_start":1,"column_end":72}},{"value":"/ abstract syntax tree. The size of the tree is proportional to the length","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":69941,"byte_end":70017,"line_start":219,"line_end":219,"column_start":1,"column_end":77}},{"value":"/ of the regular expression pattern.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":70018,"byte_end":70056,"line_start":220,"line_end":220,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":70057,"byte_end":70060,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ A `Parser` can be configured in more detail via a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":70061,"byte_end":70114,"line_start":222,"line_end":222,"column_start":1,"column_end":54}},{"value":"/ [`ParserBuilder`](struct.ParserBuilder.html).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":70115,"byte_end":70164,"line_start":223,"line_end":223,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74696,"byte_end":74699,"line_start":331,"line_end":331,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser>::new","value":"fn () -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser with a default configuration.","sig":null,"attributes":[{"value":"/ Create a new parser with a default configuration.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74359,"byte_end":74412,"line_start":324,"line_end":324,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74417,"byte_end":74420,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ The parser can be run with either the `parse` or `parse_with_comments`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74425,"byte_end":74499,"line_start":326,"line_end":326,"column_start":5,"column_end":79}},{"value":"/ methods. The parse methods return an abstract syntax tree.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74504,"byte_end":74566,"line_start":327,"line_end":327,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74571,"byte_end":74574,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ To set configuration options on the parser, use","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74579,"byte_end":74630,"line_start":329,"line_end":329,"column_start":5,"column_end":56}},{"value":"/ [`ParserBuilder`](struct.ParserBuilder.html).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74635,"byte_end":74684,"line_start":330,"line_end":330,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74836,"byte_end":74841,"line_start":336,"line_end":336,"column_start":12,"column_end":17},"name":"parse","qualname":"<Parser>::parse","value":"fn (&mut self, pattern: &str) -> Result<Ast>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression into an abstract syntax tree.\n","sig":null,"attributes":[{"value":"/ Parse the regular expression into an abstract syntax tree.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74762,"byte_end":74824,"line_start":335,"line_end":335,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":75074,"byte_end":75093,"line_start":342,"line_end":342,"column_start":12,"column_end":31},"name":"parse_with_comments","qualname":"<Parser>::parse_with_comments","value":"fn (&mut self, pattern: &str) -> Result<ast::WithComments>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression and return an abstract syntax tree with\n all of the comments found in the pattern.\n","sig":null,"attributes":[{"value":"/ Parse the regular expression and return an abstract syntax tree with","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74940,"byte_end":75012,"line_start":340,"line_end":340,"column_start":5,"column_end":77}},{"value":"/ all of the comments found in the pattern.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":75017,"byte_end":75062,"line_start":341,"line_end":341,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":157},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"print","qualname":"::ast::print","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":1714},{"krate":0,"index":1718},{"krate":0,"index":1716},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":170},{"krate":0,"index":1724},{"krate":0,"index":1729},{"krate":0,"index":174},{"krate":0,"index":188}],"decl_id":null,"docs":"This module provides a regular expression printer for `Ast`.\n","sig":null,"attributes":[{"value":"!\nThis module provides a regular expression printer for `Ast`.\n*/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":266383,"byte_end":266450,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1720},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267495,"byte_end":267502,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"Printer","qualname":"::ast::print::Printer","value":"Printer {  }","parent":null,"children":[{"krate":0,"index":1721}],"decl_id":null,"docs":" A printer for a regular expression abstract syntax tree.","sig":null,"attributes":[{"value":"/ A printer for a regular expression abstract syntax tree.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267020,"byte_end":267080,"line_start":35,"line_end":35,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267081,"byte_end":267084,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ A printer converts an abstract syntax tree (AST) to a regular expression","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267085,"byte_end":267161,"line_start":37,"line_end":37,"column_start":1,"column_end":77}},{"value":"/ pattern string. This particular printer uses constant stack space and heap","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267162,"byte_end":267240,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ space proportional to the size of the AST.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267241,"byte_end":267287,"line_start":39,"line_end":39,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267288,"byte_end":267291,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This printer will not necessarily preserve the original formatting of the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267292,"byte_end":267369,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ regular expression pattern string. For example, all whitespace and comments","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267370,"byte_end":267449,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/ are ignored.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267450,"byte_end":267466,"line_start":43,"line_end":43,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267579,"byte_end":267582,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<Printer>::new","value":"fn () -> Printer","parent":null,"children":[],"decl_id":null,"docs":" Create a new printer.\n","sig":null,"attributes":[{"value":"/ Create a new printer.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267542,"byte_end":267567,"line_start":50,"line_end":50,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267929,"byte_end":267934,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"print","qualname":"<Printer>::print","value":"fn <W> (&mut self, ast: &Ast, wtr: W) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Print the given `Ast` to the given writer. The writer must implement\n `fmt::Write`. Typical implementations of `fmt::Write` that can be used\n here are a `fmt::Formatter` (which is available in `fmt::Display`\n implementations) or a `&mut String`.\n","sig":null,"attributes":[{"value":"/ Print the given `Ast` to the given writer. The writer must implement","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267647,"byte_end":267719,"line_start":55,"line_end":55,"column_start":5,"column_end":77}},{"value":"/ `fmt::Write`. Typical implementations of `fmt::Write` that can be used","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267724,"byte_end":267798,"line_start":56,"line_end":56,"column_start":5,"column_end":79}},{"value":"/ here are a `fmt::Formatter` (which is available in `fmt::Display`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267803,"byte_end":267872,"line_start":57,"line_end":57,"column_start":5,"column_end":74}},{"value":"/ implementations) or a `&mut String`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267877,"byte_end":267917,"line_start":58,"line_end":58,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":223},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285205,"byte_end":285212,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::ast::visitor::Visitor","value":"Visitor","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235}],"decl_id":null,"docs":" A trait for visiting an abstract syntax tree (AST) in depth first order.","sig":null,"attributes":[{"value":"/ A trait for visiting an abstract syntax tree (AST) in depth first order.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284297,"byte_end":284373,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284374,"byte_end":284377,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The principle aim of this trait is to enable callers to perform case","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284378,"byte_end":284450,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ analysis on an abstract syntax tree without necessarily using recursion.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284451,"byte_end":284527,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ In particular, this permits callers to do case analysis with constant stack","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284528,"byte_end":284607,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ usage, which can be important since the size of an abstract syntax tree","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284608,"byte_end":284683,"line_start":10,"line_end":10,"column_start":1,"column_end":76}},{"value":"/ may be proportional to end user input.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284684,"byte_end":284726,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284727,"byte_end":284730,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Typical usage of this trait involves providing an implementation and then","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284731,"byte_end":284808,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ running it using the [`visit`](fn.visit.html) function.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284809,"byte_end":284868,"line_start":14,"line_end":14,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284869,"byte_end":284872,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Note that the abstract syntax tree for a regular expression is quite","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284873,"byte_end":284945,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ complex. Unless you specifically need it, you might be able to use the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":284946,"byte_end":285020,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ much simpler","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285021,"byte_end":285037,"line_start":18,"line_end":18,"column_start":1,"column_end":17}},{"value":"/ [high-level intermediate representation](../hir/struct.Hir.html)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285038,"byte_end":285106,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ and its","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285107,"byte_end":285118,"line_start":20,"line_end":20,"column_start":1,"column_end":12}},{"value":"/ [corresponding `Visitor` trait](../hir/trait.Visitor.html)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285119,"byte_end":285181,"line_start":21,"line_end":21,"column_start":1,"column_end":63}},{"value":"/ instead.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285182,"byte_end":285194,"line_start":22,"line_end":22,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":224},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285263,"byte_end":285269,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ast::visitor::Visitor::Output","value":"type Output;","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" The result of visiting an AST.\n","sig":null,"attributes":[{"value":"/ The result of visiting an AST.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285219,"byte_end":285253,"line_start":24,"line_end":24,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":225},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285332,"byte_end":285335,"line_start":27,"line_end":27,"column_start":10,"column_end":13},"name":"Err","qualname":"::ast::visitor::Visitor::Err","value":"type Err;","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" An error that visiting an AST might return.\n","sig":null,"attributes":[{"value":"/ An error that visiting an AST might return.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285275,"byte_end":285322,"line_start":26,"line_end":26,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285480,"byte_end":285486,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"finish","qualname":"::ast::visitor::Visitor::finish","value":"fn (self) -> Result<Self::Output, Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" All implementors of `Visitor` must provide a `finish` method, which\n yields the result of visiting the AST or an error.\n","sig":null,"attributes":[{"value":"/ All implementors of `Visitor` must provide a `finish` method, which","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285342,"byte_end":285413,"line_start":29,"line_end":29,"column_start":5,"column_end":76}},{"value":"/ yields the result of visiting the AST or an error.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285418,"byte_end":285472,"line_start":30,"line_end":30,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285606,"byte_end":285611,"line_start":34,"line_end":34,"column_start":8,"column_end":13},"name":"start","qualname":"::ast::visitor::Visitor::start","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called before beginning traversal of the AST.\n","sig":null,"attributes":[{"value":"/ This method is called before beginning traversal of the AST.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285534,"byte_end":285598,"line_start":33,"line_end":33,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285726,"byte_end":285735,"line_start":38,"line_end":38,"column_start":8,"column_end":17},"name":"visit_pre","qualname":"::ast::visitor::Visitor::visit_pre","value":"fn (&mut self, _ast: &Ast) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on an `Ast` before descending into child `Ast`\n nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on an `Ast` before descending into child `Ast`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285631,"byte_end":285703,"line_start":36,"line_end":36,"column_start":5,"column_end":77}},{"value":"/ nodes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285708,"byte_end":285718,"line_start":37,"line_end":37,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285912,"byte_end":285922,"line_start":44,"line_end":44,"column_start":8,"column_end":18},"name":"visit_post","qualname":"::ast::visitor::Visitor::visit_post","value":"fn (&mut self, _ast: &Ast) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on an `Ast` after descending all of its child\n `Ast` nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on an `Ast` after descending all of its child","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285812,"byte_end":285883,"line_start":42,"line_end":42,"column_start":5,"column_end":76}},{"value":"/ `Ast` nodes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285888,"byte_end":285904,"line_start":43,"line_end":43,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286108,"byte_end":286128,"line_start":50,"line_end":50,"column_start":8,"column_end":28},"name":"visit_alternation_in","qualname":"::ast::visitor::Visitor::visit_alternation_in","value":"fn (&mut self) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called between child nodes of an\n [`Alternation`](struct.Alternation.html).\n","sig":null,"attributes":[{"value":"/ This method is called between child nodes of an","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":285999,"byte_end":286050,"line_start":48,"line_end":48,"column_start":5,"column_end":56}},{"value":"/ [`Alternation`](struct.Alternation.html).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286055,"byte_end":286100,"line_start":49,"line_end":49,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286328,"byte_end":286352,"line_start":57,"line_end":57,"column_start":8,"column_end":32},"name":"visit_class_set_item_pre","qualname":"::ast::visitor::Visitor::visit_class_set_item_pre","value":"fn (&mut self, _ast: &ast::ClassSetItem) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetItem`](enum.ClassSetItem.html)\n before descending into child nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on every","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286193,"byte_end":286227,"line_start":54,"line_end":54,"column_start":5,"column_end":39}},{"value":"/ [`ClassSetItem`](enum.ClassSetItem.html)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286232,"byte_end":286276,"line_start":55,"line_end":55,"column_start":5,"column_end":49}},{"value":"/ before descending into child nodes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286281,"byte_end":286320,"line_start":56,"line_end":56,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286600,"byte_end":286625,"line_start":67,"line_end":67,"column_start":8,"column_end":33},"name":"visit_class_set_item_post","qualname":"::ast::visitor::Visitor::visit_class_set_item_post","value":"fn (&mut self, _ast: &ast::ClassSetItem) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetItem`](enum.ClassSetItem.html)\n after descending into child nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on every","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286466,"byte_end":286500,"line_start":64,"line_end":64,"column_start":5,"column_end":39}},{"value":"/ [`ClassSetItem`](enum.ClassSetItem.html)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286505,"byte_end":286549,"line_start":65,"line_end":65,"column_start":5,"column_end":49}},{"value":"/ after descending into child nodes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286554,"byte_end":286592,"line_start":66,"line_end":66,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286884,"byte_end":286913,"line_start":77,"line_end":77,"column_start":8,"column_end":37},"name":"visit_class_set_binary_op_pre","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_pre","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)\n before descending into child nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on every","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286739,"byte_end":286773,"line_start":74,"line_end":74,"column_start":5,"column_end":39}},{"value":"/ [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286778,"byte_end":286832,"line_start":75,"line_end":75,"column_start":5,"column_end":59}},{"value":"/ before descending into child nodes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":286837,"byte_end":286876,"line_start":76,"line_end":76,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287175,"byte_end":287205,"line_start":87,"line_end":87,"column_start":8,"column_end":38},"name":"visit_class_set_binary_op_post","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_post","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)\n after descending into child nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on every","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287031,"byte_end":287065,"line_start":84,"line_end":84,"column_start":5,"column_end":39}},{"value":"/ [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287070,"byte_end":287124,"line_start":85,"line_end":85,"column_start":5,"column_end":59}},{"value":"/ after descending into child nodes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287129,"byte_end":287167,"line_start":86,"line_end":86,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287470,"byte_end":287498,"line_start":96,"line_end":96,"column_start":8,"column_end":36},"name":"visit_class_set_binary_op_in","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_in","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called between the left hand and right hand child nodes\n of a [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html).\n","sig":null,"attributes":[{"value":"/ This method is called between the left hand and right hand child nodes","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287323,"byte_end":287397,"line_start":94,"line_end":94,"column_start":5,"column_end":79}},{"value":"/ of a [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287402,"byte_end":287462,"line_start":95,"line_end":95,"column_start":5,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":288364,"byte_end":288369,"line_start":119,"line_end":119,"column_start":8,"column_end":13},"name":"visit","qualname":"::ast::visitor::visit","value":"fn <V> (ast: &Ast, visitor: V) -> Result<V::Output, V::Err>","parent":null,"children":[],"decl_id":null,"docs":" Executes an implementation of `Visitor` in constant stack space.","sig":null,"attributes":[{"value":"/ Executes an implementation of `Visitor` in constant stack space.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287614,"byte_end":287682,"line_start":104,"line_end":104,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287683,"byte_end":287686,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ This function will visit every node in the given `Ast` while calling the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287687,"byte_end":287763,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/ appropriate methods provided by the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287764,"byte_end":287803,"line_start":107,"line_end":107,"column_start":1,"column_end":40}},{"value":"/ [`Visitor`](trait.Visitor.html) trait.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287804,"byte_end":287846,"line_start":108,"line_end":108,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287847,"byte_end":287850,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ The primary use case for this method is when one wants to perform case","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287851,"byte_end":287925,"line_start":110,"line_end":110,"column_start":1,"column_end":75}},{"value":"/ analysis over an `Ast` without using a stack size proportional to the depth","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":287926,"byte_end":288005,"line_start":111,"line_end":111,"column_start":1,"column_end":80}},{"value":"/ of the `Ast`. Namely, this method will instead use constant stack size, but","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":288006,"byte_end":288085,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"/ will use heap space proportional to the size of the `Ast`. This may be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":288086,"byte_end":288160,"line_start":113,"line_end":113,"column_start":1,"column_end":75}},{"value":"/ desirable in cases where the size of `Ast` is proportional to end user","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":288161,"byte_end":288235,"line_start":114,"line_end":114,"column_start":1,"column_end":75}},{"value":"/ input.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":288236,"byte_end":288246,"line_start":115,"line_end":115,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":288247,"byte_end":288250,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ If the visitor returns an error at any point, then visiting is stopped and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":288251,"byte_end":288329,"line_start":117,"line_end":117,"column_start":1,"column_end":79}},{"value":"/ the error is returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":288330,"byte_end":288356,"line_start":118,"line_end":118,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1733},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12682,"byte_end":12687,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"name":"Error","qualname":"::ast::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736}],"decl_id":null,"docs":" An error that occurred while parsing a regular expression into an abstract\n syntax tree.","sig":null,"attributes":[{"value":"/ An error that occurred while parsing a regular expression into an abstract","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12226,"byte_end":12304,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ syntax tree.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12305,"byte_end":12321,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12322,"byte_end":12325,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Note that note all ASTs represents a valid regular expression. For example,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12326,"byte_end":12405,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ an AST is constructed without error for `\\p{Quux}`, but `Quux` is not a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12406,"byte_end":12481,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ valid Unicode property name. That particular error is reported when","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12482,"byte_end":12553,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ translating an AST to the high-level intermediate representation (`HIR`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12554,"byte_end":12631,"line_start":21,"line_end":21,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13010,"byte_end":13014,"line_start":35,"line_end":35,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the type of this error.\n","sig":null,"attributes":[{"value":"/ Return the type of this error.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12964,"byte_end":12998,"line_start":34,"line_end":34,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13228,"byte_end":13235,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"pattern","qualname":"<Error>::pattern","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The original pattern string in which this error occurred.","sig":null,"attributes":[{"value":"/ The original pattern string in which this error occurred.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13068,"byte_end":13129,"line_start":39,"line_end":39,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13134,"byte_end":13137,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ Every span reported by this error is reported in terms of this string.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13142,"byte_end":13216,"line_start":41,"line_end":41,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13347,"byte_end":13351,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"span","qualname":"<Error>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span at which this error occurred.\n","sig":null,"attributes":[{"value":"/ Return the span at which this error occurred.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13286,"byte_end":13335,"line_start":46,"line_end":46,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13764,"byte_end":13778,"line_start":56,"line_end":56,"column_start":12,"column_end":26},"name":"auxiliary_span","qualname":"<Error>::auxiliary_span","value":"fn (&self) -> Option<&Span>","parent":null,"children":[],"decl_id":null,"docs":" Return an auxiliary span. This span exists only for some errors that\n benefit from being able to point to two locations in the original\n regular expression. For example, \"duplicate\" errors will have the\n main error position set to the duplicate occurrence while its\n auxiliary span will be set to the initial occurrence.\n","sig":null,"attributes":[{"value":"/ Return an auxiliary span. This span exists only for some errors that","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13400,"byte_end":13472,"line_start":51,"line_end":51,"column_start":5,"column_end":77}},{"value":"/ benefit from being able to point to two locations in the original","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13477,"byte_end":13546,"line_start":52,"line_end":52,"column_start":5,"column_end":74}},{"value":"/ regular expression. For example, \"duplicate\" errors will have the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13551,"byte_end":13620,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"/ main error position set to the duplicate occurrence while its","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13625,"byte_end":13690,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ auxiliary span will be set to the initial occurrence.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":13695,"byte_end":13752,"line_start":55,"line_end":55,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1749},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14554,"byte_end":14574,"line_start":76,"line_end":76,"column_start":5,"column_end":25},"name":"CaptureLimitExceeded","qualname":"::ast::ErrorKind::CaptureLimitExceeded","value":"ErrorKind::CaptureLimitExceeded","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" The capturing group limit was exceeded.","sig":null,"attributes":[{"value":"/ The capturing group limit was exceeded.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14237,"byte_end":14280,"line_start":70,"line_end":70,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14285,"byte_end":14288,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Note that this represents a limit on the total number of capturing","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14293,"byte_end":14363,"line_start":72,"line_end":72,"column_start":5,"column_end":75}},{"value":"/ groups in a regex and not necessarily the number of nested capturing","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14368,"byte_end":14440,"line_start":73,"line_end":73,"column_start":5,"column_end":77}},{"value":"/ groups. That is, the nest limit can be low and it is still possible for","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14445,"byte_end":14520,"line_start":74,"line_end":74,"column_start":5,"column_end":80}},{"value":"/ this error to occur.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14525,"byte_end":14549,"line_start":75,"line_end":75,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1751},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14651,"byte_end":14669,"line_start":78,"line_end":78,"column_start":5,"column_end":23},"name":"ClassEscapeInvalid","qualname":"::ast::ErrorKind::ClassEscapeInvalid","value":"ErrorKind::ClassEscapeInvalid","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An invalid escape sequence was found in a character class set.\n","sig":null,"attributes":[{"value":"/ An invalid escape sequence was found in a character class set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14580,"byte_end":14646,"line_start":77,"line_end":77,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1753},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14806,"byte_end":14823,"line_start":81,"line_end":81,"column_start":5,"column_end":22},"name":"ClassRangeInvalid","qualname":"::ast::ErrorKind::ClassRangeInvalid","value":"ErrorKind::ClassRangeInvalid","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An invalid character class range was found. An invalid range is any\n range where the start is greater than the end.\n","sig":null,"attributes":[{"value":"/ An invalid character class range was found. An invalid range is any","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14675,"byte_end":14746,"line_start":79,"line_end":79,"column_start":5,"column_end":76}},{"value":"/ range where the start is greater than the end.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14751,"byte_end":14801,"line_start":80,"line_end":80,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1755},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15044,"byte_end":15061,"line_start":85,"line_end":85,"column_start":5,"column_end":22},"name":"ClassRangeLiteral","qualname":"::ast::ErrorKind::ClassRangeLiteral","value":"ErrorKind::ClassRangeLiteral","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An invalid range boundary was found in a character class. Range\n boundaries must be a single literal codepoint, but this error indicates\n that something else was found, such as a nested class.\n","sig":null,"attributes":[{"value":"/ An invalid range boundary was found in a character class. Range","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14829,"byte_end":14896,"line_start":82,"line_end":82,"column_start":5,"column_end":72}},{"value":"/ boundaries must be a single literal codepoint, but this error indicates","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14901,"byte_end":14976,"line_start":83,"line_end":83,"column_start":5,"column_end":80}},{"value":"/ that something else was found, such as a nested class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14981,"byte_end":15039,"line_start":84,"line_end":84,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1757},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15135,"byte_end":15148,"line_start":87,"line_end":87,"column_start":5,"column_end":18},"name":"ClassUnclosed","qualname":"::ast::ErrorKind::ClassUnclosed","value":"ErrorKind::ClassUnclosed","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An opening `[` was found with no corresponding closing `]`.\n","sig":null,"attributes":[{"value":"/ An opening `[` was found with no corresponding closing `]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15067,"byte_end":15130,"line_start":86,"line_end":86,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1759},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15427,"byte_end":15439,"line_start":92,"line_end":92,"column_start":5,"column_end":17},"name":"DecimalEmpty","qualname":"::ast::ErrorKind::DecimalEmpty","value":"ErrorKind::DecimalEmpty","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Note that this error variant is no longer used. Namely, a decimal\n number can only appear as a repetition quantifier. When the number\n in a repetition quantifier is empty, then it gets its own specialized\n error, `RepetitionCountDecimalEmpty`.\n","sig":null,"attributes":[{"value":"/ Note that this error variant is no longer used. Namely, a decimal","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15154,"byte_end":15223,"line_start":88,"line_end":88,"column_start":5,"column_end":74}},{"value":"/ number can only appear as a repetition quantifier. When the number","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15228,"byte_end":15298,"line_start":89,"line_end":89,"column_start":5,"column_end":75}},{"value":"/ in a repetition quantifier is empty, then it gets its own specialized","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15303,"byte_end":15376,"line_start":90,"line_end":90,"column_start":5,"column_end":78}},{"value":"/ error, `RepetitionCountDecimalEmpty`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15381,"byte_end":15422,"line_start":91,"line_end":91,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1761},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15513,"byte_end":15527,"line_start":94,"line_end":94,"column_start":5,"column_end":19},"name":"DecimalInvalid","qualname":"::ast::ErrorKind::DecimalInvalid","value":"ErrorKind::DecimalInvalid","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An invalid decimal number was given where one was expected.\n","sig":null,"attributes":[{"value":"/ An invalid decimal number was given where one was expected.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15445,"byte_end":15508,"line_start":93,"line_end":93,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1763},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15576,"byte_end":15590,"line_start":96,"line_end":96,"column_start":5,"column_end":19},"name":"EscapeHexEmpty","qualname":"::ast::ErrorKind::EscapeHexEmpty","value":"ErrorKind::EscapeHexEmpty","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" A bracketed hex literal was empty.\n","sig":null,"attributes":[{"value":"/ A bracketed hex literal was empty.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15533,"byte_end":15571,"line_start":95,"line_end":95,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1765},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15674,"byte_end":15690,"line_start":98,"line_end":98,"column_start":5,"column_end":21},"name":"EscapeHexInvalid","qualname":"::ast::ErrorKind::EscapeHexInvalid","value":"ErrorKind::EscapeHexInvalid","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" A bracketed hex literal did not correspond to a Unicode scalar value.\n","sig":null,"attributes":[{"value":"/ A bracketed hex literal did not correspond to a Unicode scalar value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15596,"byte_end":15669,"line_start":97,"line_end":97,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1767},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15744,"byte_end":15765,"line_start":100,"line_end":100,"column_start":5,"column_end":26},"name":"EscapeHexInvalidDigit","qualname":"::ast::ErrorKind::EscapeHexInvalidDigit","value":"ErrorKind::EscapeHexInvalidDigit","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An invalid hexadecimal digit was found.\n","sig":null,"attributes":[{"value":"/ An invalid hexadecimal digit was found.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15696,"byte_end":15739,"line_start":99,"line_end":99,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1769},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15834,"byte_end":15853,"line_start":102,"line_end":102,"column_start":5,"column_end":24},"name":"EscapeUnexpectedEof","qualname":"::ast::ErrorKind::EscapeUnexpectedEof","value":"ErrorKind::EscapeUnexpectedEof","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" EOF was found before an escape sequence was completed.\n","sig":null,"attributes":[{"value":"/ EOF was found before an escape sequence was completed.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15771,"byte_end":15829,"line_start":101,"line_end":101,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1771},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15900,"byte_end":15918,"line_start":104,"line_end":104,"column_start":5,"column_end":23},"name":"EscapeUnrecognized","qualname":"::ast::ErrorKind::EscapeUnrecognized","value":"ErrorKind::EscapeUnrecognized","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An unrecognized escape sequence.\n","sig":null,"attributes":[{"value":"/ An unrecognized escape sequence.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15859,"byte_end":15895,"line_start":103,"line_end":103,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1773},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15993,"byte_end":16013,"line_start":106,"line_end":106,"column_start":5,"column_end":25},"name":"FlagDanglingNegation","qualname":"::ast::ErrorKind::FlagDanglingNegation","value":"ErrorKind::FlagDanglingNegation","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" A dangling negation was used when setting flags, e.g., `i-`.\n","sig":null,"attributes":[{"value":"/ A dangling negation was used when setting flags, e.g., `i-`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":15924,"byte_end":15988,"line_start":105,"line_end":105,"column_start":5,"column_end":69}}]},{"kind":"StructVariant","id":{"krate":0,"index":1775},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16063,"byte_end":16076,"line_start":108,"line_end":108,"column_start":5,"column_end":18},"name":"FlagDuplicate","qualname":"::ast::ErrorKind::FlagDuplicate","value":"ErrorKind::FlagDuplicate { original }","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" A flag was used twice, e.g., `i-i`.\n","sig":null,"attributes":[{"value":"/ A flag was used twice, e.g., `i-i`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16019,"byte_end":16058,"line_start":107,"line_end":107,"column_start":5,"column_end":44}}]},{"kind":"StructVariant","id":{"krate":0,"index":1777},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16282,"byte_end":16302,"line_start":114,"line_end":114,"column_start":5,"column_end":25},"name":"FlagRepeatedNegation","qualname":"::ast::ErrorKind::FlagRepeatedNegation","value":"ErrorKind::FlagRepeatedNegation { original }","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" The negation operator was used twice, e.g., `-i-s`.\n","sig":null,"attributes":[{"value":"/ The negation operator was used twice, e.g., `-i-s`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16222,"byte_end":16277,"line_start":113,"line_end":113,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1779},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16523,"byte_end":16540,"line_start":120,"line_end":120,"column_start":5,"column_end":22},"name":"FlagUnexpectedEof","qualname":"::ast::ErrorKind::FlagUnexpectedEof","value":"ErrorKind::FlagUnexpectedEof","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Expected a flag but got EOF, e.g., `(?`.\n","sig":null,"attributes":[{"value":"/ Expected a flag but got EOF, e.g., `(?`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16474,"byte_end":16518,"line_start":119,"line_end":119,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1781},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16584,"byte_end":16600,"line_start":122,"line_end":122,"column_start":5,"column_end":21},"name":"FlagUnrecognized","qualname":"::ast::ErrorKind::FlagUnrecognized","value":"ErrorKind::FlagUnrecognized","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Unrecognized flag, e.g., `a`.\n","sig":null,"attributes":[{"value":"/ Unrecognized flag, e.g., `a`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16546,"byte_end":16579,"line_start":121,"line_end":121,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":1783},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16650,"byte_end":16668,"line_start":124,"line_end":124,"column_start":5,"column_end":23},"name":"GroupNameDuplicate","qualname":"::ast::ErrorKind::GroupNameDuplicate","value":"ErrorKind::GroupNameDuplicate { original }","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" A duplicate capture name was found.\n","sig":null,"attributes":[{"value":"/ A duplicate capture name was found.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16606,"byte_end":16645,"line_start":123,"line_end":123,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1785},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16910,"byte_end":16924,"line_start":130,"line_end":130,"column_start":5,"column_end":19},"name":"GroupNameEmpty","qualname":"::ast::ErrorKind::GroupNameEmpty","value":"ErrorKind::GroupNameEmpty","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" A capture group name is empty, e.g., `(?P<>abc)`.\n","sig":null,"attributes":[{"value":"/ A capture group name is empty, e.g., `(?P<>abc)`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16852,"byte_end":16905,"line_start":129,"line_end":129,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1787},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17130,"byte_end":17146,"line_start":134,"line_end":134,"column_start":5,"column_end":21},"name":"GroupNameInvalid","qualname":"::ast::ErrorKind::GroupNameInvalid","value":"ErrorKind::GroupNameInvalid","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An invalid character was seen for a capture group name. This includes\n errors where the first character is a digit (even though subsequent\n characters are allowed to be digits).\n","sig":null,"attributes":[{"value":"/ An invalid character was seen for a capture group name. This includes","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":16930,"byte_end":17003,"line_start":131,"line_end":131,"column_start":5,"column_end":78}},{"value":"/ errors where the first character is a digit (even though subsequent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17008,"byte_end":17079,"line_start":132,"line_end":132,"column_start":5,"column_end":76}},{"value":"/ characters are allowed to be digits).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17084,"byte_end":17125,"line_start":133,"line_end":133,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1789},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17219,"byte_end":17241,"line_start":136,"line_end":136,"column_start":5,"column_end":27},"name":"GroupNameUnexpectedEof","qualname":"::ast::ErrorKind::GroupNameUnexpectedEof","value":"ErrorKind::GroupNameUnexpectedEof","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" A closing `>` could not be found for a capture group name.\n","sig":null,"attributes":[{"value":"/ A closing `>` could not be found for a capture group name.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17152,"byte_end":17214,"line_start":135,"line_end":135,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1791},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17367,"byte_end":17380,"line_start":140,"line_end":140,"column_start":5,"column_end":18},"name":"GroupUnclosed","qualname":"::ast::ErrorKind::GroupUnclosed","value":"ErrorKind::GroupUnclosed","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An unclosed group, e.g., `(ab`.","sig":null,"attributes":[{"value":"/ An unclosed group, e.g., `(ab`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17247,"byte_end":17282,"line_start":137,"line_end":137,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17287,"byte_end":17290,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ The span of this error corresponds to the unclosed parenthesis.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17295,"byte_end":17362,"line_start":139,"line_end":139,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1793},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17426,"byte_end":17439,"line_start":142,"line_end":142,"column_start":5,"column_end":18},"name":"GroupUnopened","qualname":"::ast::ErrorKind::GroupUnopened","value":"ErrorKind::GroupUnopened","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An unopened group, e.g., `ab)`.\n","sig":null,"attributes":[{"value":"/ An unopened group, e.g., `ab)`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17386,"byte_end":17421,"line_start":141,"line_end":141,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1795},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17551,"byte_end":17568,"line_start":145,"line_end":145,"column_start":5,"column_end":22},"name":"NestLimitExceeded","qualname":"::ast::ErrorKind::NestLimitExceeded","value":"ErrorKind::NestLimitExceeded(u32)","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" The nest limit was exceeded. The limit stored here is the limit\n configured in the parser.\n","sig":null,"attributes":[{"value":"/ The nest limit was exceeded. The limit stored here is the limit","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17445,"byte_end":17512,"line_start":143,"line_end":143,"column_start":5,"column_end":72}},{"value":"/ configured in the parser.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17517,"byte_end":17546,"line_start":144,"line_end":144,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1798},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17718,"byte_end":17740,"line_start":148,"line_end":148,"column_start":5,"column_end":27},"name":"RepetitionCountInvalid","qualname":"::ast::ErrorKind::RepetitionCountInvalid","value":"ErrorKind::RepetitionCountInvalid","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" The range provided in a counted repetition operator is invalid. The\n range is invalid if the start is greater than the end.\n","sig":null,"attributes":[{"value":"/ The range provided in a counted repetition operator is invalid. The","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17579,"byte_end":17650,"line_start":146,"line_end":146,"column_start":5,"column_end":76}},{"value":"/ range is invalid if the start is greater than the end.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17655,"byte_end":17713,"line_start":147,"line_end":147,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1800},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17861,"byte_end":17888,"line_start":151,"line_end":151,"column_start":5,"column_end":32},"name":"RepetitionCountDecimalEmpty","qualname":"::ast::ErrorKind::RepetitionCountDecimalEmpty","value":"ErrorKind::RepetitionCountDecimalEmpty","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An opening `{` was not followed by a valid decimal value.\n For example, `x{}` or `x{]}` would fail.\n","sig":null,"attributes":[{"value":"/ An opening `{` was not followed by a valid decimal value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17746,"byte_end":17807,"line_start":149,"line_end":149,"column_start":5,"column_end":66}},{"value":"/ For example, `x{}` or `x{]}` would fail.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17812,"byte_end":17856,"line_start":150,"line_end":150,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1802},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17962,"byte_end":17985,"line_start":153,"line_end":153,"column_start":5,"column_end":28},"name":"RepetitionCountUnclosed","qualname":"::ast::ErrorKind::RepetitionCountUnclosed","value":"ErrorKind::RepetitionCountUnclosed","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An opening `{` was found with no corresponding closing `}`.\n","sig":null,"attributes":[{"value":"/ An opening `{` was found with no corresponding closing `}`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17894,"byte_end":17957,"line_start":152,"line_end":152,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1804},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18299,"byte_end":18316,"line_start":158,"line_end":158,"column_start":5,"column_end":22},"name":"RepetitionMissing","qualname":"::ast::ErrorKind::RepetitionMissing","value":"ErrorKind::RepetitionMissing","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" A repetition operator was applied to a missing sub-expression. This\n occurs, for example, in the regex consisting of just a `*` or even\n `(?i)*`. It is, however, possible to create a repetition operating on\n an empty sub-expression. For example, `()*` is still considered valid.\n","sig":null,"attributes":[{"value":"/ A repetition operator was applied to a missing sub-expression. This","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":17991,"byte_end":18062,"line_start":154,"line_end":154,"column_start":5,"column_end":76}},{"value":"/ occurs, for example, in the regex consisting of just a `*` or even","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18067,"byte_end":18137,"line_start":155,"line_end":155,"column_start":5,"column_end":75}},{"value":"/ `(?i)*`. It is, however, possible to create a repetition operating on","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18142,"byte_end":18215,"line_start":156,"line_end":156,"column_start":5,"column_end":78}},{"value":"/ an empty sub-expression. For example, `()*` is still considered valid.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18220,"byte_end":18294,"line_start":157,"line_end":157,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1806},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18447,"byte_end":18466,"line_start":161,"line_end":161,"column_start":5,"column_end":24},"name":"UnicodeClassInvalid","qualname":"::ast::ErrorKind::UnicodeClassInvalid","value":"ErrorKind::UnicodeClassInvalid","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" The Unicode class is not valid. This typically occurs when a `\\p` is\n followed by something other than a `{`.\n","sig":null,"attributes":[{"value":"/ The Unicode class is not valid. This typically occurs when a `\\p` is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18322,"byte_end":18394,"line_start":159,"line_end":159,"column_start":5,"column_end":77}},{"value":"/ followed by something other than a `{`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18399,"byte_end":18442,"line_start":160,"line_end":160,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1808},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18675,"byte_end":18699,"line_start":165,"line_end":165,"column_start":5,"column_end":29},"name":"UnsupportedBackreference","qualname":"::ast::ErrorKind::UnsupportedBackreference","value":"ErrorKind::UnsupportedBackreference","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" When octal support is disabled, this error is produced when an octal\n escape is used. The octal escape is assumed to be an invocation of\n a backreference, which is the common case.\n","sig":null,"attributes":[{"value":"/ When octal support is disabled, this error is produced when an octal","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18472,"byte_end":18544,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/ escape is used. The octal escape is assumed to be an invocation of","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18549,"byte_end":18619,"line_start":163,"line_end":163,"column_start":5,"column_end":75}},{"value":"/ a backreference, which is the common case.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18624,"byte_end":18670,"line_start":164,"line_end":164,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1810},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":19056,"byte_end":19077,"line_start":171,"line_end":171,"column_start":5,"column_end":26},"name":"UnsupportedLookAround","qualname":"::ast::ErrorKind::UnsupportedLookAround","value":"ErrorKind::UnsupportedLookAround","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" When syntax similar to PCRE's look-around is used, this error is\n returned. Some example syntaxes that are rejected include, but are\n not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and\n `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this\n error is used to improve the user experience.\n","sig":null,"attributes":[{"value":"/ When syntax similar to PCRE's look-around is used, this error is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18705,"byte_end":18773,"line_start":166,"line_end":166,"column_start":5,"column_end":73}},{"value":"/ returned. Some example syntaxes that are rejected include, but are","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18778,"byte_end":18848,"line_start":167,"line_end":167,"column_start":5,"column_end":75}},{"value":"/ not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18853,"byte_end":18918,"line_start":168,"line_end":168,"column_start":5,"column_end":70}},{"value":"/ `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":18923,"byte_end":18997,"line_start":169,"line_end":169,"column_start":5,"column_end":79}},{"value":"/ error is used to improve the user experience.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":19002,"byte_end":19051,"line_start":170,"line_end":170,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1812},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":19357,"byte_end":19372,"line_start":178,"line_end":178,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::ast::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":19083,"byte_end":19137,"line_start":172,"line_end":172,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":19142,"byte_end":19145,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":19150,"byte_end":19220,"line_start":174,"line_end":174,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":19225,"byte_end":19297,"line_start":175,"line_end":175,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":19302,"byte_end":19333,"line_start":176,"line_end":176,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1748},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14221,"byte_end":14230,"line_start":69,"line_end":69,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::ast::ErrorKind","value":"ErrorKind::{CaptureLimitExceeded, ClassEscapeInvalid, ClassRangeInvalid, ClassRangeLiteral, ClassUnclosed, DecimalEmpty, DecimalInvalid, EscapeHexEmpty, EscapeHexInvalid, EscapeHexInvalidDigit, EscapeUnexpectedEof, EscapeUnrecognized, FlagDanglingNegation, FlagDuplicate, FlagRepeatedNegation, FlagUnexpectedEof, FlagUnrecognized, GroupNameDuplicate, GroupNameEmpty, GroupNameInvalid, GroupNameUnexpectedEof, GroupUnclosed, GroupUnopened, NestLimitExceeded, RepetitionCountInvalid, RepetitionCountDecimalEmpty, RepetitionCountUnclosed, RepetitionMissing, UnicodeClassInvalid, UnsupportedBackreference, UnsupportedLookAround, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1749},{"krate":0,"index":1751},{"krate":0,"index":1753},{"krate":0,"index":1755},{"krate":0,"index":1757},{"krate":0,"index":1759},{"krate":0,"index":1761},{"krate":0,"index":1763},{"krate":0,"index":1765},{"krate":0,"index":1767},{"krate":0,"index":1769},{"krate":0,"index":1771},{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1777},{"krate":0,"index":1779},{"krate":0,"index":1781},{"krate":0,"index":1783},{"krate":0,"index":1785},{"krate":0,"index":1787},{"krate":0,"index":1789},{"krate":0,"index":1791},{"krate":0,"index":1793},{"krate":0,"index":1795},{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812}],"decl_id":null,"docs":" The type of an error that occurred while building an AST.\n","sig":null,"attributes":[{"value":"/ The type of an error that occurred while building an AST.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":14111,"byte_end":14172,"line_start":67,"line_end":67,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1825},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25613,"byte_end":25617,"line_start":323,"line_end":323,"column_start":12,"column_end":16},"name":"Span","qualname":"::ast::Span","value":"Span { start, end }","parent":null,"children":[{"krate":0,"index":1826},{"krate":0,"index":1827}],"decl_id":null,"docs":" Span represents the position information of a single AST item.","sig":null,"attributes":[{"value":"/ Span represents the position information of a single AST item.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25371,"byte_end":25437,"line_start":318,"line_end":318,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25438,"byte_end":25441,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ All span positions are absolute byte offsets that can be used on the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25442,"byte_end":25514,"line_start":320,"line_end":320,"column_start":1,"column_end":73}},{"value":"/ original regular expression that was parsed.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25515,"byte_end":25563,"line_start":321,"line_end":321,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":1826},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25659,"byte_end":25664,"line_start":325,"line_end":325,"column_start":9,"column_end":14},"name":"start","qualname":"::ast::Span::start","value":"ast::Position","parent":{"krate":0,"index":1825},"children":[],"decl_id":null,"docs":" The start byte offset.\n","sig":null,"attributes":[{"value":"/ The start byte offset.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25624,"byte_end":25650,"line_start":324,"line_end":324,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1827},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25713,"byte_end":25716,"line_start":327,"line_end":327,"column_start":9,"column_end":12},"name":"end","qualname":"::ast::Span::end","value":"ast::Position","parent":{"krate":0,"index":1825},"children":[],"decl_id":null,"docs":" The end byte offset.\n","sig":null,"attributes":[{"value":"/ The end byte offset.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25680,"byte_end":25704,"line_start":326,"line_end":326,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1838},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26362,"byte_end":26370,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"Position","qualname":"::ast::Position","value":"Position { offset, line, column }","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1841}],"decl_id":null,"docs":" A single position in a regular expression.","sig":null,"attributes":[{"value":"/ A single position in a regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26155,"byte_end":26201,"line_start":348,"line_end":348,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26202,"byte_end":26205,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ A position encodes one half of a span, and include the byte offset, line","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26206,"byte_end":26282,"line_start":350,"line_end":350,"column_start":1,"column_end":77}},{"value":"/ number and column number.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26283,"byte_end":26312,"line_start":351,"line_end":351,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":1839},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26512,"byte_end":26518,"line_start":356,"line_end":356,"column_start":9,"column_end":15},"name":"offset","qualname":"::ast::Position::offset","value":"usize","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" The absolute offset of this position, starting at `0` from the\n beginning of the regular expression pattern string.\n","sig":null,"attributes":[{"value":"/ The absolute offset of this position, starting at `0` from the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26377,"byte_end":26443,"line_start":354,"line_end":354,"column_start":5,"column_end":71}},{"value":"/ beginning of the regular expression pattern string.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26448,"byte_end":26503,"line_start":355,"line_end":355,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1840},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26577,"byte_end":26581,"line_start":358,"line_end":358,"column_start":9,"column_end":13},"name":"line","qualname":"::ast::Position::line","value":"usize","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" The line number, starting at `1`.\n","sig":null,"attributes":[{"value":"/ The line number, starting at `1`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26531,"byte_end":26568,"line_start":357,"line_end":357,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1841},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26654,"byte_end":26660,"line_start":360,"line_end":360,"column_start":9,"column_end":15},"name":"column","qualname":"::ast::Position::column","value":"usize","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" The approximate column number, starting at `1`.\n","sig":null,"attributes":[{"value":"/ The approximate column number, starting at `1`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26594,"byte_end":26645,"line_start":359,"line_end":359,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27244,"byte_end":27247,"line_start":387,"line_end":387,"column_start":12,"column_end":15},"name":"new","qualname":"<Span>::new","value":"fn (start: Position, end: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span with the given positions.\n","sig":null,"attributes":[{"value":"/ Create a new span with the given positions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27185,"byte_end":27232,"line_start":386,"line_end":386,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27421,"byte_end":27426,"line_start":392,"line_end":392,"column_start":12,"column_end":17},"name":"splat","qualname":"<Span>::splat","value":"fn (pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span using the given position as the start and end.\n","sig":null,"attributes":[{"value":"/ Create a new span using the given position as the start and end.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27341,"byte_end":27409,"line_start":391,"line_end":391,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27591,"byte_end":27601,"line_start":398,"line_end":398,"column_start":12,"column_end":22},"name":"with_start","qualname":"<Span>::with_start","value":"fn (self, pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span by replacing the starting the position with the one\n given.\n","sig":null,"attributes":[{"value":"/ Create a new span by replacing the starting the position with the one","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27491,"byte_end":27564,"line_start":396,"line_end":396,"column_start":5,"column_end":78}},{"value":"/ given.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27569,"byte_end":27579,"line_start":397,"line_end":397,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27778,"byte_end":27786,"line_start":404,"line_end":404,"column_start":12,"column_end":20},"name":"with_end","qualname":"<Span>::with_end","value":"fn (self, pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span by replacing the ending the position with the one\n given.\n","sig":null,"attributes":[{"value":"/ Create a new span by replacing the ending the position with the one","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27680,"byte_end":27751,"line_start":402,"line_end":402,"column_start":5,"column_end":76}},{"value":"/ given.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27756,"byte_end":27766,"line_start":403,"line_end":403,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27941,"byte_end":27952,"line_start":409,"line_end":409,"column_start":12,"column_end":23},"name":"is_one_line","qualname":"<Span>::is_one_line","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this span occurs on a single line.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this span occurs on a single line.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27863,"byte_end":27929,"line_start":408,"line_end":408,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28181,"byte_end":28189,"line_start":415,"line_end":415,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Span>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this span is empty. That is, it points to\n a single position in the concrete syntax of a regular expression.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this span is empty. That is, it points to","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28022,"byte_end":28095,"line_start":413,"line_end":413,"column_start":5,"column_end":78}},{"value":"/ a single position in the concrete syntax of a regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28100,"byte_end":28169,"line_start":414,"line_end":414,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28632,"byte_end":28635,"line_start":429,"line_end":429,"column_start":12,"column_end":15},"name":"new","qualname":"<Position>::new","value":"fn (offset: usize, line: usize, column: usize) -> Position","parent":null,"children":[],"decl_id":null,"docs":" Create a new position with the given information.","sig":null,"attributes":[{"value":"/ Create a new position with the given information.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28281,"byte_end":28334,"line_start":421,"line_end":421,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28339,"byte_end":28342,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ `offset` is the absolute offset of the position, starting at `0` from","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28347,"byte_end":28420,"line_start":423,"line_end":423,"column_start":5,"column_end":78}},{"value":"/ the beginning of the regular expression pattern string.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28425,"byte_end":28484,"line_start":424,"line_end":424,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28489,"byte_end":28492,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ `line` is the line number, starting at `1`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28497,"byte_end":28544,"line_start":426,"line_end":426,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28549,"byte_end":28552,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ `column` is the approximate column number, starting at `1`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28557,"byte_end":28620,"line_start":428,"line_end":428,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1852},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29077,"byte_end":29089,"line_start":441,"line_end":441,"column_start":12,"column_end":24},"name":"WithComments","qualname":"::ast::WithComments","value":"WithComments { ast, comments }","parent":null,"children":[{"krate":0,"index":1853},{"krate":0,"index":1854}],"decl_id":null,"docs":" An abstract syntax tree for a singular expression along with comments\n found.","sig":null,"attributes":[{"value":"/ An abstract syntax tree for a singular expression along with comments","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28766,"byte_end":28839,"line_start":434,"line_end":434,"column_start":1,"column_end":74}},{"value":"/ found.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28840,"byte_end":28850,"line_start":435,"line_end":435,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28851,"byte_end":28854,"line_start":436,"line_end":436,"column_start":1,"column_end":4}},{"value":"/ Comments are not stored in the tree itself to avoid complexity. Each","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28855,"byte_end":28927,"line_start":437,"line_end":437,"column_start":1,"column_end":73}},{"value":"/ comment contains a span of precisely where it occurred in the original","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28928,"byte_end":29002,"line_start":438,"line_end":438,"column_start":1,"column_end":75}},{"value":"/ regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29003,"byte_end":29026,"line_start":439,"line_end":439,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":1853},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29124,"byte_end":29127,"line_start":443,"line_end":443,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::WithComments::ast","value":"ast::Ast","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" The actual ast.\n","sig":null,"attributes":[{"value":"/ The actual ast.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29096,"byte_end":29115,"line_start":442,"line_end":442,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":1854},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29205,"byte_end":29213,"line_start":445,"line_end":445,"column_start":9,"column_end":17},"name":"comments","qualname":"::ast::WithComments::comments","value":"std::vec::Vec<ast::Comment>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" All comments found in the original regular expression.\n","sig":null,"attributes":[{"value":"/ All comments found in the original regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29138,"byte_end":29196,"line_start":444,"line_end":444,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1866},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29436,"byte_end":29443,"line_start":453,"line_end":453,"column_start":12,"column_end":19},"name":"Comment","qualname":"::ast::Comment","value":"Comment { span, comment }","parent":null,"children":[{"krate":0,"index":1867},{"krate":0,"index":1868}],"decl_id":null,"docs":" A comment from a regular expression with an associated span.","sig":null,"attributes":[{"value":"/ A comment from a regular expression with an associated span.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29232,"byte_end":29296,"line_start":448,"line_end":448,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29297,"byte_end":29300,"line_start":449,"line_end":449,"column_start":1,"column_end":4}},{"value":"/ A regular expression can only contain comments when the `x` flag is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29301,"byte_end":29372,"line_start":450,"line_end":450,"column_start":1,"column_end":72}},{"value":"/ enabled.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29373,"byte_end":29385,"line_start":451,"line_end":451,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":1867},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29533,"byte_end":29537,"line_start":455,"line_end":455,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Comment::span","value":"ast::Span","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" The span of this comment, including the beginning `#` and ending `\\n`.\n","sig":null,"attributes":[{"value":"/ The span of this comment, including the beginning `#` and ending `\\n`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29450,"byte_end":29524,"line_start":454,"line_end":454,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":1868},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29694,"byte_end":29701,"line_start":458,"line_end":458,"column_start":9,"column_end":16},"name":"comment","qualname":"::ast::Comment::comment","value":"std::string::String","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" The comment text, starting with the first character following the `#`\n and ending with the last character preceding the `\\n`.\n","sig":null,"attributes":[{"value":"/ The comment text, starting with the first character following the `#`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29549,"byte_end":29622,"line_start":456,"line_end":456,"column_start":5,"column_end":78}},{"value":"/ and ending with the last character preceding the `\\n`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29627,"byte_end":29685,"line_start":457,"line_end":457,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1881},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30148,"byte_end":30153,"line_start":471,"line_end":471,"column_start":5,"column_end":10},"name":"Empty","qualname":"::ast::Ast::Empty","value":"Ast::Empty(Span)","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" An empty regex that matches everything.\n","sig":null,"attributes":[{"value":"/ An empty regex that matches everything.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30100,"byte_end":30143,"line_start":470,"line_end":470,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1884},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30204,"byte_end":30209,"line_start":473,"line_end":473,"column_start":5,"column_end":10},"name":"Flags","qualname":"::ast::Ast::Flags","value":"Ast::Flags(SetFlags)","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" A set of flags, e.g., `(?is)`.\n","sig":null,"attributes":[{"value":"/ A set of flags, e.g., `(?is)`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30165,"byte_end":30199,"line_start":472,"line_end":472,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1887},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30294,"byte_end":30301,"line_start":475,"line_end":475,"column_start":5,"column_end":12},"name":"Literal","qualname":"::ast::Ast::Literal","value":"Ast::Literal(Literal)","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" A single character literal, which includes escape sequences.\n","sig":null,"attributes":[{"value":"/ A single character literal, which includes escape sequences.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30225,"byte_end":30289,"line_start":474,"line_end":474,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1890},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30351,"byte_end":30354,"line_start":477,"line_end":477,"column_start":5,"column_end":8},"name":"Dot","qualname":"::ast::Ast::Dot","value":"Ast::Dot(Span)","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" The \"any character\" class.\n","sig":null,"attributes":[{"value":"/ The \"any character\" class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30316,"byte_end":30346,"line_start":476,"line_end":476,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1893},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30405,"byte_end":30414,"line_start":479,"line_end":479,"column_start":5,"column_end":14},"name":"Assertion","qualname":"::ast::Ast::Assertion","value":"Ast::Assertion(Assertion)","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" A single zero-width assertion.\n","sig":null,"attributes":[{"value":"/ A single zero-width assertion.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30366,"byte_end":30400,"line_start":478,"line_end":478,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1896},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30580,"byte_end":30585,"line_start":482,"line_end":482,"column_start":5,"column_end":10},"name":"Class","qualname":"::ast::Ast::Class","value":"Ast::Class(Class)","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" A single character class. This includes all forms of character classes\n except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.\n","sig":null,"attributes":[{"value":"/ A single character class. This includes all forms of character classes","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30431,"byte_end":30505,"line_start":480,"line_end":480,"column_start":5,"column_end":79}},{"value":"/ except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30510,"byte_end":30575,"line_start":481,"line_end":481,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1899},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30672,"byte_end":30682,"line_start":484,"line_end":484,"column_start":5,"column_end":15},"name":"Repetition","qualname":"::ast::Ast::Repetition","value":"Ast::Repetition(Repetition)","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" A repetition operator applied to an arbitrary regular expression.\n","sig":null,"attributes":[{"value":"/ A repetition operator applied to an arbitrary regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30598,"byte_end":30667,"line_start":483,"line_end":483,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1902},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30738,"byte_end":30743,"line_start":486,"line_end":486,"column_start":5,"column_end":10},"name":"Group","qualname":"::ast::Ast::Group","value":"Ast::Group(Group)","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" A grouped regular expression.\n","sig":null,"attributes":[{"value":"/ A grouped regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30700,"byte_end":30733,"line_start":485,"line_end":485,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1905},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30803,"byte_end":30814,"line_start":488,"line_end":488,"column_start":5,"column_end":16},"name":"Alternation","qualname":"::ast::Ast::Alternation","value":"Ast::Alternation(Alternation)","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" An alternation of regular expressions.\n","sig":null,"attributes":[{"value":"/ An alternation of regular expressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30756,"byte_end":30798,"line_start":487,"line_end":487,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1908},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30881,"byte_end":30887,"line_start":490,"line_end":490,"column_start":5,"column_end":11},"name":"Concat","qualname":"::ast::Ast::Concat","value":"Ast::Concat(Concat)","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" A concatenation of regular expressions.\n","sig":null,"attributes":[{"value":"/ A concatenation of regular expressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30833,"byte_end":30876,"line_start":489,"line_end":489,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":1880},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30090,"byte_end":30093,"line_start":469,"line_end":469,"column_start":10,"column_end":13},"name":"Ast","qualname":"::ast::Ast","value":"Ast::{Empty, Flags, Literal, Dot, Assertion, Class, Repetition, Group, Alternation, Concat}","parent":null,"children":[{"krate":0,"index":1881},{"krate":0,"index":1884},{"krate":0,"index":1887},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1896},{"krate":0,"index":1899},{"krate":0,"index":1902},{"krate":0,"index":1905},{"krate":0,"index":1908}],"decl_id":null,"docs":" An abstract syntax tree for a single regular expression.","sig":null,"attributes":[{"value":"/ An abstract syntax tree for a single regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29714,"byte_end":29774,"line_start":461,"line_end":461,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29775,"byte_end":29778,"line_start":462,"line_end":462,"column_start":1,"column_end":4}},{"value":"/ An `Ast`'s `fmt::Display` implementation uses constant stack space and heap","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29779,"byte_end":29858,"line_start":463,"line_end":463,"column_start":1,"column_end":80}},{"value":"/ space proportional to the size of the `Ast`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29859,"byte_end":29907,"line_start":464,"line_end":464,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29908,"byte_end":29911,"line_start":465,"line_end":465,"column_start":1,"column_end":4}},{"value":"/ This type defines its own destructor that uses constant stack space and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29912,"byte_end":29987,"line_start":466,"line_end":466,"column_start":1,"column_end":76}},{"value":"/ heap space proportional to the size of the `Ast`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":29988,"byte_end":30041,"line_start":467,"line_end":467,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30976,"byte_end":30980,"line_start":495,"line_end":495,"column_start":12,"column_end":16},"name":"span","qualname":"<Ast>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this abstract syntax tree.\n","sig":null,"attributes":[{"value":"/ Return the span of this abstract syntax tree.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30915,"byte_end":30964,"line_start":494,"line_end":494,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":31540,"byte_end":31548,"line_start":511,"line_end":511,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Ast>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this Ast is empty.\n","sig":null,"attributes":[{"value":"/ Return true if and only if this Ast is empty.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":31479,"byte_end":31528,"line_start":510,"line_end":510,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1922},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32754,"byte_end":32765,"line_start":553,"line_end":553,"column_start":12,"column_end":23},"name":"Alternation","qualname":"::ast::Alternation","value":"Alternation { span, asts }","parent":null,"children":[{"krate":0,"index":1923},{"krate":0,"index":1924}],"decl_id":null,"docs":" An alternation of regular expressions.\n","sig":null,"attributes":[{"value":"/ An alternation of regular expressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32661,"byte_end":32703,"line_start":551,"line_end":551,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1923},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32814,"byte_end":32818,"line_start":555,"line_end":555,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Alternation::span","value":"ast::Span","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":" The span of this alternation.\n","sig":null,"attributes":[{"value":"/ The span of this alternation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32772,"byte_end":32805,"line_start":554,"line_end":554,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1924},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32877,"byte_end":32881,"line_start":557,"line_end":557,"column_start":9,"column_end":13},"name":"asts","qualname":"::ast::Alternation::asts","value":"std::vec::Vec<ast::Ast>","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":" The alternate regular expressions.\n","sig":null,"attributes":[{"value":"/ The alternate regular expressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32830,"byte_end":32868,"line_start":556,"line_end":556,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33195,"byte_end":33203,"line_start":566,"line_end":566,"column_start":12,"column_end":20},"name":"into_ast","qualname":"<Alternation>::into_ast","value":"fn (mut self) -> Ast","parent":null,"children":[],"decl_id":null,"docs":" Return this alternation as an AST.","sig":null,"attributes":[{"value":"/ Return this alternation as an AST.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32919,"byte_end":32957,"line_start":561,"line_end":561,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32962,"byte_end":32965,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ If this alternation contains zero ASTs, then Ast::Empty is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32970,"byte_end":33032,"line_start":563,"line_end":563,"column_start":5,"column_end":67}},{"value":"/ returned. If this alternation contains exactly 1 AST, then the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33037,"byte_end":33103,"line_start":564,"line_end":564,"column_start":5,"column_end":71}},{"value":"/ corresponding AST is returned. Otherwise, Ast::Alternation is returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33108,"byte_end":33183,"line_start":565,"line_end":565,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":1936},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33492,"byte_end":33498,"line_start":577,"line_end":577,"column_start":12,"column_end":18},"name":"Concat","qualname":"::ast::Concat","value":"Concat { span, asts }","parent":null,"children":[{"krate":0,"index":1937},{"krate":0,"index":1938}],"decl_id":null,"docs":" A concatenation of regular expressions.\n","sig":null,"attributes":[{"value":"/ A concatenation of regular expressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33398,"byte_end":33441,"line_start":575,"line_end":575,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1937},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33549,"byte_end":33553,"line_start":579,"line_end":579,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Concat::span","value":"ast::Span","parent":{"krate":0,"index":1936},"children":[],"decl_id":null,"docs":" The span of this concatenation.\n","sig":null,"attributes":[{"value":"/ The span of this concatenation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33505,"byte_end":33540,"line_start":578,"line_end":578,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1938},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33616,"byte_end":33620,"line_start":581,"line_end":581,"column_start":9,"column_end":13},"name":"asts","qualname":"::ast::Concat::asts","value":"std::vec::Vec<ast::Ast>","parent":{"krate":0,"index":1936},"children":[],"decl_id":null,"docs":" The concatenation regular expressions.\n","sig":null,"attributes":[{"value":"/ The concatenation regular expressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33565,"byte_end":33607,"line_start":580,"line_end":580,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33930,"byte_end":33938,"line_start":590,"line_end":590,"column_start":12,"column_end":20},"name":"into_ast","qualname":"<Concat>::into_ast","value":"fn (mut self) -> Ast","parent":null,"children":[],"decl_id":null,"docs":" Return this concatenation as an AST.","sig":null,"attributes":[{"value":"/ Return this concatenation as an AST.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33653,"byte_end":33693,"line_start":585,"line_end":585,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33698,"byte_end":33701,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ If this concatenation contains zero ASTs, then Ast::Empty is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33706,"byte_end":33770,"line_start":587,"line_end":587,"column_start":5,"column_end":69}},{"value":"/ returned. If this concatenation contains exactly 1 AST, then the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33775,"byte_end":33843,"line_start":588,"line_end":588,"column_start":5,"column_end":73}},{"value":"/ corresponding AST is returned. Otherwise, Ast::Concat is returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33848,"byte_end":33918,"line_start":589,"line_end":589,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1950},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34384,"byte_end":34391,"line_start":605,"line_end":605,"column_start":12,"column_end":19},"name":"Literal","qualname":"::ast::Literal","value":"Literal { span, kind, c }","parent":null,"children":[{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":1953}],"decl_id":null,"docs":" A single literal expression.","sig":null,"attributes":[{"value":"/ A single literal expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34128,"byte_end":34160,"line_start":599,"line_end":599,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34161,"byte_end":34164,"line_start":600,"line_end":600,"column_start":1,"column_end":4}},{"value":"/ A literal corresponds to a single Unicode scalar value. Literals may be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34165,"byte_end":34240,"line_start":601,"line_end":601,"column_start":1,"column_end":76}},{"value":"/ represented in their literal form, e.g., `a` or in their escaped form,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34241,"byte_end":34315,"line_start":602,"line_end":602,"column_start":1,"column_end":75}},{"value":"/ e.g., `\\x61`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34316,"byte_end":34333,"line_start":603,"line_end":603,"column_start":1,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":1951},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34436,"byte_end":34440,"line_start":607,"line_end":607,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Literal::span","value":"ast::Span","parent":{"krate":0,"index":1950},"children":[],"decl_id":null,"docs":" The span of this literal.\n","sig":null,"attributes":[{"value":"/ The span of this literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34398,"byte_end":34427,"line_start":606,"line_end":606,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":1952},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34490,"byte_end":34494,"line_start":609,"line_end":609,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Literal::kind","value":"ast::LiteralKind","parent":{"krate":0,"index":1950},"children":[],"decl_id":null,"docs":" The kind of this literal.\n","sig":null,"attributes":[{"value":"/ The kind of this literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34452,"byte_end":34481,"line_start":608,"line_end":608,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":1953},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34581,"byte_end":34582,"line_start":611,"line_end":611,"column_start":9,"column_end":10},"name":"c","qualname":"::ast::Literal::c","value":"char","parent":{"krate":0,"index":1950},"children":[],"decl_id":null,"docs":" The Unicode scalar value corresponding to this literal.\n","sig":null,"attributes":[{"value":"/ The Unicode scalar value corresponding to this literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34513,"byte_end":34572,"line_start":610,"line_end":610,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34765,"byte_end":34769,"line_start":617,"line_end":617,"column_start":12,"column_end":16},"name":"byte","qualname":"<Literal>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" If this literal was written as a `\\x` hex escape, then this returns\n the corresponding byte value. Otherwise, this returns `None`.\n","sig":null,"attributes":[{"value":"/ If this literal was written as a `\\x` hex escape, then this returns","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34612,"byte_end":34683,"line_start":615,"line_end":615,"column_start":5,"column_end":76}},{"value":"/ the corresponding byte value. Otherwise, this returns `None`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34688,"byte_end":34753,"line_start":616,"line_end":616,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1966},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35175,"byte_end":35183,"line_start":631,"line_end":631,"column_start":5,"column_end":13},"name":"Verbatim","qualname":"::ast::LiteralKind::Verbatim","value":"LiteralKind::Verbatim","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" The literal is written verbatim, e.g., `a` or `☃`.\n","sig":null,"attributes":[{"value":"/ The literal is written verbatim, e.g., `a` or `☃`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35114,"byte_end":35170,"line_start":630,"line_end":630,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1968},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35288,"byte_end":35299,"line_start":634,"line_end":634,"column_start":5,"column_end":16},"name":"Punctuation","qualname":"::ast::LiteralKind::Punctuation","value":"LiteralKind::Punctuation","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" The literal is written as an escape because it is punctuation, e.g.,\n `\\*` or `\\[`.\n","sig":null,"attributes":[{"value":"/ The literal is written as an escape because it is punctuation, e.g.,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35189,"byte_end":35261,"line_start":632,"line_end":632,"column_start":5,"column_end":77}},{"value":"/ `\\*` or `\\[`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35266,"byte_end":35283,"line_start":633,"line_end":633,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1970},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35370,"byte_end":35375,"line_start":636,"line_end":636,"column_start":5,"column_end":10},"name":"Octal","qualname":"::ast::LiteralKind::Octal","value":"LiteralKind::Octal","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" The literal is written as an octal escape, e.g., `\\141`.\n","sig":null,"attributes":[{"value":"/ The literal is written as an octal escape, e.g., `\\141`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35305,"byte_end":35365,"line_start":635,"line_end":635,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1972},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35554,"byte_end":35562,"line_start":640,"line_end":640,"column_start":5,"column_end":13},"name":"HexFixed","qualname":"::ast::LiteralKind::HexFixed","value":"LiteralKind::HexFixed(HexLiteralKind)","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" The literal is written as a hex code with a fixed number of digits\n depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or\n `\\U00000061`.\n","sig":null,"attributes":[{"value":"/ The literal is written as a hex code with a fixed number of digits","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35381,"byte_end":35451,"line_start":637,"line_end":637,"column_start":5,"column_end":75}},{"value":"/ depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35456,"byte_end":35527,"line_start":638,"line_end":638,"column_start":5,"column_end":76}},{"value":"/ `\\U00000061`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35532,"byte_end":35549,"line_start":639,"line_end":639,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1975},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35776,"byte_end":35784,"line_start":644,"line_end":644,"column_start":5,"column_end":13},"name":"HexBrace","qualname":"::ast::LiteralKind::HexBrace","value":"LiteralKind::HexBrace(HexLiteralKind)","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" The literal is written as a hex code with a bracketed number of\n digits. The only restriction is that the bracketed hex code must refer\n to a valid Unicode scalar value.\n","sig":null,"attributes":[{"value":"/ The literal is written as a hex code with a bracketed number of","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35584,"byte_end":35651,"line_start":641,"line_end":641,"column_start":5,"column_end":72}},{"value":"/ digits. The only restriction is that the bracketed hex code must refer","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35656,"byte_end":35730,"line_start":642,"line_end":642,"column_start":5,"column_end":79}},{"value":"/ to a valid Unicode scalar value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35735,"byte_end":35771,"line_start":643,"line_end":643,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1978},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35899,"byte_end":35906,"line_start":647,"line_end":647,"column_start":5,"column_end":12},"name":"Special","qualname":"::ast::LiteralKind::Special","value":"LiteralKind::Special(SpecialLiteralKind)","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" The literal is written as a specially recognized escape, e.g., `\\f`\n or `\\n`.\n","sig":null,"attributes":[{"value":"/ The literal is written as a specially recognized escape, e.g., `\\f`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35806,"byte_end":35877,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/ or `\\n`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35882,"byte_end":35894,"line_start":646,"line_end":646,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":1965},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35096,"byte_end":35107,"line_start":629,"line_end":629,"column_start":10,"column_end":21},"name":"LiteralKind","qualname":"::ast::LiteralKind","value":"LiteralKind::{Verbatim, Punctuation, Octal, HexFixed, HexBrace, Special}","parent":null,"children":[{"krate":0,"index":1966},{"krate":0,"index":1968},{"krate":0,"index":1970},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1978}],"decl_id":null,"docs":" The kind of a single literal expression.\n","sig":null,"attributes":[{"value":"/ The kind of a single literal expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35003,"byte_end":35047,"line_start":627,"line_end":627,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1993},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36187,"byte_end":36191,"line_start":657,"line_end":657,"column_start":5,"column_end":9},"name":"Bell","qualname":"::ast::SpecialLiteralKind::Bell","value":"SpecialLiteralKind::Bell","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Bell, spelled `\\a` (`\\x07`).\n","sig":null,"attributes":[{"value":"/ Bell, spelled `\\a` (`\\x07`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36150,"byte_end":36182,"line_start":656,"line_end":656,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1995},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36239,"byte_end":36247,"line_start":659,"line_end":659,"column_start":5,"column_end":13},"name":"FormFeed","qualname":"::ast::SpecialLiteralKind::FormFeed","value":"SpecialLiteralKind::FormFeed","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Form feed, spelled `\\f` (`\\x0C`).\n","sig":null,"attributes":[{"value":"/ Form feed, spelled `\\f` (`\\x0C`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36197,"byte_end":36234,"line_start":658,"line_end":658,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1997},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36289,"byte_end":36292,"line_start":661,"line_end":661,"column_start":5,"column_end":8},"name":"Tab","qualname":"::ast::SpecialLiteralKind::Tab","value":"SpecialLiteralKind::Tab","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Tab, spelled `\\t` (`\\x09`).\n","sig":null,"attributes":[{"value":"/ Tab, spelled `\\t` (`\\x09`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36253,"byte_end":36284,"line_start":660,"line_end":660,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1999},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36340,"byte_end":36348,"line_start":663,"line_end":663,"column_start":5,"column_end":13},"name":"LineFeed","qualname":"::ast::SpecialLiteralKind::LineFeed","value":"SpecialLiteralKind::LineFeed","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Line feed, spelled `\\n` (`\\x0A`).\n","sig":null,"attributes":[{"value":"/ Line feed, spelled `\\n` (`\\x0A`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36298,"byte_end":36335,"line_start":662,"line_end":662,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2001},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36402,"byte_end":36416,"line_start":665,"line_end":665,"column_start":5,"column_end":19},"name":"CarriageReturn","qualname":"::ast::SpecialLiteralKind::CarriageReturn","value":"SpecialLiteralKind::CarriageReturn","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Carriage return, spelled `\\r` (`\\x0D`).\n","sig":null,"attributes":[{"value":"/ Carriage return, spelled `\\r` (`\\x0D`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36354,"byte_end":36397,"line_start":664,"line_end":664,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2003},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36467,"byte_end":36478,"line_start":667,"line_end":667,"column_start":5,"column_end":16},"name":"VerticalTab","qualname":"::ast::SpecialLiteralKind::VerticalTab","value":"SpecialLiteralKind::VerticalTab","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Vertical tab, spelled `\\v` (`\\x0B`).\n","sig":null,"attributes":[{"value":"/ Vertical tab, spelled `\\v` (`\\x0B`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36422,"byte_end":36462,"line_start":666,"line_end":666,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2005},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36591,"byte_end":36596,"line_start":670,"line_end":670,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::SpecialLiteralKind::Space","value":"SpecialLiteralKind::Space","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Space, spelled `\\ ` (`\\x20`). Note that this can only appear when\n parsing in verbose mode.\n","sig":null,"attributes":[{"value":"/ Space, spelled `\\ ` (`\\x20`). Note that this can only appear when","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36484,"byte_end":36553,"line_start":668,"line_end":668,"column_start":5,"column_end":74}},{"value":"/ parsing in verbose mode.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36558,"byte_end":36586,"line_start":669,"line_end":669,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":1992},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36125,"byte_end":36143,"line_start":655,"line_end":655,"column_start":10,"column_end":28},"name":"SpecialLiteralKind","qualname":"::ast::SpecialLiteralKind","value":"SpecialLiteralKind::{Bell, FormFeed, Tab, LineFeed, CarriageReturn, VerticalTab, Space}","parent":null,"children":[{"krate":0,"index":1993},{"krate":0,"index":1995},{"krate":0,"index":1997},{"krate":0,"index":1999},{"krate":0,"index":2001},{"krate":0,"index":2003},{"krate":0,"index":2005}],"decl_id":null,"docs":" The type of a special literal.","sig":null,"attributes":[{"value":"/ The type of a special literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35931,"byte_end":35965,"line_start":650,"line_end":650,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35966,"byte_end":35969,"line_start":651,"line_end":651,"column_start":1,"column_end":4}},{"value":"/ A special literal is a special escape sequence recognized by the regex","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":35970,"byte_end":36044,"line_start":652,"line_end":652,"column_start":1,"column_end":75}},{"value":"/ parser, e.g., `\\f` or `\\n`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36045,"byte_end":36076,"line_start":653,"line_end":653,"column_start":1,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2018},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36974,"byte_end":36975,"line_start":682,"line_end":682,"column_start":5,"column_end":6},"name":"X","qualname":"::ast::HexLiteralKind::X","value":"HexLiteralKind::X","parent":{"krate":0,"index":2017},"children":[],"decl_id":null,"docs":" A `\\x` prefix. When used without brackets, this form is limited to\n two digits.\n","sig":null,"attributes":[{"value":"/ A `\\x` prefix. When used without brackets, this form is limited to","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36879,"byte_end":36949,"line_start":680,"line_end":680,"column_start":5,"column_end":75}},{"value":"/ two digits.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36954,"byte_end":36969,"line_start":681,"line_end":681,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2020},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37077,"byte_end":37089,"line_start":685,"line_end":685,"column_start":5,"column_end":17},"name":"UnicodeShort","qualname":"::ast::HexLiteralKind::UnicodeShort","value":"HexLiteralKind::UnicodeShort","parent":{"krate":0,"index":2017},"children":[],"decl_id":null,"docs":" A `\\u` prefix. When used without brackets, this form is limited to\n four digits.\n","sig":null,"attributes":[{"value":"/ A `\\u` prefix. When used without brackets, this form is limited to","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36981,"byte_end":37051,"line_start":683,"line_end":683,"column_start":5,"column_end":75}},{"value":"/ four digits.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37056,"byte_end":37072,"line_start":684,"line_end":684,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2022},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37192,"byte_end":37203,"line_start":688,"line_end":688,"column_start":5,"column_end":16},"name":"UnicodeLong","qualname":"::ast::HexLiteralKind::UnicodeLong","value":"HexLiteralKind::UnicodeLong","parent":{"krate":0,"index":2017},"children":[],"decl_id":null,"docs":" A `\\U` prefix. When used without brackets, this form is limited to\n eight digits.\n","sig":null,"attributes":[{"value":"/ A `\\U` prefix. When used without brackets, this form is limited to","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37095,"byte_end":37165,"line_start":686,"line_end":686,"column_start":5,"column_end":75}},{"value":"/ eight digits.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37170,"byte_end":37187,"line_start":687,"line_end":687,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":2017},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36858,"byte_end":36872,"line_start":679,"line_end":679,"column_start":10,"column_end":24},"name":"HexLiteralKind","qualname":"::ast::HexLiteralKind","value":"HexLiteralKind::{X, UnicodeShort, UnicodeLong}","parent":null,"children":[{"krate":0,"index":2018},{"krate":0,"index":2020},{"krate":0,"index":2022}],"decl_id":null,"docs":" The type of a Unicode hex literal.","sig":null,"attributes":[{"value":"/ The type of a Unicode hex literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36601,"byte_end":36639,"line_start":673,"line_end":673,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36640,"byte_end":36643,"line_start":674,"line_end":674,"column_start":1,"column_end":4}},{"value":"/ Note that all variants behave the same when used with brackets. They only","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36644,"byte_end":36721,"line_start":675,"line_end":675,"column_start":1,"column_end":78}},{"value":"/ differ when used without brackets in the number of hex digits that must","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36722,"byte_end":36797,"line_start":676,"line_end":676,"column_start":1,"column_end":76}},{"value":"/ follow.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":36798,"byte_end":36809,"line_start":677,"line_end":677,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37429,"byte_end":37435,"line_start":695,"line_end":695,"column_start":12,"column_end":18},"name":"digits","qualname":"<HexLiteralKind>::digits","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of digits that must be used with this literal form when\n used without brackets. When used with brackets, there is no\n restriction on the number of digits.\n","sig":null,"attributes":[{"value":"/ The number of digits that must be used with this literal form when","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37234,"byte_end":37304,"line_start":692,"line_end":692,"column_start":5,"column_end":75}},{"value":"/ used without brackets. When used with brackets, there is no","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37309,"byte_end":37372,"line_start":693,"line_end":693,"column_start":5,"column_end":68}},{"value":"/ restriction on the number of digits.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37377,"byte_end":37417,"line_start":694,"line_end":694,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2035},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37786,"byte_end":37793,"line_start":708,"line_end":708,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::Class::Unicode","value":"Class::Unicode(ClassUnicode)","parent":{"krate":0,"index":2034},"children":[],"decl_id":null,"docs":" A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n","sig":null,"attributes":[{"value":"/ A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37723,"byte_end":37781,"line_start":707,"line_end":707,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2038},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37865,"byte_end":37869,"line_start":710,"line_end":710,"column_start":5,"column_end":9},"name":"Perl","qualname":"::ast::Class::Perl","value":"Class::Perl(ClassPerl)","parent":{"krate":0,"index":2034},"children":[],"decl_id":null,"docs":" A perl character class, e.g., `\\d` or `\\W`.\n","sig":null,"attributes":[{"value":"/ A perl character class, e.g., `\\d` or `\\W`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37813,"byte_end":37860,"line_start":709,"line_end":709,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2041},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38048,"byte_end":38057,"line_start":714,"line_end":714,"column_start":5,"column_end":14},"name":"Bracketed","qualname":"::ast::Class::Bracketed","value":"Class::Bracketed(ClassBracketed)","parent":{"krate":0,"index":2034},"children":[],"decl_id":null,"docs":" A bracketed character class set, which may contain zero or more\n character ranges and/or zero or more nested classes. e.g.,\n `[a-zA-Z\\pL]`.\n","sig":null,"attributes":[{"value":"/ A bracketed character class set, which may contain zero or more","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37886,"byte_end":37953,"line_start":711,"line_end":711,"column_start":5,"column_end":72}},{"value":"/ character ranges and/or zero or more nested classes. e.g.,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37958,"byte_end":38020,"line_start":712,"line_end":712,"column_start":5,"column_end":67}},{"value":"/ `[a-zA-Z\\pL]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38025,"byte_end":38043,"line_start":713,"line_end":713,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":2034},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37711,"byte_end":37716,"line_start":706,"line_end":706,"column_start":10,"column_end":15},"name":"Class","qualname":"::ast::Class","value":"Class::{Unicode, Perl, Bracketed}","parent":null,"children":[{"krate":0,"index":2035},{"krate":0,"index":2038},{"krate":0,"index":2041}],"decl_id":null,"docs":" A single character class expression.\n","sig":null,"attributes":[{"value":"/ A single character class expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37622,"byte_end":37662,"line_start":704,"line_end":704,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38151,"byte_end":38155,"line_start":719,"line_end":719,"column_start":12,"column_end":16},"name":"span","qualname":"<Class>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class.\n","sig":null,"attributes":[{"value":"/ Return the span of this character class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38095,"byte_end":38139,"line_start":718,"line_end":718,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":2055},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38430,"byte_end":38439,"line_start":730,"line_end":730,"column_start":12,"column_end":21},"name":"ClassPerl","qualname":"::ast::ClassPerl","value":"ClassPerl { span, kind, negated }","parent":null,"children":[{"krate":0,"index":2056},{"krate":0,"index":2057},{"krate":0,"index":2058}],"decl_id":null,"docs":" A Perl character class.\n","sig":null,"attributes":[{"value":"/ A Perl character class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38352,"byte_end":38379,"line_start":728,"line_end":728,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2056},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38482,"byte_end":38486,"line_start":732,"line_end":732,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassPerl::span","value":"ast::Span","parent":{"krate":0,"index":2055},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[{"value":"/ The span of this class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38446,"byte_end":38473,"line_start":731,"line_end":731,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2057},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38534,"byte_end":38538,"line_start":734,"line_end":734,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassPerl::kind","value":"ast::ClassPerlKind","parent":{"krate":0,"index":2055},"children":[],"decl_id":null,"docs":" The kind of Perl class.\n","sig":null,"attributes":[{"value":"/ The kind of Perl class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38498,"byte_end":38525,"line_start":733,"line_end":733,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2058},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38655,"byte_end":38662,"line_start":737,"line_end":737,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassPerl::negated","value":"bool","parent":{"krate":0,"index":2055},"children":[],"decl_id":null,"docs":" Whether the class is negated or not. e.g., `\\d` is not negated but\n `\\D` is.\n","sig":null,"attributes":[{"value":"/ Whether the class is negated or not. e.g., `\\d` is not negated but","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38559,"byte_end":38629,"line_start":735,"line_end":735,"column_start":5,"column_end":75}},{"value":"/ `\\D` is.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38634,"byte_end":38646,"line_start":736,"line_end":736,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2071},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38808,"byte_end":38813,"line_start":744,"line_end":744,"column_start":5,"column_end":10},"name":"Digit","qualname":"::ast::ClassPerlKind::Digit","value":"ClassPerlKind::Digit","parent":{"krate":0,"index":2070},"children":[],"decl_id":null,"docs":" Decimal numbers.\n","sig":null,"attributes":[{"value":"/ Decimal numbers.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38783,"byte_end":38803,"line_start":743,"line_end":743,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2073},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38839,"byte_end":38844,"line_start":746,"line_end":746,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::ClassPerlKind::Space","value":"ClassPerlKind::Space","parent":{"krate":0,"index":2070},"children":[],"decl_id":null,"docs":" Whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38819,"byte_end":38834,"line_start":745,"line_end":745,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2075},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38875,"byte_end":38879,"line_start":748,"line_end":748,"column_start":5,"column_end":9},"name":"Word","qualname":"::ast::ClassPerlKind::Word","value":"ClassPerlKind::Word","parent":{"krate":0,"index":2070},"children":[],"decl_id":null,"docs":" Word characters.\n","sig":null,"attributes":[{"value":"/ Word characters.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38850,"byte_end":38870,"line_start":747,"line_end":747,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":2070},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38763,"byte_end":38776,"line_start":742,"line_end":742,"column_start":10,"column_end":23},"name":"ClassPerlKind","qualname":"::ast::ClassPerlKind","value":"ClassPerlKind::{Digit, Space, Word}","parent":null,"children":[{"krate":0,"index":2071},{"krate":0,"index":2073},{"krate":0,"index":2075}],"decl_id":null,"docs":" The available Perl character classes.\n","sig":null,"attributes":[{"value":"/ The available Perl character classes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38673,"byte_end":38714,"line_start":740,"line_end":740,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2087},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38964,"byte_end":38974,"line_start":753,"line_end":753,"column_start":12,"column_end":22},"name":"ClassAscii","qualname":"::ast::ClassAscii","value":"ClassAscii { span, kind, negated }","parent":null,"children":[{"krate":0,"index":2088},{"krate":0,"index":2089},{"krate":0,"index":2090}],"decl_id":null,"docs":" An ASCII character class.\n","sig":null,"attributes":[{"value":"/ An ASCII character class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38884,"byte_end":38913,"line_start":751,"line_end":751,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2088},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39017,"byte_end":39021,"line_start":755,"line_end":755,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassAscii::span","value":"ast::Span","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[{"value":"/ The span of this class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38981,"byte_end":39008,"line_start":754,"line_end":754,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2089},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39070,"byte_end":39074,"line_start":757,"line_end":757,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassAscii::kind","value":"ast::ClassAsciiKind","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" The kind of ASCII class.\n","sig":null,"attributes":[{"value":"/ The kind of ASCII class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39033,"byte_end":39061,"line_start":756,"line_end":756,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2090},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39211,"byte_end":39218,"line_start":760,"line_end":760,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassAscii::negated","value":"bool","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated\n but `[[:^alpha:]]` is.\n","sig":null,"attributes":[{"value":"/ Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39096,"byte_end":39171,"line_start":758,"line_end":758,"column_start":5,"column_end":80}},{"value":"/ but `[[:^alpha:]]` is.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39176,"byte_end":39202,"line_start":759,"line_end":759,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2103},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39363,"byte_end":39368,"line_start":767,"line_end":767,"column_start":5,"column_end":10},"name":"Alnum","qualname":"::ast::ClassAsciiKind::Alnum","value":"ClassAsciiKind::Alnum","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[0-9A-Za-z]`\n","sig":null,"attributes":[{"value":"/ `[0-9A-Za-z]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39341,"byte_end":39358,"line_start":766,"line_end":766,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2105},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39393,"byte_end":39398,"line_start":769,"line_end":769,"column_start":5,"column_end":10},"name":"Alpha","qualname":"::ast::ClassAsciiKind::Alpha","value":"ClassAsciiKind::Alpha","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[A-Za-z]`\n","sig":null,"attributes":[{"value":"/ `[A-Za-z]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39374,"byte_end":39388,"line_start":768,"line_end":768,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2107},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39426,"byte_end":39431,"line_start":771,"line_end":771,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::ast::ClassAsciiKind::Ascii","value":"ClassAsciiKind::Ascii","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[\\x00-\\x7F]`\n","sig":null,"attributes":[{"value":"/ `[\\x00-\\x7F]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39404,"byte_end":39421,"line_start":770,"line_end":770,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2109},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39453,"byte_end":39458,"line_start":773,"line_end":773,"column_start":5,"column_end":10},"name":"Blank","qualname":"::ast::ClassAsciiKind::Blank","value":"ClassAsciiKind::Blank","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[ \\t]`\n","sig":null,"attributes":[{"value":"/ `[ \\t]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39437,"byte_end":39448,"line_start":772,"line_end":772,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2111},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39490,"byte_end":39495,"line_start":775,"line_end":775,"column_start":5,"column_end":10},"name":"Cntrl","qualname":"::ast::ClassAsciiKind::Cntrl","value":"ClassAsciiKind::Cntrl","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[\\x00-\\x1F\\x7F]`\n","sig":null,"attributes":[{"value":"/ `[\\x00-\\x1F\\x7F]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39464,"byte_end":39485,"line_start":774,"line_end":774,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2113},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39517,"byte_end":39522,"line_start":777,"line_end":777,"column_start":5,"column_end":10},"name":"Digit","qualname":"::ast::ClassAsciiKind::Digit","value":"ClassAsciiKind::Digit","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[0-9]`\n","sig":null,"attributes":[{"value":"/ `[0-9]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39501,"byte_end":39512,"line_start":776,"line_end":776,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2115},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39544,"byte_end":39549,"line_start":779,"line_end":779,"column_start":5,"column_end":10},"name":"Graph","qualname":"::ast::ClassAsciiKind::Graph","value":"ClassAsciiKind::Graph","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[!-~]`\n","sig":null,"attributes":[{"value":"/ `[!-~]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39528,"byte_end":39539,"line_start":778,"line_end":778,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2117},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39571,"byte_end":39576,"line_start":781,"line_end":781,"column_start":5,"column_end":10},"name":"Lower","qualname":"::ast::ClassAsciiKind::Lower","value":"ClassAsciiKind::Lower","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[a-z]`\n","sig":null,"attributes":[{"value":"/ `[a-z]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39555,"byte_end":39566,"line_start":780,"line_end":780,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2119},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39598,"byte_end":39603,"line_start":783,"line_end":783,"column_start":5,"column_end":10},"name":"Print","qualname":"::ast::ClassAsciiKind::Print","value":"ClassAsciiKind::Print","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[ -~]`\n","sig":null,"attributes":[{"value":"/ `[ -~]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39582,"byte_end":39593,"line_start":782,"line_end":782,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2121},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39635,"byte_end":39640,"line_start":785,"line_end":785,"column_start":5,"column_end":10},"name":"Punct","qualname":"::ast::ClassAsciiKind::Punct","value":"ClassAsciiKind::Punct","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[!-/:-@\\[-`{-~]`\n","sig":null,"attributes":[{"value":"/ `[!-/:-@\\[-`{-~]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39609,"byte_end":39630,"line_start":784,"line_end":784,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2123},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39670,"byte_end":39675,"line_start":787,"line_end":787,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::ClassAsciiKind::Space","value":"ClassAsciiKind::Space","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[\\t\\n\\v\\f\\r ]`\n","sig":null,"attributes":[{"value":"/ `[\\t\\n\\v\\f\\r ]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39646,"byte_end":39665,"line_start":786,"line_end":786,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2125},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39697,"byte_end":39702,"line_start":789,"line_end":789,"column_start":5,"column_end":10},"name":"Upper","qualname":"::ast::ClassAsciiKind::Upper","value":"ClassAsciiKind::Upper","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[A-Z]`\n","sig":null,"attributes":[{"value":"/ `[A-Z]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39681,"byte_end":39692,"line_start":788,"line_end":788,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2127},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39731,"byte_end":39735,"line_start":791,"line_end":791,"column_start":5,"column_end":9},"name":"Word","qualname":"::ast::ClassAsciiKind::Word","value":"ClassAsciiKind::Word","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[0-9A-Za-z_]`\n","sig":null,"attributes":[{"value":"/ `[0-9A-Za-z_]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39708,"byte_end":39726,"line_start":790,"line_end":790,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2129},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39763,"byte_end":39769,"line_start":793,"line_end":793,"column_start":5,"column_end":11},"name":"Xdigit","qualname":"::ast::ClassAsciiKind::Xdigit","value":"ClassAsciiKind::Xdigit","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" `[0-9A-Fa-f]`\n","sig":null,"attributes":[{"value":"/ `[0-9A-Fa-f]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39741,"byte_end":39758,"line_start":792,"line_end":792,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":2102},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39320,"byte_end":39334,"line_start":765,"line_end":765,"column_start":10,"column_end":24},"name":"ClassAsciiKind","qualname":"::ast::ClassAsciiKind","value":"ClassAsciiKind::{Alnum, Alpha, Ascii, Blank, Cntrl, Digit, Graph, Lower, Print, Punct, Space, Upper, Word, Xdigit}","parent":null,"children":[{"krate":0,"index":2103},{"krate":0,"index":2105},{"krate":0,"index":2107},{"krate":0,"index":2109},{"krate":0,"index":2111},{"krate":0,"index":2113},{"krate":0,"index":2115},{"krate":0,"index":2117},{"krate":0,"index":2119},{"krate":0,"index":2121},{"krate":0,"index":2123},{"krate":0,"index":2125},{"krate":0,"index":2127},{"krate":0,"index":2129}],"decl_id":null,"docs":" The available ASCII character classes.\n","sig":null,"attributes":[{"value":"/ The available ASCII character classes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39229,"byte_end":39271,"line_start":763,"line_end":763,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":40140,"byte_end":40149,"line_start":804,"line_end":804,"column_start":12,"column_end":21},"name":"from_name","qualname":"<ClassAsciiKind>::from_name","value":"fn (name: &str) -> Option<ClassAsciiKind>","parent":null,"children":[],"decl_id":null,"docs":" Return the corresponding ClassAsciiKind variant for the given name.","sig":null,"attributes":[{"value":"/ Return the corresponding ClassAsciiKind variant for the given name.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39800,"byte_end":39871,"line_start":797,"line_end":797,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39876,"byte_end":39879,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ The name given should correspond to the lowercase version of the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39884,"byte_end":39952,"line_start":799,"line_end":799,"column_start":5,"column_end":73}},{"value":"/ variant name. e.g., `cntrl` is the name for `ClassAsciiKind::Cntrl`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39957,"byte_end":40029,"line_start":800,"line_end":800,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":40034,"byte_end":40037,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ If no variant with the corresponding name exists, then `None` is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":40042,"byte_end":40110,"line_start":802,"line_end":802,"column_start":5,"column_end":73}},{"value":"/ returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":40115,"byte_end":40128,"line_start":803,"line_end":803,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":2141},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":40875,"byte_end":40887,"line_start":828,"line_end":828,"column_start":12,"column_end":24},"name":"ClassUnicode","qualname":"::ast::ClassUnicode","value":"ClassUnicode { span, negated, kind }","parent":null,"children":[{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144}],"decl_id":null,"docs":" A Unicode character class.\n","sig":null,"attributes":[{"value":"/ A Unicode character class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":40794,"byte_end":40824,"line_start":826,"line_end":826,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2142},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":40930,"byte_end":40934,"line_start":830,"line_end":830,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassUnicode::span","value":"ast::Span","parent":{"krate":0,"index":2141},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[{"value":"/ The span of this class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":40894,"byte_end":40921,"line_start":829,"line_end":829,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2143},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41491,"byte_end":41498,"line_start":840,"line_end":840,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassUnicode::negated","value":"bool","parent":{"krate":0,"index":2141},"children":[],"decl_id":null,"docs":" Whether this class is negated or not.","sig":null,"attributes":[{"value":"/ Whether this class is negated or not.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":40946,"byte_end":40987,"line_start":831,"line_end":831,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":40992,"byte_end":40995,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ Note: be careful when using this attribute. This specifically refers","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41000,"byte_end":41072,"line_start":833,"line_end":833,"column_start":5,"column_end":77}},{"value":"/ to whether the class is written as `\\p` or `\\P`, where the latter","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41077,"byte_end":41146,"line_start":834,"line_end":834,"column_start":5,"column_end":74}},{"value":"/ is `negated = true`. However, it also possible to write something like","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41151,"byte_end":41225,"line_start":835,"line_end":835,"column_start":5,"column_end":79}},{"value":"/ `\\P{scx!=Katakana}` which is actually equivalent to","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41230,"byte_end":41285,"line_start":836,"line_end":836,"column_start":5,"column_end":60}},{"value":"/ `\\p{scx=Katakana}` and is therefore not actually negated even though","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41290,"byte_end":41362,"line_start":837,"line_end":837,"column_start":5,"column_end":77}},{"value":"/ `negated = true` here. To test whether this class is truly negated","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41367,"byte_end":41437,"line_start":838,"line_end":838,"column_start":5,"column_end":75}},{"value":"/ or not, use the `is_negated` method.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41442,"byte_end":41482,"line_start":839,"line_end":839,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2144},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41549,"byte_end":41553,"line_start":842,"line_end":842,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassUnicode::kind","value":"ast::ClassUnicodeKind","parent":{"krate":0,"index":2141},"children":[],"decl_id":null,"docs":" The kind of Unicode class.\n","sig":null,"attributes":[{"value":"/ The kind of Unicode class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41510,"byte_end":41540,"line_start":841,"line_end":841,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41815,"byte_end":41825,"line_start":850,"line_end":850,"column_start":12,"column_end":22},"name":"is_negated","qualname":"<ClassUnicode>::is_negated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this class has been negated.","sig":null,"attributes":[{"value":"/ Returns true if this class has been negated.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41600,"byte_end":41648,"line_start":846,"line_end":846,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41653,"byte_end":41656,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ Note that this takes the Unicode op into account, if it's present.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41661,"byte_end":41731,"line_start":848,"line_end":848,"column_start":5,"column_end":75}},{"value":"/ e.g., `is_negated` for `\\P{scx!=Katakana}` will return `false`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41736,"byte_end":41803,"line_start":849,"line_end":849,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2157},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42241,"byte_end":42250,"line_start":865,"line_end":865,"column_start":5,"column_end":14},"name":"OneLetter","qualname":"::ast::ClassUnicodeKind::OneLetter","value":"ClassUnicodeKind::OneLetter(char)","parent":{"krate":0,"index":2156},"children":[],"decl_id":null,"docs":" A one letter abbreviated class, e.g., `\\pN`.\n","sig":null,"attributes":[{"value":"/ A one letter abbreviated class, e.g., `\\pN`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42188,"byte_end":42236,"line_start":864,"line_end":864,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2160},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42350,"byte_end":42355,"line_start":868,"line_end":868,"column_start":5,"column_end":10},"name":"Named","qualname":"::ast::ClassUnicodeKind::Named","value":"ClassUnicodeKind::Named(String)","parent":{"krate":0,"index":2156},"children":[],"decl_id":null,"docs":" A binary property, general category or script. The string may be\n empty.\n","sig":null,"attributes":[{"value":"/ A binary property, general category or script. The string may be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42262,"byte_end":42330,"line_start":866,"line_end":866,"column_start":5,"column_end":73}},{"value":"/ empty.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42335,"byte_end":42345,"line_start":867,"line_end":867,"column_start":5,"column_end":15}}]},{"kind":"StructVariant","id":{"krate":0,"index":2163},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42418,"byte_end":42428,"line_start":870,"line_end":870,"column_start":5,"column_end":15},"name":"NamedValue","qualname":"::ast::ClassUnicodeKind::NamedValue","value":"ClassUnicodeKind::NamedValue { op, name, value }","parent":{"krate":0,"index":2156},"children":[],"decl_id":null,"docs":" A property name and an associated value.\n","sig":null,"attributes":[{"value":"/ A property name and an associated value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42369,"byte_end":42413,"line_start":869,"line_end":869,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":2156},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42165,"byte_end":42181,"line_start":863,"line_end":863,"column_start":10,"column_end":26},"name":"ClassUnicodeKind","qualname":"::ast::ClassUnicodeKind","value":"ClassUnicodeKind::{OneLetter, Named, NamedValue}","parent":null,"children":[{"krate":0,"index":2157},{"krate":0,"index":2160},{"krate":0,"index":2163}],"decl_id":null,"docs":" The available forms of Unicode character classes.\n","sig":null,"attributes":[{"value":"/ The available forms of Unicode character classes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42063,"byte_end":42116,"line_start":861,"line_end":861,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2179},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42894,"byte_end":42899,"line_start":884,"line_end":884,"column_start":5,"column_end":10},"name":"Equal","qualname":"::ast::ClassUnicodeOpKind::Equal","value":"ClassUnicodeOpKind::Equal","parent":{"krate":0,"index":2178},"children":[],"decl_id":null,"docs":" A property set to a specific value, e.g., `\\p{scx=Katakana}`.\n","sig":null,"attributes":[{"value":"/ A property set to a specific value, e.g., `\\p{scx=Katakana}`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42824,"byte_end":42889,"line_start":883,"line_end":883,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2181},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42997,"byte_end":43002,"line_start":887,"line_end":887,"column_start":5,"column_end":10},"name":"Colon","qualname":"::ast::ClassUnicodeOpKind::Colon","value":"ClassUnicodeOpKind::Colon","parent":{"krate":0,"index":2178},"children":[],"decl_id":null,"docs":" A property set to a specific value using a colon, e.g.,\n `\\p{scx:Katakana}`.\n","sig":null,"attributes":[{"value":"/ A property set to a specific value using a colon, e.g.,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42905,"byte_end":42964,"line_start":885,"line_end":885,"column_start":5,"column_end":64}},{"value":"/ `\\p{scx:Katakana}`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42969,"byte_end":42992,"line_start":886,"line_end":886,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2183},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43085,"byte_end":43093,"line_start":889,"line_end":889,"column_start":5,"column_end":13},"name":"NotEqual","qualname":"::ast::ClassUnicodeOpKind::NotEqual","value":"ClassUnicodeOpKind::NotEqual","parent":{"krate":0,"index":2178},"children":[],"decl_id":null,"docs":" A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.\n","sig":null,"attributes":[{"value":"/ A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43008,"byte_end":43080,"line_start":888,"line_end":888,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":2178},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42799,"byte_end":42817,"line_start":882,"line_end":882,"column_start":10,"column_end":28},"name":"ClassUnicodeOpKind","qualname":"::ast::ClassUnicodeOpKind","value":"ClassUnicodeOpKind::{Equal, Colon, NotEqual}","parent":null,"children":[{"krate":0,"index":2179},{"krate":0,"index":2181},{"krate":0,"index":2183}],"decl_id":null,"docs":" The type of op used in a Unicode character class.\n","sig":null,"attributes":[{"value":"/ The type of op used in a Unicode character class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":42697,"byte_end":42750,"line_start":880,"line_end":880,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43184,"byte_end":43192,"line_start":894,"line_end":894,"column_start":12,"column_end":20},"name":"is_equal","qualname":"<ClassUnicodeOpKind>::is_equal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the op is an equality op or not.\n","sig":null,"attributes":[{"value":"/ Whether the op is an equality op or not.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43128,"byte_end":43172,"line_start":893,"line_end":893,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":2195},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43451,"byte_end":43465,"line_start":904,"line_end":904,"column_start":12,"column_end":26},"name":"ClassBracketed","qualname":"::ast::ClassBracketed","value":"ClassBracketed { span, negated, kind }","parent":null,"children":[{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198}],"decl_id":null,"docs":" A bracketed character class, e.g., `[a-z0-9]`.\n","sig":null,"attributes":[{"value":"/ A bracketed character class, e.g., `[a-z0-9]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43350,"byte_end":43400,"line_start":902,"line_end":902,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2196},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43508,"byte_end":43512,"line_start":906,"line_end":906,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassBracketed::span","value":"ast::Span","parent":{"krate":0,"index":2195},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[{"value":"/ The span of this class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43472,"byte_end":43499,"line_start":905,"line_end":905,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2197},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43624,"byte_end":43631,"line_start":909,"line_end":909,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassBracketed::negated","value":"bool","parent":{"krate":0,"index":2195},"children":[],"decl_id":null,"docs":" Whether this class is negated or not. e.g., `[a]` is not negated but\n `[^a]` is.\n","sig":null,"attributes":[{"value":"/ Whether this class is negated or not. e.g., `[a]` is not negated but","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43524,"byte_end":43596,"line_start":907,"line_end":907,"column_start":5,"column_end":77}},{"value":"/ `[^a]` is.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43601,"byte_end":43615,"line_start":908,"line_end":908,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":2198},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43799,"byte_end":43803,"line_start":912,"line_end":912,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassBracketed::kind","value":"ast::ClassSet","parent":{"krate":0,"index":2195},"children":[],"decl_id":null,"docs":" The type of this set. A set is either a normal union of things, e.g.,\n `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.\n","sig":null,"attributes":[{"value":"/ The type of this set. A set is either a normal union of things, e.g.,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43643,"byte_end":43716,"line_start":910,"line_end":910,"column_start":5,"column_end":78}},{"value":"/ `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43721,"byte_end":43790,"line_start":911,"line_end":911,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2211},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44268,"byte_end":44272,"line_start":925,"line_end":925,"column_start":5,"column_end":9},"name":"Item","qualname":"::ast::ClassSet::Item","value":"ClassSet::Item(ClassSetItem)","parent":{"krate":0,"index":2210},"children":[],"decl_id":null,"docs":" An item, which can be a single literal, range, nested character class\n or a union of items.\n","sig":null,"attributes":[{"value":"/ An item, which can be a single literal, range, nested character class","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44161,"byte_end":44234,"line_start":923,"line_end":923,"column_start":5,"column_end":78}},{"value":"/ or a union of items.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44239,"byte_end":44263,"line_start":924,"line_end":924,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2214},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44348,"byte_end":44356,"line_start":927,"line_end":927,"column_start":5,"column_end":13},"name":"BinaryOp","qualname":"::ast::ClassSet::BinaryOp","value":"ClassSet::BinaryOp(ClassSetBinaryOp)","parent":{"krate":0,"index":2210},"children":[],"decl_id":null,"docs":" A single binary operation (i.e., &&, -- or ~~).\n","sig":null,"attributes":[{"value":"/ A single binary operation (i.e., &&, -- or ~~).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44292,"byte_end":44343,"line_start":926,"line_end":926,"column_start":5,"column_end":56}}]},{"kind":"Enum","id":{"krate":0,"index":2210},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44146,"byte_end":44154,"line_start":922,"line_end":922,"column_start":10,"column_end":18},"name":"ClassSet","qualname":"::ast::ClassSet","value":"ClassSet::{Item, BinaryOp}","parent":null,"children":[{"krate":0,"index":2211},{"krate":0,"index":2214}],"decl_id":null,"docs":" A character class set.","sig":null,"attributes":[{"value":"/ A character class set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43818,"byte_end":43844,"line_start":915,"line_end":915,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43845,"byte_end":43848,"line_start":916,"line_end":916,"column_start":1,"column_end":4}},{"value":"/ This type corresponds to the internal structure of a bracketed character","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43849,"byte_end":43925,"line_start":917,"line_end":917,"column_start":1,"column_end":77}},{"value":"/ class. That is, every bracketed character is one of two types: a union of","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43926,"byte_end":44003,"line_start":918,"line_end":918,"column_start":1,"column_end":78}},{"value":"/ items (literals, ranges, other bracketed classes) or a tree of binary set","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44004,"byte_end":44081,"line_start":919,"line_end":919,"column_start":1,"column_end":78}},{"value":"/ operations.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44082,"byte_end":44097,"line_start":920,"line_end":920,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44440,"byte_end":44445,"line_start":932,"line_end":932,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassSet>::union","value":"fn (ast: ClassSetUnion) -> ClassSet","parent":null,"children":[],"decl_id":null,"docs":" Build a set from a union.\n","sig":null,"attributes":[{"value":"/ Build a set from a union.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44399,"byte_end":44428,"line_start":931,"line_end":931,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44600,"byte_end":44604,"line_start":937,"line_end":937,"column_start":12,"column_end":16},"name":"span","qualname":"<ClassSet>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class set.\n","sig":null,"attributes":[{"value":"/ Return the span of this character class set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44540,"byte_end":44588,"line_start":936,"line_end":936,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2229},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45347,"byte_end":45352,"line_start":961,"line_end":961,"column_start":5,"column_end":10},"name":"Empty","qualname":"::ast::ClassSetItem::Empty","value":"ClassSetItem::Empty(Span)","parent":{"krate":0,"index":2228},"children":[],"decl_id":null,"docs":" An empty item.","sig":null,"attributes":[{"value":"/ An empty item.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45093,"byte_end":45111,"line_start":956,"line_end":956,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45116,"byte_end":45119,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ Note that a bracketed character class cannot contain a single empty","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45124,"byte_end":45195,"line_start":958,"line_end":958,"column_start":5,"column_end":76}},{"value":"/ item. Empty items can appear when using one of the binary operators.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45200,"byte_end":45272,"line_start":959,"line_end":959,"column_start":5,"column_end":77}},{"value":"/ For example, `[&&]` is the intersection of two empty classes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45277,"byte_end":45342,"line_start":960,"line_end":960,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2232},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45390,"byte_end":45397,"line_start":963,"line_end":963,"column_start":5,"column_end":12},"name":"Literal","qualname":"::ast::ClassSetItem::Literal","value":"ClassSetItem::Literal(Literal)","parent":{"krate":0,"index":2228},"children":[],"decl_id":null,"docs":" A single literal.\n","sig":null,"attributes":[{"value":"/ A single literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45364,"byte_end":45385,"line_start":962,"line_end":962,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2235},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45450,"byte_end":45455,"line_start":965,"line_end":965,"column_start":5,"column_end":10},"name":"Range","qualname":"::ast::ClassSetItem::Range","value":"ClassSetItem::Range(ClassSetRange)","parent":{"krate":0,"index":2228},"children":[],"decl_id":null,"docs":" A range between two literals.\n","sig":null,"attributes":[{"value":"/ A range between two literals.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45412,"byte_end":45445,"line_start":964,"line_end":964,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2238},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45544,"byte_end":45549,"line_start":967,"line_end":967,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::ast::ClassSetItem::Ascii","value":"ClassSetItem::Ascii(ClassAscii)","parent":{"krate":0,"index":2228},"children":[],"decl_id":null,"docs":" An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.\n","sig":null,"attributes":[{"value":"/ An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45476,"byte_end":45539,"line_start":966,"line_end":966,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2241},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45630,"byte_end":45637,"line_start":969,"line_end":969,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::ClassSetItem::Unicode","value":"ClassSetItem::Unicode(ClassUnicode)","parent":{"krate":0,"index":2228},"children":[],"decl_id":null,"docs":" A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n","sig":null,"attributes":[{"value":"/ A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45567,"byte_end":45625,"line_start":968,"line_end":968,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2244},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45709,"byte_end":45713,"line_start":971,"line_end":971,"column_start":5,"column_end":9},"name":"Perl","qualname":"::ast::ClassSetItem::Perl","value":"ClassSetItem::Perl(ClassPerl)","parent":{"krate":0,"index":2228},"children":[],"decl_id":null,"docs":" A perl character class, e.g., `\\d` or `\\W`.\n","sig":null,"attributes":[{"value":"/ A perl character class, e.g., `\\d` or `\\W`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45657,"byte_end":45704,"line_start":970,"line_end":970,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2247},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45892,"byte_end":45901,"line_start":975,"line_end":975,"column_start":5,"column_end":14},"name":"Bracketed","qualname":"::ast::ClassSetItem::Bracketed","value":"ClassSetItem::Bracketed(Box<ClassBracketed>)","parent":{"krate":0,"index":2228},"children":[],"decl_id":null,"docs":" A bracketed character class set, which may contain zero or more\n character ranges and/or zero or more nested classes. e.g.,\n `[a-zA-Z\\pL]`.\n","sig":null,"attributes":[{"value":"/ A bracketed character class set, which may contain zero or more","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45730,"byte_end":45797,"line_start":972,"line_end":972,"column_start":5,"column_end":72}},{"value":"/ character ranges and/or zero or more nested classes. e.g.,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45802,"byte_end":45864,"line_start":973,"line_end":973,"column_start":5,"column_end":67}},{"value":"/ `[a-zA-Z\\pL]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45869,"byte_end":45887,"line_start":974,"line_end":974,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2250},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45954,"byte_end":45959,"line_start":977,"line_end":977,"column_start":5,"column_end":10},"name":"Union","qualname":"::ast::ClassSetItem::Union","value":"ClassSetItem::Union(ClassSetUnion)","parent":{"krate":0,"index":2228},"children":[],"decl_id":null,"docs":" A union of items.\n","sig":null,"attributes":[{"value":"/ A union of items.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45928,"byte_end":45949,"line_start":976,"line_end":976,"column_start":5,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":2228},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45074,"byte_end":45086,"line_start":955,"line_end":955,"column_start":10,"column_end":22},"name":"ClassSetItem","qualname":"::ast::ClassSetItem","value":"ClassSetItem::{Empty, Literal, Range, Ascii, Unicode, Perl, Bracketed, Union}","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2232},{"krate":0,"index":2235},{"krate":0,"index":2238},{"krate":0,"index":2241},{"krate":0,"index":2244},{"krate":0,"index":2247},{"krate":0,"index":2250}],"decl_id":null,"docs":" A single component of a character class set.\n","sig":null,"attributes":[{"value":"/ A single component of a character class set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44977,"byte_end":45025,"line_start":953,"line_end":953,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46068,"byte_end":46072,"line_start":982,"line_end":982,"column_start":12,"column_end":16},"name":"span","qualname":"<ClassSetItem>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class set item.\n","sig":null,"attributes":[{"value":"/ Return the span of this character class set item.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46003,"byte_end":46056,"line_start":981,"line_end":981,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":2264},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46642,"byte_end":46655,"line_start":998,"line_end":998,"column_start":12,"column_end":25},"name":"ClassSetRange","qualname":"::ast::ClassSetRange","value":"ClassSetRange { span, start, end }","parent":null,"children":[{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267}],"decl_id":null,"docs":" A single character class range in a set.\n","sig":null,"attributes":[{"value":"/ A single character class range in a set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46547,"byte_end":46591,"line_start":996,"line_end":996,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2265},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46698,"byte_end":46702,"line_start":1000,"line_end":1000,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetRange::span","value":"ast::Span","parent":{"krate":0,"index":2264},"children":[],"decl_id":null,"docs":" The span of this range.\n","sig":null,"attributes":[{"value":"/ The span of this range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46662,"byte_end":46689,"line_start":999,"line_end":999,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2266},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46751,"byte_end":46756,"line_start":1002,"line_end":1002,"column_start":9,"column_end":14},"name":"start","qualname":"::ast::ClassSetRange::start","value":"ast::Literal","parent":{"krate":0,"index":2264},"children":[],"decl_id":null,"docs":" The start of this range.\n","sig":null,"attributes":[{"value":"/ The start of this range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46714,"byte_end":46742,"line_start":1001,"line_end":1001,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2267},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46806,"byte_end":46809,"line_start":1004,"line_end":1004,"column_start":9,"column_end":12},"name":"end","qualname":"::ast::ClassSetRange::end","value":"ast::Literal","parent":{"krate":0,"index":2264},"children":[],"decl_id":null,"docs":" The end of this range.\n","sig":null,"attributes":[{"value":"/ The end of this range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46771,"byte_end":46797,"line_start":1003,"line_end":1003,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47032,"byte_end":47040,"line_start":1012,"line_end":1012,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<ClassSetRange>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class range is valid.","sig":null,"attributes":[{"value":"/ Returns true if and only if this character class range is valid.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46848,"byte_end":46916,"line_start":1008,"line_end":1008,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46921,"byte_end":46924,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ The only case where a range is invalid is if its start is greater than","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46929,"byte_end":47003,"line_start":1010,"line_end":1010,"column_start":5,"column_end":79}},{"value":"/ its end.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47008,"byte_end":47020,"line_start":1011,"line_end":1011,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":2279},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47203,"byte_end":47216,"line_start":1019,"line_end":1019,"column_start":12,"column_end":25},"name":"ClassSetUnion","qualname":"::ast::ClassSetUnion","value":"ClassSetUnion { span, items }","parent":null,"children":[{"krate":0,"index":2280},{"krate":0,"index":2281}],"decl_id":null,"docs":" A union of items inside a character class set.\n","sig":null,"attributes":[{"value":"/ A union of items inside a character class set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47102,"byte_end":47152,"line_start":1017,"line_end":1017,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2280},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47318,"byte_end":47322,"line_start":1022,"line_end":1022,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetUnion::span","value":"ast::Span","parent":{"krate":0,"index":2279},"children":[],"decl_id":null,"docs":" The span of the items in this operation. e.g., the `a-z0-9` in\n `[^a-z0-9]`\n","sig":null,"attributes":[{"value":"/ The span of the items in this operation. e.g., the `a-z0-9` in","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47223,"byte_end":47289,"line_start":1020,"line_end":1020,"column_start":5,"column_end":71}},{"value":"/ `[^a-z0-9]`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47294,"byte_end":47309,"line_start":1021,"line_end":1021,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":2281},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47393,"byte_end":47398,"line_start":1024,"line_end":1024,"column_start":9,"column_end":14},"name":"items","qualname":"::ast::ClassSetUnion::items","value":"std::vec::Vec<ast::ClassSetItem>","parent":{"krate":0,"index":2279},"children":[],"decl_id":null,"docs":" The sequence of items that make up this union.\n","sig":null,"attributes":[{"value":"/ The sequence of items that make up this union.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47334,"byte_end":47384,"line_start":1023,"line_end":1023,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47964,"byte_end":47968,"line_start":1038,"line_end":1038,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassSetUnion>::push","value":"fn (&mut self, item: ClassSetItem) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push a new item in this union.","sig":null,"attributes":[{"value":"/ Push a new item in this union.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47447,"byte_end":47481,"line_start":1028,"line_end":1028,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47486,"byte_end":47489,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ The ending position of this union's span is updated to the ending","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47494,"byte_end":47563,"line_start":1030,"line_end":1030,"column_start":5,"column_end":74}},{"value":"/ position of the span of the item given. If the union is empty, then","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47568,"byte_end":47639,"line_start":1031,"line_end":1031,"column_start":5,"column_end":76}},{"value":"/ the starting position of this union is set to the starting position","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47644,"byte_end":47715,"line_start":1032,"line_end":1032,"column_start":5,"column_end":76}},{"value":"/ of this item.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47720,"byte_end":47737,"line_start":1033,"line_end":1033,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47742,"byte_end":47745,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ In other words, if you only use this method to add items to a union","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47750,"byte_end":47821,"line_start":1035,"line_end":1035,"column_start":5,"column_end":76}},{"value":"/ and you set the spans on each item correctly, then you should never","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47826,"byte_end":47897,"line_start":1036,"line_end":1036,"column_start":5,"column_end":76}},{"value":"/ need to adjust the span of the union directly.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47902,"byte_end":47952,"line_start":1037,"line_end":1037,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48483,"byte_end":48492,"line_start":1052,"line_end":1052,"column_start":12,"column_end":21},"name":"into_item","qualname":"<ClassSetUnion>::into_item","value":"fn (mut self) -> ClassSetItem","parent":null,"children":[],"decl_id":null,"docs":" Return this union as a character class set item.","sig":null,"attributes":[{"value":"/ Return this union as a character class set item.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48179,"byte_end":48231,"line_start":1046,"line_end":1046,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48236,"byte_end":48239,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ If this union contains zero items, then an empty union is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48244,"byte_end":48305,"line_start":1048,"line_end":1048,"column_start":5,"column_end":66}},{"value":"/ returned. If this concatenation contains exactly 1 item, then the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48310,"byte_end":48379,"line_start":1049,"line_end":1049,"column_start":5,"column_end":74}},{"value":"/ corresponding item is returned. Otherwise, ClassSetItem::Union is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48384,"byte_end":48453,"line_start":1050,"line_end":1050,"column_start":5,"column_end":74}},{"value":"/ returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48458,"byte_end":48471,"line_start":1051,"line_end":1051,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":2293},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48805,"byte_end":48821,"line_start":1063,"line_end":1063,"column_start":12,"column_end":28},"name":"ClassSetBinaryOp","qualname":"::ast::ClassSetBinaryOp","value":"ClassSetBinaryOp { span, kind, lhs, rhs }","parent":null,"children":[{"krate":0,"index":2294},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2297}],"decl_id":null,"docs":" A Unicode character class set operation.\n","sig":null,"attributes":[{"value":"/ A Unicode character class set operation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48710,"byte_end":48754,"line_start":1061,"line_end":1061,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2294},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48908,"byte_end":48912,"line_start":1065,"line_end":1065,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetBinaryOp::span","value":"ast::Span","parent":{"krate":0,"index":2293},"children":[],"decl_id":null,"docs":" The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.\n","sig":null,"attributes":[{"value":"/ The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48828,"byte_end":48899,"line_start":1064,"line_end":1064,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":2295},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48968,"byte_end":48972,"line_start":1067,"line_end":1067,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassSetBinaryOp::kind","value":"ast::ClassSetBinaryOpKind","parent":{"krate":0,"index":2293},"children":[],"decl_id":null,"docs":" The type of this set operation.\n","sig":null,"attributes":[{"value":"/ The type of this set operation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":48924,"byte_end":48959,"line_start":1066,"line_end":1066,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2296},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49049,"byte_end":49052,"line_start":1069,"line_end":1069,"column_start":9,"column_end":12},"name":"lhs","qualname":"::ast::ClassSetBinaryOp::lhs","value":"std::boxed::Box<ast::ClassSet>","parent":{"krate":0,"index":2293},"children":[],"decl_id":null,"docs":" The left hand side of the operation.\n","sig":null,"attributes":[{"value":"/ The left hand side of the operation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49000,"byte_end":49040,"line_start":1068,"line_end":1068,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2297},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49123,"byte_end":49126,"line_start":1071,"line_end":1071,"column_start":9,"column_end":12},"name":"rhs","qualname":"::ast::ClassSetBinaryOp::rhs","value":"std::boxed::Box<ast::ClassSet>","parent":{"krate":0,"index":2293},"children":[],"decl_id":null,"docs":" The right hand side of the operation.\n","sig":null,"attributes":[{"value":"/ The right hand side of the operation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49073,"byte_end":49114,"line_start":1070,"line_end":1070,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2310},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49526,"byte_end":49538,"line_start":1082,"line_end":1082,"column_start":5,"column_end":17},"name":"Intersection","qualname":"::ast::ClassSetBinaryOpKind::Intersection","value":"ClassSetBinaryOpKind::Intersection","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" The intersection of two sets, e.g., `\\pN&&[a-z]`.\n","sig":null,"attributes":[{"value":"/ The intersection of two sets, e.g., `\\pN&&[a-z]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49468,"byte_end":49521,"line_start":1081,"line_end":1081,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2312},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49600,"byte_end":49610,"line_start":1084,"line_end":1084,"column_start":5,"column_end":15},"name":"Difference","qualname":"::ast::ClassSetBinaryOpKind::Difference","value":"ClassSetBinaryOpKind::Difference","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" The difference of two sets, e.g., `\\pN--[0-9]`.\n","sig":null,"attributes":[{"value":"/ The difference of two sets, e.g., `\\pN--[0-9]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49544,"byte_end":49595,"line_start":1083,"line_end":1083,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2314},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49788,"byte_end":49807,"line_start":1088,"line_end":1088,"column_start":5,"column_end":24},"name":"SymmetricDifference","qualname":"::ast::ClassSetBinaryOpKind::SymmetricDifference","value":"ClassSetBinaryOpKind::SymmetricDifference","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" The symmetric difference of two sets. The symmetric difference is the\n set of elements belonging to one but not both sets.\n e.g., `[\\pL~~[:ascii:]]`.\n","sig":null,"attributes":[{"value":"/ The symmetric difference of two sets. The symmetric difference is the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49616,"byte_end":49689,"line_start":1085,"line_end":1085,"column_start":5,"column_end":78}},{"value":"/ set of elements belonging to one but not both sets.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49694,"byte_end":49749,"line_start":1086,"line_end":1086,"column_start":5,"column_end":60}},{"value":"/ e.g., `[\\pL~~[:ascii:]]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49754,"byte_end":49783,"line_start":1087,"line_end":1087,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":2309},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49441,"byte_end":49461,"line_start":1080,"line_end":1080,"column_start":10,"column_end":30},"name":"ClassSetBinaryOpKind","qualname":"::ast::ClassSetBinaryOpKind","value":"ClassSetBinaryOpKind::{Intersection, Difference, SymmetricDifference}","parent":null,"children":[{"krate":0,"index":2310},{"krate":0,"index":2312},{"krate":0,"index":2314}],"decl_id":null,"docs":" The type of a Unicode character class set operation.","sig":null,"attributes":[{"value":"/ The type of a Unicode character class set operation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49146,"byte_end":49202,"line_start":1074,"line_end":1074,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49203,"byte_end":49206,"line_start":1075,"line_end":1075,"column_start":1,"column_end":4}},{"value":"/ Note that this doesn't explicitly represent union since there is no","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49207,"byte_end":49278,"line_start":1076,"line_end":1076,"column_start":1,"column_end":72}},{"value":"/ explicit union operator. Concatenation inside a character class corresponds","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49279,"byte_end":49358,"line_start":1077,"line_end":1077,"column_start":1,"column_end":80}},{"value":"/ to the union operation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49359,"byte_end":49386,"line_start":1078,"line_end":1078,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2327},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49897,"byte_end":49906,"line_start":1093,"line_end":1093,"column_start":12,"column_end":21},"name":"Assertion","qualname":"::ast::Assertion","value":"Assertion { span, kind }","parent":null,"children":[{"krate":0,"index":2328},{"krate":0,"index":2329}],"decl_id":null,"docs":" A single zero-width assertion.\n","sig":null,"attributes":[{"value":"/ A single zero-width assertion.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49812,"byte_end":49846,"line_start":1091,"line_end":1091,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":2328},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49953,"byte_end":49957,"line_start":1095,"line_end":1095,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Assertion::span","value":"ast::Span","parent":{"krate":0,"index":2327},"children":[],"decl_id":null,"docs":" The span of this assertion.\n","sig":null,"attributes":[{"value":"/ The span of this assertion.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49913,"byte_end":49944,"line_start":1094,"line_end":1094,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2329},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50020,"byte_end":50024,"line_start":1097,"line_end":1097,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Assertion::kind","value":"ast::AssertionKind","parent":{"krate":0,"index":2327},"children":[],"decl_id":null,"docs":" The assertion kind, e.g., `\\b` or `^`.\n","sig":null,"attributes":[{"value":"/ The assertion kind, e.g., `\\b` or `^`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":49969,"byte_end":50011,"line_start":1096,"line_end":1096,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2342},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50147,"byte_end":50156,"line_start":1104,"line_end":1104,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::ast::AssertionKind::StartLine","value":"AssertionKind::StartLine","parent":{"krate":0,"index":2341},"children":[],"decl_id":null,"docs":" `^`\n","sig":null,"attributes":[{"value":"/ `^`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50135,"byte_end":50142,"line_start":1103,"line_end":1103,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2344},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50174,"byte_end":50181,"line_start":1106,"line_end":1106,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::ast::AssertionKind::EndLine","value":"AssertionKind::EndLine","parent":{"krate":0,"index":2341},"children":[],"decl_id":null,"docs":" `$`\n","sig":null,"attributes":[{"value":"/ `$`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50162,"byte_end":50169,"line_start":1105,"line_end":1105,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2346},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50200,"byte_end":50209,"line_start":1108,"line_end":1108,"column_start":5,"column_end":14},"name":"StartText","qualname":"::ast::AssertionKind::StartText","value":"AssertionKind::StartText","parent":{"krate":0,"index":2341},"children":[],"decl_id":null,"docs":" `\\A`\n","sig":null,"attributes":[{"value":"/ `\\A`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50187,"byte_end":50195,"line_start":1107,"line_end":1107,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2348},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50228,"byte_end":50235,"line_start":1110,"line_end":1110,"column_start":5,"column_end":12},"name":"EndText","qualname":"::ast::AssertionKind::EndText","value":"AssertionKind::EndText","parent":{"krate":0,"index":2341},"children":[],"decl_id":null,"docs":" `\\z`\n","sig":null,"attributes":[{"value":"/ `\\z`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50215,"byte_end":50223,"line_start":1109,"line_end":1109,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2350},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50254,"byte_end":50266,"line_start":1112,"line_end":1112,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::ast::AssertionKind::WordBoundary","value":"AssertionKind::WordBoundary","parent":{"krate":0,"index":2341},"children":[],"decl_id":null,"docs":" `\\b`\n","sig":null,"attributes":[{"value":"/ `\\b`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50241,"byte_end":50249,"line_start":1111,"line_end":1111,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2352},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50285,"byte_end":50300,"line_start":1114,"line_end":1114,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::ast::AssertionKind::NotWordBoundary","value":"AssertionKind::NotWordBoundary","parent":{"krate":0,"index":2341},"children":[],"decl_id":null,"docs":" `\\B`\n","sig":null,"attributes":[{"value":"/ `\\B`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50272,"byte_end":50280,"line_start":1113,"line_end":1113,"column_start":5,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":2341},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50115,"byte_end":50128,"line_start":1102,"line_end":1102,"column_start":10,"column_end":23},"name":"AssertionKind","qualname":"::ast::AssertionKind","value":"AssertionKind::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary}","parent":null,"children":[{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2346},{"krate":0,"index":2348},{"krate":0,"index":2350},{"krate":0,"index":2352}],"decl_id":null,"docs":" An assertion kind.\n","sig":null,"attributes":[{"value":"/ An assertion kind.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50044,"byte_end":50066,"line_start":1100,"line_end":1100,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":2364},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50415,"byte_end":50425,"line_start":1119,"line_end":1119,"column_start":12,"column_end":22},"name":"Repetition","qualname":"::ast::Repetition","value":"Repetition { span, op, greedy, ast }","parent":null,"children":[{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2367},{"krate":0,"index":2368}],"decl_id":null,"docs":" A repetition operation applied to a regular expression.\n","sig":null,"attributes":[{"value":"/ A repetition operation applied to a regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50305,"byte_end":50364,"line_start":1117,"line_end":1117,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2365},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50472,"byte_end":50476,"line_start":1121,"line_end":1121,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Repetition::span","value":"ast::Span","parent":{"krate":0,"index":2364},"children":[],"decl_id":null,"docs":" The span of this operation.\n","sig":null,"attributes":[{"value":"/ The span of this operation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50432,"byte_end":50463,"line_start":1120,"line_end":1120,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2366},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50522,"byte_end":50524,"line_start":1123,"line_end":1123,"column_start":9,"column_end":11},"name":"op","qualname":"::ast::Repetition::op","value":"ast::RepetitionOp","parent":{"krate":0,"index":2364},"children":[],"decl_id":null,"docs":" The actual operation.\n","sig":null,"attributes":[{"value":"/ The actual operation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50488,"byte_end":50513,"line_start":1122,"line_end":1122,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2367},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50608,"byte_end":50614,"line_start":1125,"line_end":1125,"column_start":9,"column_end":15},"name":"greedy","qualname":"::ast::Repetition::greedy","value":"bool","parent":{"krate":0,"index":2364},"children":[],"decl_id":null,"docs":" Whether this operation was applied greedily or not.\n","sig":null,"attributes":[{"value":"/ Whether this operation was applied greedily or not.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50544,"byte_end":50599,"line_start":1124,"line_end":1124,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2368},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50679,"byte_end":50682,"line_start":1127,"line_end":1127,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::Repetition::ast","value":"std::boxed::Box<ast::Ast>","parent":{"krate":0,"index":2364},"children":[],"decl_id":null,"docs":" The regular expression under repetition.\n","sig":null,"attributes":[{"value":"/ The regular expression under repetition.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50626,"byte_end":50670,"line_start":1126,"line_end":1126,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":2380},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50783,"byte_end":50795,"line_start":1132,"line_end":1132,"column_start":12,"column_end":24},"name":"RepetitionOp","qualname":"::ast::RepetitionOp","value":"RepetitionOp { span, kind }","parent":null,"children":[{"krate":0,"index":2381},{"krate":0,"index":2382}],"decl_id":null,"docs":" The repetition operator itself.\n","sig":null,"attributes":[{"value":"/ The repetition operator itself.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50697,"byte_end":50732,"line_start":1130,"line_end":1130,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2381},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50898,"byte_end":50902,"line_start":1135,"line_end":1135,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::RepetitionOp::span","value":"ast::Span","parent":{"krate":0,"index":2380},"children":[],"decl_id":null,"docs":" The span of this operator. This includes things like `+`, `*?` and\n `{m,n}`.\n","sig":null,"attributes":[{"value":"/ The span of this operator. This includes things like `+`, `*?` and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50802,"byte_end":50872,"line_start":1133,"line_end":1133,"column_start":5,"column_end":75}},{"value":"/ `{m,n}`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50877,"byte_end":50889,"line_start":1134,"line_end":1134,"column_start":5,"column_end":17}}]},{"kind":"Field","id":{"krate":0,"index":2382},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50949,"byte_end":50953,"line_start":1137,"line_end":1137,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::RepetitionOp::kind","value":"ast::RepetitionKind","parent":{"krate":0,"index":2380},"children":[],"decl_id":null,"docs":" The type of operation.\n","sig":null,"attributes":[{"value":"/ The type of operation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50914,"byte_end":50940,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2395},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51094,"byte_end":51103,"line_start":1144,"line_end":1144,"column_start":5,"column_end":14},"name":"ZeroOrOne","qualname":"::ast::RepetitionKind::ZeroOrOne","value":"RepetitionKind::ZeroOrOne","parent":{"krate":0,"index":2394},"children":[],"decl_id":null,"docs":" `?`\n","sig":null,"attributes":[{"value":"/ `?`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51082,"byte_end":51089,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2397},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51121,"byte_end":51131,"line_start":1146,"line_end":1146,"column_start":5,"column_end":15},"name":"ZeroOrMore","qualname":"::ast::RepetitionKind::ZeroOrMore","value":"RepetitionKind::ZeroOrMore","parent":{"krate":0,"index":2394},"children":[],"decl_id":null,"docs":" `*`\n","sig":null,"attributes":[{"value":"/ `*`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51109,"byte_end":51116,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2399},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51149,"byte_end":51158,"line_start":1148,"line_end":1148,"column_start":5,"column_end":14},"name":"OneOrMore","qualname":"::ast::RepetitionKind::OneOrMore","value":"RepetitionKind::OneOrMore","parent":{"krate":0,"index":2394},"children":[],"decl_id":null,"docs":" `+`\n","sig":null,"attributes":[{"value":"/ `+`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51137,"byte_end":51144,"line_start":1147,"line_end":1147,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2401},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51180,"byte_end":51185,"line_start":1150,"line_end":1150,"column_start":5,"column_end":10},"name":"Range","qualname":"::ast::RepetitionKind::Range","value":"RepetitionKind::Range(RepetitionRange)","parent":{"krate":0,"index":2394},"children":[],"decl_id":null,"docs":" `{m,n}`\n","sig":null,"attributes":[{"value":"/ `{m,n}`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51164,"byte_end":51175,"line_start":1149,"line_end":1149,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":2394},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51061,"byte_end":51075,"line_start":1142,"line_end":1142,"column_start":10,"column_end":24},"name":"RepetitionKind","qualname":"::ast::RepetitionKind","value":"RepetitionKind::{ZeroOrOne, ZeroOrMore, OneOrMore, Range}","parent":null,"children":[{"krate":0,"index":2395},{"krate":0,"index":2397},{"krate":0,"index":2399},{"krate":0,"index":2401}],"decl_id":null,"docs":" The kind of a repetition operator.\n","sig":null,"attributes":[{"value":"/ The kind of a repetition operator.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":50974,"byte_end":51012,"line_start":1140,"line_end":1140,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2416},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51324,"byte_end":51331,"line_start":1157,"line_end":1157,"column_start":5,"column_end":12},"name":"Exactly","qualname":"::ast::RepetitionRange::Exactly","value":"RepetitionRange::Exactly(u32)","parent":{"krate":0,"index":2415},"children":[],"decl_id":null,"docs":" `{m}`\n","sig":null,"attributes":[{"value":"/ `{m}`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51310,"byte_end":51319,"line_start":1156,"line_end":1156,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2419},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51357,"byte_end":51364,"line_start":1159,"line_end":1159,"column_start":5,"column_end":12},"name":"AtLeast","qualname":"::ast::RepetitionRange::AtLeast","value":"RepetitionRange::AtLeast(u32)","parent":{"krate":0,"index":2415},"children":[],"decl_id":null,"docs":" `{m,}`\n","sig":null,"attributes":[{"value":"/ `{m,}`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51342,"byte_end":51352,"line_start":1158,"line_end":1158,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2422},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51391,"byte_end":51398,"line_start":1161,"line_end":1161,"column_start":5,"column_end":12},"name":"Bounded","qualname":"::ast::RepetitionRange::Bounded","value":"RepetitionRange::Bounded(u32, u32)","parent":{"krate":0,"index":2415},"children":[],"decl_id":null,"docs":" `{m,n}`\n","sig":null,"attributes":[{"value":"/ `{m,n}`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51375,"byte_end":51386,"line_start":1160,"line_end":1160,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":2415},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51288,"byte_end":51303,"line_start":1155,"line_end":1155,"column_start":10,"column_end":25},"name":"RepetitionRange","qualname":"::ast::RepetitionRange","value":"RepetitionRange::{Exactly, AtLeast, Bounded}","parent":null,"children":[{"krate":0,"index":2416},{"krate":0,"index":2419},{"krate":0,"index":2422}],"decl_id":null,"docs":" A range repetition operator.\n","sig":null,"attributes":[{"value":"/ A range repetition operator.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51207,"byte_end":51239,"line_start":1153,"line_end":1153,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51648,"byte_end":51656,"line_start":1169,"line_end":1169,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<RepetitionRange>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this repetition range is valid.","sig":null,"attributes":[{"value":"/ Returns true if and only if this repetition range is valid.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51440,"byte_end":51503,"line_start":1165,"line_end":1165,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51508,"byte_end":51511,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ The only case where a repetition range is invalid is if it is bounded","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51516,"byte_end":51589,"line_start":1167,"line_end":1167,"column_start":5,"column_end":78}},{"value":"/ and its start is greater than its end.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51594,"byte_end":51636,"line_start":1168,"line_end":1168,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2437},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52126,"byte_end":52131,"line_start":1184,"line_end":1184,"column_start":12,"column_end":17},"name":"Group","qualname":"::ast::Group","value":"Group { span, kind, ast }","parent":null,"children":[{"krate":0,"index":2438},{"krate":0,"index":2439},{"krate":0,"index":2440}],"decl_id":null,"docs":" A grouped regular expression.","sig":null,"attributes":[{"value":"/ A grouped regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51800,"byte_end":51833,"line_start":1177,"line_end":1177,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51834,"byte_end":51837,"line_start":1178,"line_end":1178,"column_start":1,"column_end":4}},{"value":"/ This includes both capturing and non-capturing groups. This does **not**","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51838,"byte_end":51914,"line_start":1179,"line_end":1179,"column_start":1,"column_end":77}},{"value":"/ include flag-only groups like `(?is)`, but does contain any group that","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51915,"byte_end":51989,"line_start":1180,"line_end":1180,"column_start":1,"column_end":75}},{"value":"/ contains a sub-expression, e.g., `(a)`, `(?P<name>a)`, `(?:a)` and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51990,"byte_end":52060,"line_start":1181,"line_end":1181,"column_start":1,"column_end":71}},{"value":"/ `(?is:a)`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52061,"byte_end":52075,"line_start":1182,"line_end":1182,"column_start":1,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":2438},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52174,"byte_end":52178,"line_start":1186,"line_end":1186,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Group::span","value":"ast::Span","parent":{"krate":0,"index":2437},"children":[],"decl_id":null,"docs":" The span of this group.\n","sig":null,"attributes":[{"value":"/ The span of this group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52138,"byte_end":52165,"line_start":1185,"line_end":1185,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2439},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52226,"byte_end":52230,"line_start":1188,"line_end":1188,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Group::kind","value":"ast::GroupKind","parent":{"krate":0,"index":2437},"children":[],"decl_id":null,"docs":" The kind of this group.\n","sig":null,"attributes":[{"value":"/ The kind of this group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52190,"byte_end":52217,"line_start":1187,"line_end":1187,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2440},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52297,"byte_end":52300,"line_start":1190,"line_end":1190,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::Group::ast","value":"std::boxed::Box<ast::Ast>","parent":{"krate":0,"index":2437},"children":[],"decl_id":null,"docs":" The regular expression in this group.\n","sig":null,"attributes":[{"value":"/ The regular expression in this group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52247,"byte_end":52288,"line_start":1189,"line_end":1189,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52471,"byte_end":52476,"line_start":1196,"line_end":1196,"column_start":12,"column_end":17},"name":"flags","qualname":"<Group>::flags","value":"fn (&self) -> Option<&Flags>","parent":null,"children":[],"decl_id":null,"docs":" If this group is non-capturing, then this returns the (possibly empty)\n set of flags. Otherwise, `None` is returned.\n","sig":null,"attributes":[{"value":"/ If this group is non-capturing, then this returns the (possibly empty)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52332,"byte_end":52406,"line_start":1194,"line_end":1194,"column_start":5,"column_end":79}},{"value":"/ set of flags. Otherwise, `None` is returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52411,"byte_end":52459,"line_start":1195,"line_end":1195,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52705,"byte_end":52717,"line_start":1204,"line_end":1204,"column_start":12,"column_end":24},"name":"is_capturing","qualname":"<Group>::is_capturing","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this group is capturing.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this group is capturing.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52637,"byte_end":52693,"line_start":1203,"line_end":1203,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53079,"byte_end":53092,"line_start":1214,"line_end":1214,"column_start":12,"column_end":25},"name":"capture_index","qualname":"<Group>::capture_index","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture index of this group, if this is a capturing group.","sig":null,"attributes":[{"value":"/ Returns the capture index of this group, if this is a capturing group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52907,"byte_end":52981,"line_start":1211,"line_end":1211,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52986,"byte_end":52989,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ This returns a capture index precisely when `is_capturing` is `true`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52994,"byte_end":53067,"line_start":1213,"line_end":1213,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2453},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53424,"byte_end":53436,"line_start":1227,"line_end":1227,"column_start":5,"column_end":17},"name":"CaptureIndex","qualname":"::ast::GroupKind::CaptureIndex","value":"GroupKind::CaptureIndex(u32)","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" `(a)`\n","sig":null,"attributes":[{"value":"/ `(a)`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53410,"byte_end":53419,"line_start":1226,"line_end":1226,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2456},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53469,"byte_end":53480,"line_start":1229,"line_end":1229,"column_start":5,"column_end":16},"name":"CaptureName","qualname":"::ast::GroupKind::CaptureName","value":"GroupKind::CaptureName(CaptureName)","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" `(?P<name>a)`\n","sig":null,"attributes":[{"value":"/ `(?P<name>a)`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53447,"byte_end":53464,"line_start":1228,"line_end":1228,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2459},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53528,"byte_end":53540,"line_start":1231,"line_end":1231,"column_start":5,"column_end":17},"name":"NonCapturing","qualname":"::ast::GroupKind::NonCapturing","value":"GroupKind::NonCapturing(Flags)","parent":{"krate":0,"index":2452},"children":[],"decl_id":null,"docs":" `(?:a)` and `(?i:a)`\n","sig":null,"attributes":[{"value":"/ `(?:a)` and `(?i:a)`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53499,"byte_end":53523,"line_start":1230,"line_end":1230,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":2452},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53394,"byte_end":53403,"line_start":1225,"line_end":1225,"column_start":10,"column_end":19},"name":"GroupKind","qualname":"::ast::GroupKind","value":"GroupKind::{CaptureIndex, CaptureName, NonCapturing}","parent":null,"children":[{"krate":0,"index":2453},{"krate":0,"index":2456},{"krate":0,"index":2459}],"decl_id":null,"docs":" The kind of a group.\n","sig":null,"attributes":[{"value":"/ The kind of a group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53321,"byte_end":53345,"line_start":1223,"line_end":1223,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2473},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53724,"byte_end":53735,"line_start":1239,"line_end":1239,"column_start":12,"column_end":23},"name":"CaptureName","qualname":"::ast::CaptureName","value":"CaptureName { span, name, index }","parent":null,"children":[{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476}],"decl_id":null,"docs":" A capture name.","sig":null,"attributes":[{"value":"/ A capture name.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53552,"byte_end":53571,"line_start":1234,"line_end":1234,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53572,"byte_end":53575,"line_start":1235,"line_end":1235,"column_start":1,"column_end":4}},{"value":"/ This corresponds to the name itself between the angle brackets in, e.g.,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53576,"byte_end":53652,"line_start":1236,"line_end":1236,"column_start":1,"column_end":77}},{"value":"/ `(?P<foo>expr)`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53653,"byte_end":53673,"line_start":1237,"line_end":1237,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":2474},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53785,"byte_end":53789,"line_start":1241,"line_end":1241,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::CaptureName::span","value":"ast::Span","parent":{"krate":0,"index":2473},"children":[],"decl_id":null,"docs":" The span of this capture name.\n","sig":null,"attributes":[{"value":"/ The span of this capture name.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53742,"byte_end":53776,"line_start":1240,"line_end":1240,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2475},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53831,"byte_end":53835,"line_start":1243,"line_end":1243,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::CaptureName::name","value":"std::string::String","parent":{"krate":0,"index":2473},"children":[],"decl_id":null,"docs":" The capture name.\n","sig":null,"attributes":[{"value":"/ The capture name.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53801,"byte_end":53822,"line_start":1242,"line_end":1242,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":2476},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53880,"byte_end":53885,"line_start":1245,"line_end":1245,"column_start":9,"column_end":14},"name":"index","qualname":"::ast::CaptureName::index","value":"u32","parent":{"krate":0,"index":2473},"children":[],"decl_id":null,"docs":" The capture index.\n","sig":null,"attributes":[{"value":"/ The capture index.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53849,"byte_end":53871,"line_start":1244,"line_end":1244,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2488},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54022,"byte_end":54030,"line_start":1250,"line_end":1250,"column_start":12,"column_end":20},"name":"SetFlags","qualname":"::ast::SetFlags","value":"SetFlags { span, flags }","parent":null,"children":[{"krate":0,"index":2489},{"krate":0,"index":2490}],"decl_id":null,"docs":" A group of flags that is not applied to a particular regular expression.\n","sig":null,"attributes":[{"value":"/ A group of flags that is not applied to a particular regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":53895,"byte_end":53971,"line_start":1248,"line_end":1248,"column_start":1,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":2489},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54110,"byte_end":54114,"line_start":1252,"line_end":1252,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::SetFlags::span","value":"ast::Span","parent":{"krate":0,"index":2488},"children":[],"decl_id":null,"docs":" The span of these flags, including the grouping parentheses.\n","sig":null,"attributes":[{"value":"/ The span of these flags, including the grouping parentheses.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54037,"byte_end":54101,"line_start":1251,"line_end":1251,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":2490},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54168,"byte_end":54173,"line_start":1254,"line_end":1254,"column_start":9,"column_end":14},"name":"flags","qualname":"::ast::SetFlags::flags","value":"ast::Flags","parent":{"krate":0,"index":2488},"children":[],"decl_id":null,"docs":" The actual sequence of flags.\n","sig":null,"attributes":[{"value":"/ The actual sequence of flags.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54126,"byte_end":54159,"line_start":1253,"line_end":1253,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2502},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54338,"byte_end":54343,"line_start":1261,"line_end":1261,"column_start":12,"column_end":17},"name":"Flags","qualname":"::ast::Flags","value":"Flags { span, items }","parent":null,"children":[{"krate":0,"index":2503},{"krate":0,"index":2504}],"decl_id":null,"docs":" A group of flags.","sig":null,"attributes":[{"value":"/ A group of flags.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54185,"byte_end":54206,"line_start":1257,"line_end":1257,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54207,"byte_end":54210,"line_start":1258,"line_end":1258,"column_start":1,"column_end":4}},{"value":"/ This corresponds only to the sequence of flags themselves, e.g., `is-u`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54211,"byte_end":54287,"line_start":1259,"line_end":1259,"column_start":1,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":2503},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54395,"byte_end":54399,"line_start":1263,"line_end":1263,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Flags::span","value":"ast::Span","parent":{"krate":0,"index":2502},"children":[],"decl_id":null,"docs":" The span of this group of flags.\n","sig":null,"attributes":[{"value":"/ The span of this group of flags.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54350,"byte_end":54386,"line_start":1262,"line_end":1262,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2504},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54508,"byte_end":54513,"line_start":1266,"line_end":1266,"column_start":9,"column_end":14},"name":"items","qualname":"::ast::Flags::items","value":"std::vec::Vec<ast::FlagsItem>","parent":{"krate":0,"index":2502},"children":[],"decl_id":null,"docs":" A sequence of flag items. Each item is either a flag or a negation\n operator.\n","sig":null,"attributes":[{"value":"/ A sequence of flag items. Each item is either a flag or a negation","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54411,"byte_end":54481,"line_start":1264,"line_end":1264,"column_start":5,"column_end":75}},{"value":"/ operator.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54486,"byte_end":54499,"line_start":1265,"line_end":1265,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54803,"byte_end":54811,"line_start":1275,"line_end":1275,"column_start":12,"column_end":20},"name":"add_item","qualname":"<Flags>::add_item","value":"fn (&mut self, item: FlagsItem) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Add the given item to this sequence of flags.","sig":null,"attributes":[{"value":"/ Add the given item to this sequence of flags.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54551,"byte_end":54600,"line_start":1270,"line_end":1270,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54605,"byte_end":54608,"line_start":1271,"line_end":1271,"column_start":5,"column_end":8}},{"value":"/ If the item was added successfully, then `None` is returned. If the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54613,"byte_end":54684,"line_start":1272,"line_end":1272,"column_start":5,"column_end":76}},{"value":"/ given item is a duplicate, then `Some(i)` is returned, where","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54689,"byte_end":54753,"line_start":1273,"line_end":1273,"column_start":5,"column_end":69}},{"value":"/ `items[i].kind == item.kind`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54758,"byte_end":54791,"line_start":1274,"line_end":1274,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55383,"byte_end":55393,"line_start":1294,"line_end":1294,"column_start":12,"column_end":22},"name":"flag_state","qualname":"<Flags>::flag_state","value":"fn (&self, flag: Flag) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the state of the given flag in this set.","sig":null,"attributes":[{"value":"/ Returns the state of the given flag in this set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55061,"byte_end":55113,"line_start":1285,"line_end":1285,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55118,"byte_end":55121,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ If the given flag is in the set but is negated, then `Some(false)` is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55126,"byte_end":55199,"line_start":1287,"line_end":1287,"column_start":5,"column_end":78}},{"value":"/ returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55204,"byte_end":55217,"line_start":1288,"line_end":1288,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55222,"byte_end":55225,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ If the given flag is in the set and is not negated, then `Some(true)`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55230,"byte_end":55303,"line_start":1290,"line_end":1290,"column_start":5,"column_end":78}},{"value":"/ is returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55308,"byte_end":55324,"line_start":1291,"line_end":1291,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55329,"byte_end":55332,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ Otherwise, `None` is returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55337,"byte_end":55371,"line_start":1293,"line_end":1293,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":2516},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55911,"byte_end":55920,"line_start":1313,"line_end":1313,"column_start":12,"column_end":21},"name":"FlagsItem","qualname":"::ast::FlagsItem","value":"FlagsItem { span, kind }","parent":null,"children":[{"krate":0,"index":2517},{"krate":0,"index":2518}],"decl_id":null,"docs":" A single item in a group of flags.\n","sig":null,"attributes":[{"value":"/ A single item in a group of flags.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55822,"byte_end":55860,"line_start":1311,"line_end":1311,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2517},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55962,"byte_end":55966,"line_start":1315,"line_end":1315,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::FlagsItem::span","value":"ast::Span","parent":{"krate":0,"index":2516},"children":[],"decl_id":null,"docs":" The span of this item.\n","sig":null,"attributes":[{"value":"/ The span of this item.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55927,"byte_end":55953,"line_start":1314,"line_end":1314,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2518},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56013,"byte_end":56017,"line_start":1317,"line_end":1317,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::FlagsItem::kind","value":"ast::FlagsItemKind","parent":{"krate":0,"index":2516},"children":[],"decl_id":null,"docs":" The kind of this item.\n","sig":null,"attributes":[{"value":"/ The kind of this item.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":55978,"byte_end":56004,"line_start":1316,"line_end":1316,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2531},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56242,"byte_end":56250,"line_start":1325,"line_end":1325,"column_start":5,"column_end":13},"name":"Negation","qualname":"::ast::FlagsItemKind::Negation","value":"FlagsItemKind::Negation","parent":{"krate":0,"index":2530},"children":[],"decl_id":null,"docs":" A negation operator applied to all subsequent flags in the enclosing\n group.\n","sig":null,"attributes":[{"value":"/ A negation operator applied to all subsequent flags in the enclosing","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56150,"byte_end":56222,"line_start":1323,"line_end":1323,"column_start":5,"column_end":77}},{"value":"/ group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56227,"byte_end":56237,"line_start":1324,"line_end":1324,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2533},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56290,"byte_end":56294,"line_start":1327,"line_end":1327,"column_start":5,"column_end":9},"name":"Flag","qualname":"::ast::FlagsItemKind::Flag","value":"FlagsItemKind::Flag(Flag)","parent":{"krate":0,"index":2530},"children":[],"decl_id":null,"docs":" A single flag in a group.\n","sig":null,"attributes":[{"value":"/ A single flag in a group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56256,"byte_end":56285,"line_start":1326,"line_end":1326,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":2530},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56130,"byte_end":56143,"line_start":1322,"line_end":1322,"column_start":10,"column_end":23},"name":"FlagsItemKind","qualname":"::ast::FlagsItemKind","value":"FlagsItemKind::{Negation, Flag}","parent":null,"children":[{"krate":0,"index":2531},{"krate":0,"index":2533}],"decl_id":null,"docs":" The kind of an item in a group of flags.\n","sig":null,"attributes":[{"value":"/ The kind of an item in a group of flags.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56037,"byte_end":56081,"line_start":1320,"line_end":1320,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56407,"byte_end":56418,"line_start":1332,"line_end":1332,"column_start":12,"column_end":23},"name":"is_negation","qualname":"<FlagsItemKind>::is_negation","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this item is a negation operator.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this item is a negation operator.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56330,"byte_end":56395,"line_start":1331,"line_end":1331,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2548},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56642,"byte_end":56657,"line_start":1344,"line_end":1344,"column_start":5,"column_end":20},"name":"CaseInsensitive","qualname":"::ast::Flag::CaseInsensitive","value":"Flag::CaseInsensitive","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" `i`\n","sig":null,"attributes":[{"value":"/ `i`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56630,"byte_end":56637,"line_start":1343,"line_end":1343,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2550},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56675,"byte_end":56684,"line_start":1346,"line_end":1346,"column_start":5,"column_end":14},"name":"MultiLine","qualname":"::ast::Flag::MultiLine","value":"Flag::MultiLine","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" `m`\n","sig":null,"attributes":[{"value":"/ `m`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56663,"byte_end":56670,"line_start":1345,"line_end":1345,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2552},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56702,"byte_end":56719,"line_start":1348,"line_end":1348,"column_start":5,"column_end":22},"name":"DotMatchesNewLine","qualname":"::ast::Flag::DotMatchesNewLine","value":"Flag::DotMatchesNewLine","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" `s`\n","sig":null,"attributes":[{"value":"/ `s`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56690,"byte_end":56697,"line_start":1347,"line_end":1347,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2554},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56737,"byte_end":56746,"line_start":1350,"line_end":1350,"column_start":5,"column_end":14},"name":"SwapGreed","qualname":"::ast::Flag::SwapGreed","value":"Flag::SwapGreed","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" `U`\n","sig":null,"attributes":[{"value":"/ `U`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56725,"byte_end":56732,"line_start":1349,"line_end":1349,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2556},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56764,"byte_end":56771,"line_start":1352,"line_end":1352,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::Flag::Unicode","value":"Flag::Unicode","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" `u`\n","sig":null,"attributes":[{"value":"/ `u`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56752,"byte_end":56759,"line_start":1351,"line_end":1351,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2558},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56789,"byte_end":56805,"line_start":1354,"line_end":1354,"column_start":5,"column_end":21},"name":"IgnoreWhitespace","qualname":"::ast::Flag::IgnoreWhitespace","value":"Flag::IgnoreWhitespace","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" `x`\n","sig":null,"attributes":[{"value":"/ `x`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56777,"byte_end":56784,"line_start":1353,"line_end":1353,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":2547},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56619,"byte_end":56623,"line_start":1342,"line_end":1342,"column_start":10,"column_end":14},"name":"Flag","qualname":"::ast::Flag","value":"Flag::{CaseInsensitive, MultiLine, DotMatchesNewLine, SwapGreed, Unicode, IgnoreWhitespace}","parent":null,"children":[{"krate":0,"index":2548},{"krate":0,"index":2550},{"krate":0,"index":2552},{"krate":0,"index":2554},{"krate":0,"index":2556},{"krate":0,"index":2558}],"decl_id":null,"docs":" A single flag.\n","sig":null,"attributes":[{"value":"/ A single flag.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56546,"byte_end":56564,"line_start":1340,"line_end":1340,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":409},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303359,"byte_end":303365,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for dealing with errors returned by this crate.\n","sig":null,"attributes":[{"value":"/ A type alias for dealing with errors returned by this crate.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303285,"byte_end":303349,"line_start":9,"line_end":9,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2604},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303637,"byte_end":303642,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Parse","qualname":"::error::Error::Parse","value":"Error::Parse(ast::Error)","parent":{"krate":0,"index":2603},"children":[],"decl_id":null,"docs":" An error that occurred while translating concrete syntax into abstract\n syntax (AST).\n","sig":null,"attributes":[{"value":"/ An error that occurred while translating concrete syntax into abstract","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303536,"byte_end":303610,"line_start":15,"line_end":15,"column_start":5,"column_end":79}},{"value":"/ syntax (AST).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303615,"byte_end":303632,"line_start":16,"line_end":16,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2607},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303786,"byte_end":303795,"line_start":20,"line_end":20,"column_start":5,"column_end":14},"name":"Translate","qualname":"::error::Error::Translate","value":"Error::Translate(hir::Error)","parent":{"krate":0,"index":2603},"children":[],"decl_id":null,"docs":" An error that occurred while translating abstract syntax into a high\n level intermediate representation (HIR).\n","sig":null,"attributes":[{"value":"/ An error that occurred while translating abstract syntax into a high","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303660,"byte_end":303732,"line_start":18,"line_end":18,"column_start":5,"column_end":77}},{"value":"/ level intermediate representation (HIR).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303737,"byte_end":303781,"line_start":19,"line_end":19,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2610},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":304087,"byte_end":304102,"line_start":27,"line_end":27,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":2603},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303813,"byte_end":303867,"line_start":21,"line_end":21,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303872,"byte_end":303875,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303880,"byte_end":303950,"line_start":23,"line_end":23,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303955,"byte_end":304027,"line_start":24,"line_end":24,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":304032,"byte_end":304063,"line_start":25,"line_end":25,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":2603},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303524,"byte_end":303529,"line_start":14,"line_end":14,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Parse, Translate, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":2604},{"krate":0,"index":2607},{"krate":0,"index":2610}],"decl_id":null,"docs":" This error type encompasses any error that can be returned by this crate.\n","sig":null,"attributes":[{"value":"/ This error type encompasses any error that can be returned by this crate.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":303398,"byte_end":303475,"line_start":12,"line_end":12,"column_start":1,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":446},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hir","qualname":"::hir","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":523},{"krate":0,"index":626},{"krate":0,"index":660},{"krate":0,"index":761},{"krate":0,"index":2766},{"krate":0,"index":2779},{"krate":0,"index":2777},{"krate":0,"index":2774},{"krate":0,"index":2775},{"krate":0,"index":2770},{"krate":0,"index":2771},{"krate":0,"index":803},{"krate":0,"index":2781},{"krate":0,"index":2806},{"krate":0,"index":2804},{"krate":0,"index":2801},{"krate":0,"index":2802},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":2808},{"krate":0,"index":2820},{"krate":0,"index":2818},{"krate":0,"index":2815},{"krate":0,"index":2816},{"krate":0,"index":2811},{"krate":0,"index":2812},{"krate":0,"index":2822},{"krate":0,"index":2858},{"krate":0,"index":2856},{"krate":0,"index":2853},{"krate":0,"index":2854},{"krate":0,"index":2849},{"krate":0,"index":2850},{"krate":0,"index":816},{"krate":0,"index":850},{"krate":0,"index":853},{"krate":0,"index":2860},{"krate":0,"index":2876},{"krate":0,"index":2874},{"krate":0,"index":2871},{"krate":0,"index":2872},{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":856},{"krate":0,"index":2878},{"krate":0,"index":2894},{"krate":0,"index":2892},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":858},{"krate":0,"index":2896},{"krate":0,"index":2907},{"krate":0,"index":2905},{"krate":0,"index":2902},{"krate":0,"index":2903},{"krate":0,"index":2898},{"krate":0,"index":2899},{"krate":0,"index":862},{"krate":0,"index":2909},{"krate":0,"index":2913},{"krate":0,"index":878},{"krate":0,"index":2916},{"krate":0,"index":2941},{"krate":0,"index":2940},{"krate":0,"index":2938},{"krate":0,"index":2935},{"krate":0,"index":2936},{"krate":0,"index":2931},{"krate":0,"index":2932},{"krate":0,"index":2921},{"krate":0,"index":2919},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":892},{"krate":0,"index":2943},{"krate":0,"index":2954},{"krate":0,"index":2952},{"krate":0,"index":2949},{"krate":0,"index":2950},{"krate":0,"index":2945},{"krate":0,"index":2946},{"krate":0,"index":896},{"krate":0,"index":2956},{"krate":0,"index":2960},{"krate":0,"index":911},{"krate":0,"index":2963},{"krate":0,"index":2988},{"krate":0,"index":2987},{"krate":0,"index":2985},{"krate":0,"index":2982},{"krate":0,"index":2983},{"krate":0,"index":2978},{"krate":0,"index":2979},{"krate":0,"index":2968},{"krate":0,"index":2966},{"krate":0,"index":915},{"krate":0,"index":922},{"krate":0,"index":926},{"krate":0,"index":2990},{"krate":0,"index":3007},{"krate":0,"index":3005},{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3009},{"krate":0,"index":3026},{"krate":0,"index":3024},{"krate":0,"index":3021},{"krate":0,"index":3022},{"krate":0,"index":3018},{"krate":0,"index":3019},{"krate":0,"index":928},{"krate":0,"index":3028},{"krate":0,"index":3040},{"krate":0,"index":3038},{"krate":0,"index":3035},{"krate":0,"index":3036},{"krate":0,"index":3031},{"krate":0,"index":3032},{"krate":0,"index":3042},{"krate":0,"index":3060},{"krate":0,"index":3058},{"krate":0,"index":3055},{"krate":0,"index":3056},{"krate":0,"index":3051},{"krate":0,"index":3052},{"krate":0,"index":3062},{"krate":0,"index":3075},{"krate":0,"index":3073},{"krate":0,"index":3070},{"krate":0,"index":3071},{"krate":0,"index":3066},{"krate":0,"index":3067},{"krate":0,"index":930},{"krate":0,"index":3077},{"krate":0,"index":3096},{"krate":0,"index":3094},{"krate":0,"index":3091},{"krate":0,"index":3092},{"krate":0,"index":3087},{"krate":0,"index":3088},{"krate":0,"index":3098},{"krate":0,"index":3118},{"krate":0,"index":3116},{"krate":0,"index":3113},{"krate":0,"index":3114},{"krate":0,"index":3109},{"krate":0,"index":3110},{"krate":0,"index":932},{"krate":0,"index":3120},{"krate":0,"index":3131},{"krate":0,"index":3129},{"krate":0,"index":3126},{"krate":0,"index":3127},{"krate":0,"index":3122},{"krate":0,"index":3123},{"krate":0,"index":935},{"krate":0,"index":936}],"decl_id":null,"docs":"Defines a high-level intermediate representation for regular expressions.\n","sig":null,"attributes":[{"value":"!\nDefines a high-level intermediate representation for regular expressions.\n*/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":314205,"byte_end":314285,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":491},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":410083,"byte_end":410088,"line_start":338,"line_end":338,"column_start":10,"column_end":15},"name":"Bound","qualname":"::hir::interval::Interval::Bound","value":"type Bound: Bound;","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":523},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"literal","qualname":"::hir::literal","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":2663},{"krate":0,"index":2674},{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2676},{"krate":0,"index":2684},{"krate":0,"index":2681},{"krate":0,"index":2682},{"krate":0,"index":2679},{"krate":0,"index":533},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":624}],"decl_id":null,"docs":"Provides routines for extracting literal prefixes and suffixes from an `Hir`.\n","sig":null,"attributes":[{"value":"!\nProvides routines for extracting literal prefixes and suffixes from an `Hir`.\n*/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":415850,"byte_end":415934,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2663},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417270,"byte_end":417278,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"Literals","qualname":"::hir::literal::Literals","value":"Literals {  }","parent":null,"children":[{"krate":0,"index":2664},{"krate":0,"index":2665},{"krate":0,"index":2666}],"decl_id":null,"docs":" A set of literal byte strings extracted from a regular expression.","sig":null,"attributes":[{"value":"/ A set of literal byte strings extracted from a regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416040,"byte_end":416110,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416111,"byte_end":416114,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Every member of the set is a `Literal`, which is represented by a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416115,"byte_end":416184,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ `Vec<u8>`. (Notably, it may contain invalid UTF-8.) Every member is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416185,"byte_end":416256,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ said to be either *complete* or *cut*. A complete literal means that","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416257,"byte_end":416329,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ it extends until the beginning (or end) of the regular expression. In","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416330,"byte_end":416403,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ some circumstances, this can be used to indicate a match in the regular","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416404,"byte_end":416479,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416480,"byte_end":416495,"line_start":20,"line_end":20,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416496,"byte_end":416499,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ A key aspect of literal extraction is knowing when to stop. It is not","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416500,"byte_end":416573,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ feasible to blindly extract all literals from a regular expression, even if","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416574,"byte_end":416653,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ there are finitely many. For example, the regular expression `[0-9]{10}`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416654,"byte_end":416730,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/ has `10^10` distinct literals. For this reason, literal extraction is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416731,"byte_end":416804,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ bounded to some low number by default using heuristics, but the limits can","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416805,"byte_end":416883,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ be tweaked.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416884,"byte_end":416899,"line_start":27,"line_end":27,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416900,"byte_end":416903,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ **WARNING**: Literal extraction uses stack space proportional to the size","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416904,"byte_end":416981,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ of the `Hir` expression. At some point, this drawback will be eliminated.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":416982,"byte_end":417059,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ To protect yourself, set a reasonable","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417060,"byte_end":417101,"line_start":31,"line_end":31,"column_start":1,"column_end":42}},{"value":"/ [`nest_limit` on your `Parser`](../../struct.ParserBuilder.html#method.nest_limit).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417102,"byte_end":417189,"line_start":32,"line_end":32,"column_start":1,"column_end":88}},{"value":"/ This is done for you by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417190,"byte_end":417226,"line_start":33,"line_end":33,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":2676},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417592,"byte_end":417599,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"Literal","qualname":"::hir::literal::Literal","value":"Literal {  }","parent":null,"children":[{"krate":0,"index":2677},{"krate":0,"index":2678}],"decl_id":null,"docs":" A single member of a set of literals extracted from a regular expression.","sig":null,"attributes":[{"value":"/ A single member of a set of literals extracted from a regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417355,"byte_end":417432,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417433,"byte_end":417436,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This type has `Deref` and `DerefMut` impls to `Vec<u8>` so that all slice","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417437,"byte_end":417514,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ and `Vec` operations are available.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417515,"byte_end":417554,"line_start":44,"line_end":44,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417729,"byte_end":417734,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"empty","qualname":"<Literals>::empty","value":"fn () -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new empty set of literals using default limits.\n","sig":null,"attributes":[{"value":"/ Returns a new empty set of literals using default limits.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417656,"byte_end":417717,"line_start":52,"line_end":52,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417911,"byte_end":417919,"line_start":58,"line_end":58,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<Literals>::prefixes","value":"fn (expr: &Hir) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a set of literal prefixes extracted from the given `Hir`.\n","sig":null,"attributes":[{"value":"/ Returns a set of literal prefixes extracted from the given `Hir`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417830,"byte_end":417899,"line_start":57,"line_end":57,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418128,"byte_end":418136,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<Literals>::suffixes","value":"fn (expr: &Hir) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a set of literal suffixes extracted from the given `Hir`.\n","sig":null,"attributes":[{"value":"/ Returns a set of literal suffixes extracted from the given `Hir`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418047,"byte_end":418116,"line_start":64,"line_end":64,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418334,"byte_end":418344,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"limit_size","qualname":"<Literals>::limit_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the approximate size limit (in bytes) of this set.\n","sig":null,"attributes":[{"value":"/ Get the approximate size limit (in bytes) of this set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418264,"byte_end":418322,"line_start":71,"line_end":71,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418729,"byte_end":418743,"line_start":83,"line_end":83,"column_start":12,"column_end":26},"name":"set_limit_size","qualname":"<Literals>::set_limit_size","value":"fn (&mut self, size: usize) -> &mut Literals","parent":null,"children":[],"decl_id":null,"docs":" Set the approximate size limit (in bytes) of this set.","sig":null,"attributes":[{"value":"/ Set the approximate size limit (in bytes) of this set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418398,"byte_end":418456,"line_start":76,"line_end":76,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418461,"byte_end":418464,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ If extracting a literal would put the set over this limit, then","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418469,"byte_end":418536,"line_start":78,"line_end":78,"column_start":5,"column_end":72}},{"value":"/ extraction stops.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418541,"byte_end":418562,"line_start":79,"line_end":79,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418567,"byte_end":418570,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ The new limits will only apply to additions to this set. Existing","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418575,"byte_end":418644,"line_start":81,"line_end":81,"column_start":5,"column_end":74}},{"value":"/ members remain unchanged, even if the set exceeds the new limit.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418649,"byte_end":418717,"line_start":82,"line_end":82,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418907,"byte_end":418918,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"limit_class","qualname":"<Literals>::limit_class","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the character class size limit for this set.\n","sig":null,"attributes":[{"value":"/ Get the character class size limit for this set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418843,"byte_end":418895,"line_start":88,"line_end":88,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419472,"byte_end":419487,"line_start":103,"line_end":103,"column_start":12,"column_end":27},"name":"set_limit_class","qualname":"<Literals>::set_limit_class","value":"fn (&mut self, size: usize) -> &mut Literals","parent":null,"children":[],"decl_id":null,"docs":" Limits the size of character(or byte) classes considered.","sig":null,"attributes":[{"value":"/ Limits the size of character(or byte) classes considered.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":418973,"byte_end":419034,"line_start":93,"line_end":93,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419039,"byte_end":419042,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ A value of `0` prevents all character classes from being considered.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419047,"byte_end":419119,"line_start":95,"line_end":95,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419124,"byte_end":419127,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ This limit also applies to case insensitive literals, since each","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419132,"byte_end":419200,"line_start":97,"line_end":97,"column_start":5,"column_end":73}},{"value":"/ character in the case insensitive literal is converted to a class, and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419205,"byte_end":419279,"line_start":98,"line_end":98,"column_start":5,"column_end":79}},{"value":"/ then case folded.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419284,"byte_end":419305,"line_start":99,"line_end":99,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419310,"byte_end":419313,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ The new limits will only apply to additions to this set. Existing","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419318,"byte_end":419387,"line_start":101,"line_end":101,"column_start":5,"column_end":74}},{"value":"/ members remain unchanged, even if the set exceeds the new limit.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419392,"byte_end":419460,"line_start":102,"line_end":102,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419669,"byte_end":419677,"line_start":109,"line_end":109,"column_start":12,"column_end":20},"name":"literals","qualname":"<Literals>::literals","value":"fn (&self) -> &[Literal]","parent":null,"children":[],"decl_id":null,"docs":" Returns the set of literals as a slice. Its order is unspecified.\n","sig":null,"attributes":[{"value":"/ Returns the set of literals as a slice. Its order is unspecified.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419588,"byte_end":419657,"line_start":108,"line_end":108,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419856,"byte_end":419863,"line_start":116,"line_end":116,"column_start":12,"column_end":19},"name":"min_len","qualname":"<Literals>::min_len","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the smallest literal.","sig":null,"attributes":[{"value":"/ Returns the length of the smallest literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419731,"byte_end":419778,"line_start":113,"line_end":113,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419783,"byte_end":419786,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ Returns None is there are no literals in the set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":419791,"byte_end":419844,"line_start":115,"line_end":115,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":420228,"byte_end":420240,"line_start":129,"line_end":129,"column_start":12,"column_end":24},"name":"all_complete","qualname":"<Literals>::all_complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members in this set are complete.\n","sig":null,"attributes":[{"value":"/ Returns true if all members in this set are complete.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":420159,"byte_end":420216,"line_start":128,"line_end":128,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":420407,"byte_end":420419,"line_start":134,"line_end":134,"column_start":12,"column_end":24},"name":"any_complete","qualname":"<Literals>::any_complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any member in this set is complete.\n","sig":null,"attributes":[{"value":"/ Returns true if any member in this set is complete.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":420340,"byte_end":420395,"line_start":133,"line_end":133,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":420565,"byte_end":420579,"line_start":139,"line_end":139,"column_start":12,"column_end":26},"name":"contains_empty","qualname":"<Literals>::contains_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this set contains an empty literal.\n","sig":null,"attributes":[{"value":"/ Returns true if this set contains an empty literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":420498,"byte_end":420553,"line_start":138,"line_end":138,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":420743,"byte_end":420751,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Literals>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this set is empty or if all of its members is empty.\n","sig":null,"attributes":[{"value":"/ Returns true if this set is empty or if all of its members is empty.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":420659,"byte_end":420731,"line_start":143,"line_end":143,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":420931,"byte_end":420939,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"to_empty","qualname":"<Literals>::to_empty","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new empty set of literals using this set's limits.\n","sig":null,"attributes":[{"value":"/ Returns a new empty set of literals using this set's limits.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":420855,"byte_end":420919,"line_start":148,"line_end":148,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":421184,"byte_end":421205,"line_start":156,"line_end":156,"column_start":12,"column_end":33},"name":"longest_common_prefix","qualname":"<Literals>::longest_common_prefix","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest common prefix of all members in this set.\n","sig":null,"attributes":[{"value":"/ Returns the longest common prefix of all members in this set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":421107,"byte_end":421172,"line_start":155,"line_end":155,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":421659,"byte_end":421680,"line_start":172,"line_end":172,"column_start":12,"column_end":33},"name":"longest_common_suffix","qualname":"<Literals>::longest_common_suffix","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest common suffix of all members in this set.\n","sig":null,"attributes":[{"value":"/ Returns the longest common suffix of all members in this set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":421582,"byte_end":421647,"line_start":171,"line_end":171,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":422513,"byte_end":422524,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"trim_suffix","qualname":"<Literals>::trim_suffix","value":"fn (&self, num_bytes: usize) -> Option<Literals>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of literals with the given number of bytes trimmed\n from the suffix of each literal.","sig":null,"attributes":[{"value":"/ Returns a new set of literals with the given number of bytes trimmed","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":422181,"byte_end":422253,"line_start":191,"line_end":191,"column_start":5,"column_end":77}},{"value":"/ from the suffix of each literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":422258,"byte_end":422294,"line_start":192,"line_end":192,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":422299,"byte_end":422302,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ If any literal would be cut out completely by trimming, then None is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":422307,"byte_end":422379,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":422384,"byte_end":422397,"line_start":195,"line_end":195,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":422402,"byte_end":422405,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Any duplicates that are created as a result of this transformation are","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":422410,"byte_end":422484,"line_start":197,"line_end":197,"column_start":5,"column_end":79}},{"value":"/ removed.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":422489,"byte_end":422501,"line_start":198,"line_end":198,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":423421,"byte_end":423441,"line_start":224,"line_end":224,"column_start":12,"column_end":32},"name":"unambiguous_prefixes","qualname":"<Literals>::unambiguous_prefixes","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of prefixes of this set of literals that are\n guaranteed to be unambiguous.","sig":null,"attributes":[{"value":"/ Returns a new set of prefixes of this set of literals that are","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":422998,"byte_end":423064,"line_start":215,"line_end":215,"column_start":5,"column_end":71}},{"value":"/ guaranteed to be unambiguous.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":423069,"byte_end":423102,"line_start":216,"line_end":216,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":423107,"byte_end":423110,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Any substring match with a member of the set is returned is guaranteed","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":423115,"byte_end":423189,"line_start":218,"line_end":218,"column_start":5,"column_end":79}},{"value":"/ to never overlap with a substring match of another member of the set","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":423194,"byte_end":423266,"line_start":219,"line_end":219,"column_start":5,"column_end":77}},{"value":"/ at the same starting position.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":423271,"byte_end":423305,"line_start":220,"line_end":220,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":423310,"byte_end":423313,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Given any two members of the returned set, neither is a substring of","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":423318,"byte_end":423390,"line_start":222,"line_end":222,"column_start":5,"column_end":77}},{"value":"/ the other.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":423395,"byte_end":423409,"line_start":223,"line_end":223,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426010,"byte_end":426030,"line_start":291,"line_end":291,"column_start":12,"column_end":32},"name":"unambiguous_suffixes","qualname":"<Literals>::unambiguous_suffixes","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of suffixes of this set of literals that are\n guaranteed to be unambiguous.","sig":null,"attributes":[{"value":"/ Returns a new set of suffixes of this set of literals that are","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":425589,"byte_end":425655,"line_start":282,"line_end":282,"column_start":5,"column_end":71}},{"value":"/ guaranteed to be unambiguous.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":425660,"byte_end":425693,"line_start":283,"line_end":283,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":425698,"byte_end":425701,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Any substring match with a member of the set is returned is guaranteed","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":425706,"byte_end":425780,"line_start":285,"line_end":285,"column_start":5,"column_end":79}},{"value":"/ to never overlap with a substring match of another member of the set","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":425785,"byte_end":425857,"line_start":286,"line_end":286,"column_start":5,"column_end":77}},{"value":"/ at the same ending position.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":425862,"byte_end":425894,"line_start":287,"line_end":287,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":425899,"byte_end":425902,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Given any two members of the returned set, neither is a substring of","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":425907,"byte_end":425979,"line_start":289,"line_end":289,"column_start":5,"column_end":77}},{"value":"/ the other.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":425984,"byte_end":425998,"line_start":290,"line_end":290,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426721,"byte_end":426735,"line_start":309,"line_end":309,"column_start":12,"column_end":26},"name":"union_prefixes","qualname":"<Literals>::union_prefixes","value":"fn (&mut self, expr: &Hir) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions the prefixes from the given expression to this set.","sig":null,"attributes":[{"value":"/ Unions the prefixes from the given expression to this set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426255,"byte_end":426317,"line_start":300,"line_end":300,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426322,"byte_end":426325,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ If prefixes could not be added (for example, this set would exceed its","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426330,"byte_end":426404,"line_start":302,"line_end":302,"column_start":5,"column_end":79}},{"value":"/ size limits or the set of prefixes from `expr` includes the empty","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426409,"byte_end":426478,"line_start":303,"line_end":303,"column_start":5,"column_end":74}},{"value":"/ string), then false is returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426483,"byte_end":426519,"line_start":304,"line_end":304,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426524,"byte_end":426527,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ Note that prefix literals extracted from `expr` are said to be complete","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426532,"byte_end":426607,"line_start":306,"line_end":306,"column_start":5,"column_end":80}},{"value":"/ if and only if the literal extends from the beginning of `expr` to the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426612,"byte_end":426686,"line_start":307,"line_end":307,"column_start":5,"column_end":79}},{"value":"/ end of `expr`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426691,"byte_end":426709,"line_start":308,"line_end":308,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427392,"byte_end":427406,"line_start":324,"line_end":324,"column_start":12,"column_end":26},"name":"union_suffixes","qualname":"<Literals>::union_suffixes","value":"fn (&mut self, expr: &Hir) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions the suffixes from the given expression to this set.","sig":null,"attributes":[{"value":"/ Unions the suffixes from the given expression to this set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426926,"byte_end":426988,"line_start":315,"line_end":315,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":426993,"byte_end":426996,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ If suffixes could not be added (for example, this set would exceed its","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427001,"byte_end":427075,"line_start":317,"line_end":317,"column_start":5,"column_end":79}},{"value":"/ size limits or the set of suffixes from `expr` includes the empty","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427080,"byte_end":427149,"line_start":318,"line_end":318,"column_start":5,"column_end":74}},{"value":"/ string), then false is returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427154,"byte_end":427190,"line_start":319,"line_end":319,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427195,"byte_end":427198,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ Note that prefix literals extracted from `expr` are said to be complete","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427203,"byte_end":427278,"line_start":321,"line_end":321,"column_start":5,"column_end":80}},{"value":"/ if and only if the literal extends from the end of `expr` to the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427283,"byte_end":427351,"line_start":322,"line_end":322,"column_start":5,"column_end":73}},{"value":"/ beginning of `expr`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427356,"byte_end":427380,"line_start":323,"line_end":323,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427856,"byte_end":427861,"line_start":336,"line_end":336,"column_start":12,"column_end":17},"name":"union","qualname":"<Literals>::union","value":"fn (&mut self, lits: Literals) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions this set with another set.","sig":null,"attributes":[{"value":"/ Unions this set with another set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427621,"byte_end":427658,"line_start":331,"line_end":331,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427663,"byte_end":427666,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ If the union would cause the set to exceed its limits, then the union","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427671,"byte_end":427744,"line_start":333,"line_end":333,"column_start":5,"column_end":78}},{"value":"/ is skipped and it returns false. Otherwise, if the union succeeds, it","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427749,"byte_end":427822,"line_start":334,"line_end":334,"column_start":5,"column_end":78}},{"value":"/ returns true.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":427827,"byte_end":427844,"line_start":335,"line_end":335,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":428497,"byte_end":428510,"line_start":355,"line_end":355,"column_start":12,"column_end":25},"name":"cross_product","qualname":"<Literals>::cross_product","value":"fn (&mut self, lits: &Literals) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends this set with another set.","sig":null,"attributes":[{"value":"/ Extends this set with another set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":428169,"byte_end":428207,"line_start":348,"line_end":348,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":428212,"byte_end":428215,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ The set of literals is extended via a cross product.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":428220,"byte_end":428276,"line_start":350,"line_end":350,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":428281,"byte_end":428284,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ If a cross product would cause this set to exceed its limits, then the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":428289,"byte_end":428363,"line_start":352,"line_end":352,"column_start":5,"column_end":79}},{"value":"/ cross product is skipped and it returns false. Otherwise, if the cross","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":428368,"byte_end":428442,"line_start":353,"line_end":353,"column_start":5,"column_end":79}},{"value":"/ product succeeds, it returns true.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":428447,"byte_end":428485,"line_start":354,"line_end":354,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":430244,"byte_end":430253,"line_start":404,"line_end":404,"column_start":12,"column_end":21},"name":"cross_add","qualname":"<Literals>::cross_add","value":"fn (&mut self, bytes: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the bytes given.","sig":null,"attributes":[{"value":"/ Extends each literal in this set with the bytes given.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":429817,"byte_end":429875,"line_start":396,"line_end":396,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":429880,"byte_end":429883,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ If the set is empty, then the given literal is added to the set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":429888,"byte_end":429956,"line_start":398,"line_end":398,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":429961,"byte_end":429964,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ If adding any number of bytes to all members of this set causes a limit","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":429969,"byte_end":430044,"line_start":400,"line_end":400,"column_start":5,"column_end":80}},{"value":"/ to be exceeded, then no bytes are added and false is returned. If a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":430049,"byte_end":430120,"line_start":401,"line_end":401,"column_start":5,"column_end":76}},{"value":"/ prefix of `bytes` can be fit into this set, then it is used and all","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":430125,"byte_end":430196,"line_start":402,"line_end":402,"column_start":5,"column_end":76}},{"value":"/ resulting literals are cut.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":430201,"byte_end":430232,"line_start":403,"line_end":403,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":431508,"byte_end":431511,"line_start":442,"line_end":442,"column_start":12,"column_end":15},"name":"add","qualname":"<Literals>::add","value":"fn (&mut self, lit: Literal) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds the given literal to this set.","sig":null,"attributes":[{"value":"/ Adds the given literal to this set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":431359,"byte_end":431398,"line_start":438,"line_end":438,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":431403,"byte_end":431406,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ Returns false if adding this literal would cause the class to be too","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":431411,"byte_end":431483,"line_start":440,"line_end":440,"column_start":5,"column_end":77}},{"value":"/ big.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":431488,"byte_end":431496,"line_start":441,"line_end":441,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":431849,"byte_end":431863,"line_start":453,"line_end":453,"column_start":12,"column_end":26},"name":"add_char_class","qualname":"<Literals>::add_char_class","value":"fn (&mut self, cls: &hir::ClassUnicode) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the character class given.","sig":null,"attributes":[{"value":"/ Extends each literal in this set with the character class given.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":431696,"byte_end":431764,"line_start":450,"line_end":450,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":431769,"byte_end":431772,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Returns false if the character class was too big to add.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":431777,"byte_end":431837,"line_start":452,"line_end":452,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":433291,"byte_end":433305,"line_start":498,"line_end":498,"column_start":12,"column_end":26},"name":"add_byte_class","qualname":"<Literals>::add_byte_class","value":"fn (&mut self, cls: &hir::ClassBytes) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the byte class given.","sig":null,"attributes":[{"value":"/ Extends each literal in this set with the byte class given.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":433148,"byte_end":433211,"line_start":495,"line_end":495,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":433216,"byte_end":433219,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ Returns false if the byte class was too big to add.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":433224,"byte_end":433279,"line_start":497,"line_end":497,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":434001,"byte_end":434004,"line_start":520,"line_end":520,"column_start":12,"column_end":15},"name":"cut","qualname":"<Literals>::cut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cuts every member of this set. When a member is cut, it can never\n be extended.\n","sig":null,"attributes":[{"value":"/ Cuts every member of this set. When a member is cut, it can never","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":433899,"byte_end":433968,"line_start":518,"line_end":518,"column_start":5,"column_end":74}},{"value":"/ be extended.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":433973,"byte_end":433989,"line_start":519,"line_end":519,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":434144,"byte_end":434151,"line_start":527,"line_end":527,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Literals>::reverse","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reverses all members in place.\n","sig":null,"attributes":[{"value":"/ Reverses all members in place.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":434098,"byte_end":434132,"line_start":526,"line_end":526,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":434296,"byte_end":434301,"line_start":534,"line_end":534,"column_start":12,"column_end":17},"name":"clear","qualname":"<Literals>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears this set of all members.\n","sig":null,"attributes":[{"value":"/ Clears this set of all members.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":434249,"byte_end":434284,"line_start":533,"line_end":533,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":444698,"byte_end":444701,"line_start":852,"line_end":852,"column_start":12,"column_end":15},"name":"new","qualname":"<Literal>::new","value":"fn (bytes: Vec<u8>) -> Literal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new complete literal with the bytes given.\n","sig":null,"attributes":[{"value":"/ Returns a new complete literal with the bytes given.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":444630,"byte_end":444686,"line_start":851,"line_end":851,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":444836,"byte_end":444841,"line_start":857,"line_end":857,"column_start":12,"column_end":17},"name":"empty","qualname":"<Literal>::empty","value":"fn () -> Literal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new complete empty literal.\n","sig":null,"attributes":[{"value":"/ Returns a new complete empty literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":444783,"byte_end":444824,"line_start":856,"line_end":856,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":444965,"byte_end":444971,"line_start":862,"line_end":862,"column_start":12,"column_end":18},"name":"is_cut","qualname":"<Literal>::is_cut","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this literal was \"cut.\"\n","sig":null,"attributes":[{"value":"/ Returns true if this literal was \"cut.\"","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":444910,"byte_end":444953,"line_start":861,"line_end":861,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445051,"byte_end":445054,"line_start":867,"line_end":867,"column_start":12,"column_end":15},"name":"cut","qualname":"<Literal>::cut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cuts this literal.\n","sig":null,"attributes":[{"value":"/ Cuts this literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445017,"byte_end":445039,"line_start":866,"line_end":866,"column_start":5,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":626},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"print","qualname":"::hir::print","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":635},{"krate":0,"index":2686},{"krate":0,"index":2690},{"krate":0,"index":2688},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":641},{"krate":0,"index":2696},{"krate":0,"index":2701},{"krate":0,"index":645},{"krate":0,"index":654}],"decl_id":null,"docs":"This module provides a regular expression printer for `Hir`.\n","sig":null,"attributes":[{"value":"!\nThis module provides a regular expression printer for `Hir`.\n*/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":471758,"byte_end":471825,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2692},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473317,"byte_end":473324,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"Printer","qualname":"::hir::print::Printer","value":"Printer {  }","parent":null,"children":[{"krate":0,"index":2693}],"decl_id":null,"docs":" A printer for a regular expression's high-level intermediate\n representation.","sig":null,"attributes":[{"value":"/ A printer for a regular expression's high-level intermediate","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472427,"byte_end":472491,"line_start":36,"line_end":36,"column_start":1,"column_end":65}},{"value":"/ representation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472492,"byte_end":472511,"line_start":37,"line_end":37,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472512,"byte_end":472515,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ A printer converts a high-level intermediate representation (HIR) to a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472516,"byte_end":472590,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ regular expression pattern string. This particular printer uses constant","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472591,"byte_end":472667,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ stack space and heap space proportional to the size of the HIR.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472668,"byte_end":472735,"line_start":41,"line_end":41,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472736,"byte_end":472739,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Since this printer is only using the HIR, the pattern it prints will likely","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472740,"byte_end":472819,"line_start":43,"line_end":43,"column_start":1,"column_end":80}},{"value":"/ not resemble the original pattern at all. For example, a pattern like","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472820,"byte_end":472893,"line_start":44,"line_end":44,"column_start":1,"column_end":74}},{"value":"/ `\\pL` will have its entire class written out.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472894,"byte_end":472943,"line_start":45,"line_end":45,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472944,"byte_end":472947,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The purpose of this printer is to provide a means to mutate an HIR and then","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472948,"byte_end":473027,"line_start":47,"line_end":47,"column_start":1,"column_end":80}},{"value":"/ build a regular expression from the result of that mutation. (A regex","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473028,"byte_end":473101,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ library could provide a constructor from this HIR explicitly, but that","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473102,"byte_end":473176,"line_start":49,"line_end":49,"column_start":1,"column_end":75}},{"value":"/ creates an unnecessary public coupling between the regex library and this","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473177,"byte_end":473254,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/ specific HIR representation.)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473255,"byte_end":473288,"line_start":51,"line_end":51,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473401,"byte_end":473404,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<Printer>::new","value":"fn () -> Printer","parent":null,"children":[],"decl_id":null,"docs":" Create a new printer.\n","sig":null,"attributes":[{"value":"/ Create a new printer.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473364,"byte_end":473389,"line_start":58,"line_end":58,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473751,"byte_end":473756,"line_start":67,"line_end":67,"column_start":12,"column_end":17},"name":"print","qualname":"<Printer>::print","value":"fn <W> (&mut self, hir: &Hir, wtr: W) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Print the given `Ast` to the given writer. The writer must implement\n `fmt::Write`. Typical implementations of `fmt::Write` that can be used\n here are a `fmt::Formatter` (which is available in `fmt::Display`\n implementations) or a `&mut String`.\n","sig":null,"attributes":[{"value":"/ Print the given `Ast` to the given writer. The writer must implement","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473469,"byte_end":473541,"line_start":63,"line_end":63,"column_start":5,"column_end":77}},{"value":"/ `fmt::Write`. Typical implementations of `fmt::Write` that can be used","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473546,"byte_end":473620,"line_start":64,"line_end":64,"column_start":5,"column_end":79}},{"value":"/ here are a `fmt::Formatter` (which is available in `fmt::Display`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473625,"byte_end":473694,"line_start":65,"line_end":65,"column_start":5,"column_end":74}},{"value":"/ implementations) or a `&mut String`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473699,"byte_end":473739,"line_start":66,"line_end":66,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":660},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"translate","qualname":"::hir::translate","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":670},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":2705},{"krate":0,"index":2710},{"krate":0,"index":2708},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":2712},{"krate":0,"index":2718},{"krate":0,"index":2716},{"krate":0,"index":691},{"krate":0,"index":2720},{"krate":0,"index":2738},{"krate":0,"index":2736},{"krate":0,"index":694},{"krate":0,"index":699},{"krate":0,"index":2740},{"krate":0,"index":2749},{"krate":0,"index":2745},{"krate":0,"index":717},{"krate":0,"index":2753},{"krate":0,"index":2764},{"krate":0,"index":2763},{"krate":0,"index":2761},{"krate":0,"index":2759},{"krate":0,"index":749},{"krate":0,"index":757},{"krate":0,"index":759}],"decl_id":null,"docs":"Defines a translator that converts an `Ast` to an `Hir`.\n","sig":null,"attributes":[{"value":"!\nDefines a translator that converts an `Ast` to an `Hir`.\n*/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":483440,"byte_end":483503,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2705},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":483800,"byte_end":483817,"line_start":16,"line_end":16,"column_start":12,"column_end":29},"name":"TranslatorBuilder","qualname":"::hir::translate::TranslatorBuilder","value":"TranslatorBuilder {  }","parent":null,"children":[{"krate":0,"index":2706},{"krate":0,"index":2707}],"decl_id":null,"docs":" A builder for constructing an AST->HIR translator.\n","sig":null,"attributes":[{"value":"/ A builder for constructing an AST->HIR translator.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":483710,"byte_end":483764,"line_start":14,"line_end":14,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484097,"byte_end":484100,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<TranslatorBuilder>::new","value":"fn () -> TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new translator builder with a default c onfiguration.\n","sig":null,"attributes":[{"value":"/ Create a new translator builder with a default c onfiguration.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484019,"byte_end":484085,"line_start":28,"line_end":28,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484318,"byte_end":484323,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"build","qualname":"<TranslatorBuilder>::build","value":"fn (&self) -> Translator","parent":null,"children":[],"decl_id":null,"docs":" Build a translator using the current configuration.\n","sig":null,"attributes":[{"value":"/ Build a translator using the current configuration.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484251,"byte_end":484306,"line_start":36,"line_end":36,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":485186,"byte_end":485204,"line_start":56,"line_end":56,"column_start":12,"column_end":30},"name":"allow_invalid_utf8","qualname":"<TranslatorBuilder>::allow_invalid_utf8","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" When enabled, translation will permit the construction of a regular\n expression that may match invalid UTF-8.","sig":null,"attributes":[{"value":"/ When enabled, translation will permit the construction of a regular","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484529,"byte_end":484600,"line_start":45,"line_end":45,"column_start":5,"column_end":76}},{"value":"/ expression that may match invalid UTF-8.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484605,"byte_end":484649,"line_start":46,"line_end":46,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484654,"byte_end":484657,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ When disabled (the default), the translator is guaranteed to produce","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484662,"byte_end":484734,"line_start":48,"line_end":48,"column_start":5,"column_end":77}},{"value":"/ an expression that will only ever match valid UTF-8 (otherwise, the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484739,"byte_end":484810,"line_start":49,"line_end":49,"column_start":5,"column_end":76}},{"value":"/ translator will return an error).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484815,"byte_end":484852,"line_start":50,"line_end":50,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484857,"byte_end":484860,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Perhaps surprisingly, when invalid UTF-8 isn't allowed, a negated ASCII","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484865,"byte_end":484940,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"/ word boundary (uttered as `(?-u:\\B)` in the concrete syntax) will cause","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":484945,"byte_end":485020,"line_start":53,"line_end":53,"column_start":5,"column_end":80}},{"value":"/ the parser to return an error. Namely, a negated ASCII word boundary","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":485025,"byte_end":485097,"line_start":54,"line_end":54,"column_start":5,"column_end":77}},{"value":"/ can result in matching positions that aren't valid UTF-8 boundaries.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":485102,"byte_end":485174,"line_start":55,"line_end":55,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":485395,"byte_end":485411,"line_start":62,"line_end":62,"column_start":12,"column_end":28},"name":"case_insensitive","qualname":"<TranslatorBuilder>::case_insensitive","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the case insensitive flag (`i`) by default.\n","sig":null,"attributes":[{"value":"/ Enable or disable the case insensitive flag (`i`) by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":485318,"byte_end":485383,"line_start":61,"line_end":61,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":485641,"byte_end":485651,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"multi_line","qualname":"<TranslatorBuilder>::multi_line","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the multi-line matching flag (`m`) by default.\n","sig":null,"attributes":[{"value":"/ Enable or disable the multi-line matching flag (`m`) by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":485561,"byte_end":485629,"line_start":67,"line_end":67,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":485891,"byte_end":485911,"line_start":75,"line_end":75,"column_start":12,"column_end":32},"name":"dot_matches_new_line","qualname":"<TranslatorBuilder>::dot_matches_new_line","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"dot matches any character\" flag (`s`) by\n default.\n","sig":null,"attributes":[{"value":"/ Enable or disable the \"dot matches any character\" flag (`s`) by","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":485795,"byte_end":485862,"line_start":73,"line_end":73,"column_start":5,"column_end":72}},{"value":"/ default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":485867,"byte_end":485879,"line_start":74,"line_end":74,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486161,"byte_end":486171,"line_start":84,"line_end":84,"column_start":12,"column_end":22},"name":"swap_greed","qualname":"<TranslatorBuilder>::swap_greed","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"swap greed\" flag (`U`) by default.\n","sig":null,"attributes":[{"value":"/ Enable or disable the \"swap greed\" flag (`U`) by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486088,"byte_end":486149,"line_start":83,"line_end":83,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486383,"byte_end":486390,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"unicode","qualname":"<TranslatorBuilder>::unicode","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the Unicode flag (`u`) by default.\n","sig":null,"attributes":[{"value":"/ Enable or disable the Unicode flag (`u`) by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486315,"byte_end":486371,"line_start":89,"line_end":89,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2712},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486888,"byte_end":486898,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"Translator","qualname":"::hir::translate::Translator","value":"Translator {  }","parent":null,"children":[{"krate":0,"index":2713},{"krate":0,"index":2714},{"krate":0,"index":2715}],"decl_id":null,"docs":" A translator maps abstract syntax to a high level intermediate\n representation.","sig":null,"attributes":[{"value":"/ A translator maps abstract syntax to a high level intermediate","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486530,"byte_end":486596,"line_start":96,"line_end":96,"column_start":1,"column_end":67}},{"value":"/ representation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486597,"byte_end":486616,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486617,"byte_end":486620,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ A translator may be benefit from reuse. That is, a translator can translate","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486621,"byte_end":486700,"line_start":99,"line_end":99,"column_start":1,"column_end":80}},{"value":"/ many abstract syntax trees.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486701,"byte_end":486732,"line_start":100,"line_end":100,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486733,"byte_end":486736,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ A `Translator` can be configured in more detail via a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486737,"byte_end":486794,"line_start":102,"line_end":102,"column_start":1,"column_end":58}},{"value":"/ [`TranslatorBuilder`](struct.TranslatorBuilder.html).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":486795,"byte_end":486852,"line_start":103,"line_end":103,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487240,"byte_end":487243,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"new","qualname":"<Translator>::new","value":"fn () -> Translator","parent":null,"children":[],"decl_id":null,"docs":" Create a new translator using the default configuration.\n","sig":null,"attributes":[{"value":"/ Create a new translator using the default configuration.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487168,"byte_end":487228,"line_start":115,"line_end":115,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487770,"byte_end":487779,"line_start":129,"line_end":129,"column_start":12,"column_end":21},"name":"translate","qualname":"<Translator>::translate","value":"fn (&mut self, pattern: &str, ast: &Ast) -> Result<Hir>","parent":null,"children":[],"decl_id":null,"docs":" Translate the given abstract syntax tree (AST) into a high level\n intermediate representation (HIR).","sig":null,"attributes":[{"value":"/ Translate the given abstract syntax tree (AST) into a high level","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487314,"byte_end":487382,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/ intermediate representation (HIR).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487387,"byte_end":487425,"line_start":121,"line_end":121,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487430,"byte_end":487433,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ If there was a problem doing the translation, then an HIR-specific","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487438,"byte_end":487508,"line_start":123,"line_end":123,"column_start":5,"column_end":75}},{"value":"/ error is returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487513,"byte_end":487535,"line_start":124,"line_end":124,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487540,"byte_end":487543,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ The original pattern string used to produce the `Ast` *must* also be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487548,"byte_end":487620,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ provided. The translator does not use the pattern string during any","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487625,"byte_end":487696,"line_start":127,"line_end":127,"column_start":5,"column_end":76}},{"value":"/ correct translation, but is used for error reporting.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487701,"byte_end":487758,"line_start":128,"line_end":128,"column_start":5,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":766},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591458,"byte_end":591465,"line_start":13,"line_end":13,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::hir::visitor::Visitor","value":"Visitor","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773}],"decl_id":null,"docs":" A trait for visiting the high-level IR (HIR) in depth first order.","sig":null,"attributes":[{"value":"/ A trait for visiting the high-level IR (HIR) in depth first order.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":590858,"byte_end":590928,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":590929,"byte_end":590932,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The principle aim of this trait is to enable callers to perform case","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":590933,"byte_end":591005,"line_start":5,"line_end":5,"column_start":1,"column_end":73}},{"value":"/ analysis on a high-level intermediate representation of a regular","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591006,"byte_end":591075,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/ expression without necessarily using recursion. In particular, this permits","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591076,"byte_end":591155,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ callers to do case analysis with constant stack usage, which can be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591156,"byte_end":591227,"line_start":8,"line_end":8,"column_start":1,"column_end":72}},{"value":"/ important since the size of an HIR may be proportional to end user input.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591228,"byte_end":591305,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591306,"byte_end":591309,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Typical usage of this trait involves providing an implementation and then","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591310,"byte_end":591387,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ running it using the [`visit`](fn.visit.html) function.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591388,"byte_end":591447,"line_start":12,"line_end":12,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":767},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591516,"byte_end":591522,"line_start":15,"line_end":15,"column_start":10,"column_end":16},"name":"Output","qualname":"::hir::visitor::Visitor::Output","value":"type Output;","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" The result of visiting an HIR.\n","sig":null,"attributes":[{"value":"/ The result of visiting an HIR.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591472,"byte_end":591506,"line_start":14,"line_end":14,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":768},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591585,"byte_end":591588,"line_start":17,"line_end":17,"column_start":10,"column_end":13},"name":"Err","qualname":"::hir::visitor::Visitor::Err","value":"type Err;","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" An error that visiting an HIR might return.\n","sig":null,"attributes":[{"value":"/ An error that visiting an HIR might return.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591528,"byte_end":591575,"line_start":16,"line_end":16,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591733,"byte_end":591739,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"finish","qualname":"::hir::visitor::Visitor::finish","value":"fn (self) -> Result<Self::Output, Self::Err>","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" All implementors of `Visitor` must provide a `finish` method, which\n yields the result of visiting the HIR or an error.\n","sig":null,"attributes":[{"value":"/ All implementors of `Visitor` must provide a `finish` method, which","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591595,"byte_end":591666,"line_start":19,"line_end":19,"column_start":5,"column_end":76}},{"value":"/ yields the result of visiting the HIR or an error.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591671,"byte_end":591725,"line_start":20,"line_end":20,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591859,"byte_end":591864,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"start","qualname":"::hir::visitor::Visitor::start","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" This method is called before beginning traversal of the HIR.\n","sig":null,"attributes":[{"value":"/ This method is called before beginning traversal of the HIR.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591787,"byte_end":591851,"line_start":23,"line_end":23,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591979,"byte_end":591988,"line_start":28,"line_end":28,"column_start":8,"column_end":17},"name":"visit_pre","qualname":"::hir::visitor::Visitor::visit_pre","value":"fn (&mut self, _hir: &Hir) -> Result<(), Self::Err>","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" This method is called on an `Hir` before descending into child `Hir`\n nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on an `Hir` before descending into child `Hir`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591884,"byte_end":591956,"line_start":26,"line_end":26,"column_start":5,"column_end":77}},{"value":"/ nodes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":591961,"byte_end":591971,"line_start":27,"line_end":27,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592165,"byte_end":592175,"line_start":34,"line_end":34,"column_start":8,"column_end":18},"name":"visit_post","qualname":"::hir::visitor::Visitor::visit_post","value":"fn (&mut self, _hir: &Hir) -> Result<(), Self::Err>","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" This method is called on an `Hir` after descending all of its child\n `Hir` nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on an `Hir` after descending all of its child","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592065,"byte_end":592136,"line_start":32,"line_end":32,"column_start":5,"column_end":76}},{"value":"/ `Hir` nodes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592141,"byte_end":592157,"line_start":33,"line_end":33,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592324,"byte_end":592344,"line_start":39,"line_end":39,"column_start":8,"column_end":28},"name":"visit_alternation_in","qualname":"::hir::visitor::Visitor::visit_alternation_in","value":"fn (&mut self) -> Result<(), Self::Err>","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" This method is called between child nodes of an alternation.\n","sig":null,"attributes":[{"value":"/ This method is called between child nodes of an alternation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592252,"byte_end":592316,"line_start":38,"line_end":38,"column_start":5,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":774},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":593154,"byte_end":593159,"line_start":59,"line_end":59,"column_start":8,"column_end":13},"name":"visit","qualname":"::hir::visitor::visit","value":"fn <V> (hir: &Hir, visitor: V) -> Result<V::Output, V::Err>","parent":null,"children":[],"decl_id":null,"docs":" Executes an implementation of `Visitor` in constant stack space.","sig":null,"attributes":[{"value":"/ Executes an implementation of `Visitor` in constant stack space.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592407,"byte_end":592475,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592476,"byte_end":592479,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ This function will visit every node in the given `Hir` while calling","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592480,"byte_end":592552,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/ appropriate methods provided by the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592553,"byte_end":592592,"line_start":47,"line_end":47,"column_start":1,"column_end":40}},{"value":"/ [`Visitor`](trait.Visitor.html) trait.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592593,"byte_end":592635,"line_start":48,"line_end":48,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592636,"byte_end":592639,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ The primary use case for this method is when one wants to perform case","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592640,"byte_end":592714,"line_start":50,"line_end":50,"column_start":1,"column_end":75}},{"value":"/ analysis over an `Hir` without using a stack size proportional to the depth","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592715,"byte_end":592794,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ of the `Hir`. Namely, this method will instead use constant stack space,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592795,"byte_end":592871,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ but will use heap space proportional to the size of the `Hir`. This may be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592872,"byte_end":592950,"line_start":53,"line_end":53,"column_start":1,"column_end":79}},{"value":"/ desirable in cases where the size of `Hir` is proportional to end user","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":592951,"byte_end":593025,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/ input.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":593026,"byte_end":593036,"line_start":55,"line_end":55,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":593037,"byte_end":593040,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ If the visitor returns an error at any point, then visiting is stopped and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":593041,"byte_end":593119,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/ the error is returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":593120,"byte_end":593146,"line_start":58,"line_end":58,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2766},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":314735,"byte_end":314740,"line_start":26,"line_end":26,"column_start":12,"column_end":17},"name":"Error","qualname":"::hir::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":2767},{"krate":0,"index":2768},{"krate":0,"index":2769}],"decl_id":null,"docs":" An error that can occur while translating an `Ast` to a `Hir`.\n","sig":null,"attributes":[{"value":"/ An error that can occur while translating an `Ast` to a `Hir`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":314618,"byte_end":314684,"line_start":24,"line_end":24,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315110,"byte_end":315114,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the type of this error.\n","sig":null,"attributes":[{"value":"/ Return the type of this error.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315064,"byte_end":315098,"line_start":37,"line_end":37,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315328,"byte_end":315335,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"pattern","qualname":"<Error>::pattern","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The original pattern string in which this error occurred.","sig":null,"attributes":[{"value":"/ The original pattern string in which this error occurred.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315168,"byte_end":315229,"line_start":42,"line_end":42,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315234,"byte_end":315237,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Every span reported by this error is reported in terms of this string.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315242,"byte_end":315316,"line_start":44,"line_end":44,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315447,"byte_end":315451,"line_start":50,"line_end":50,"column_start":12,"column_end":16},"name":"span","qualname":"<Error>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span at which this error occurred.\n","sig":null,"attributes":[{"value":"/ Return the span at which this error occurred.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315386,"byte_end":315435,"line_start":49,"line_end":49,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2782},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315775,"byte_end":315792,"line_start":60,"line_end":60,"column_start":5,"column_end":22},"name":"UnicodeNotAllowed","qualname":"::hir::ErrorKind::UnicodeNotAllowed","value":"ErrorKind::UnicodeNotAllowed","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" This error occurs when a Unicode feature is used when Unicode\n support is disabled. For example `(?-u:\\pL)` would trigger this error.\n","sig":null,"attributes":[{"value":"/ This error occurs when a Unicode feature is used when Unicode","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315626,"byte_end":315691,"line_start":58,"line_end":58,"column_start":5,"column_end":70}},{"value":"/ support is disabled. For example `(?-u:\\pL)` would trigger this error.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315696,"byte_end":315770,"line_start":59,"line_end":59,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2784},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315948,"byte_end":315959,"line_start":63,"line_end":63,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::hir::ErrorKind::InvalidUtf8","value":"ErrorKind::InvalidUtf8","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" This error occurs when translating a pattern that could match a byte\n sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.\n","sig":null,"attributes":[{"value":"/ This error occurs when translating a pattern that could match a byte","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315798,"byte_end":315870,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315875,"byte_end":315943,"line_start":62,"line_end":62,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2786},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316056,"byte_end":316079,"line_start":66,"line_end":66,"column_start":5,"column_end":28},"name":"UnicodePropertyNotFound","qualname":"::hir::ErrorKind::UnicodePropertyNotFound","value":"ErrorKind::UnicodePropertyNotFound","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" This occurs when an unrecognized Unicode property name could not\n be found.\n","sig":null,"attributes":[{"value":"/ This occurs when an unrecognized Unicode property name could not","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315965,"byte_end":316033,"line_start":64,"line_end":64,"column_start":5,"column_end":73}},{"value":"/ be found.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316038,"byte_end":316051,"line_start":65,"line_end":65,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2788},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316177,"byte_end":316205,"line_start":69,"line_end":69,"column_start":5,"column_end":33},"name":"UnicodePropertyValueNotFound","qualname":"::hir::ErrorKind::UnicodePropertyValueNotFound","value":"ErrorKind::UnicodePropertyValueNotFound","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" This occurs when an unrecognized Unicode property value could not\n be found.\n","sig":null,"attributes":[{"value":"/ This occurs when an unrecognized Unicode property value could not","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316085,"byte_end":316154,"line_start":67,"line_end":67,"column_start":5,"column_end":74}},{"value":"/ be found.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316159,"byte_end":316172,"line_start":68,"line_end":68,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2790},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316399,"byte_end":316423,"line_start":73,"line_end":73,"column_start":5,"column_end":29},"name":"UnicodePerlClassNotFound","qualname":"::hir::ErrorKind::UnicodePerlClassNotFound","value":"ErrorKind::UnicodePerlClassNotFound","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" This occurs when a Unicode-aware Perl character class (`\\w`, `\\s` or\n `\\d`) could not be found. This can occur when the `unicode-perl`\n crate feature is not enabled.\n","sig":null,"attributes":[{"value":"/ This occurs when a Unicode-aware Perl character class (`\\w`, `\\s` or","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316211,"byte_end":316283,"line_start":70,"line_end":70,"column_start":5,"column_end":77}},{"value":"/ `\\d`) could not be found. This can occur when the `unicode-perl`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316288,"byte_end":316356,"line_start":71,"line_end":71,"column_start":5,"column_end":73}},{"value":"/ crate feature is not enabled.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316361,"byte_end":316394,"line_start":72,"line_end":72,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2792},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316598,"byte_end":316620,"line_start":77,"line_end":77,"column_start":5,"column_end":27},"name":"UnicodeCaseUnavailable","qualname":"::hir::ErrorKind::UnicodeCaseUnavailable","value":"ErrorKind::UnicodeCaseUnavailable","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" This occurs when the Unicode simple case mapping tables are not\n available, and the regular expression required Unicode aware case\n insensitivity.\n","sig":null,"attributes":[{"value":"/ This occurs when the Unicode simple case mapping tables are not","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316429,"byte_end":316496,"line_start":74,"line_end":74,"column_start":5,"column_end":72}},{"value":"/ available, and the regular expression required Unicode aware case","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316501,"byte_end":316570,"line_start":75,"line_end":75,"column_start":5,"column_end":74}},{"value":"/ insensitivity.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316575,"byte_end":316593,"line_start":76,"line_end":76,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2794},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316828,"byte_end":316848,"line_start":83,"line_end":83,"column_start":5,"column_end":25},"name":"EmptyClassNotAllowed","qualname":"::hir::ErrorKind::EmptyClassNotAllowed","value":"ErrorKind::EmptyClassNotAllowed","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" This occurs when the translator attempts to construct a character class\n that is empty.","sig":null,"attributes":[{"value":"/ This occurs when the translator attempts to construct a character class","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316626,"byte_end":316701,"line_start":78,"line_end":78,"column_start":5,"column_end":80}},{"value":"/ that is empty.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316706,"byte_end":316724,"line_start":79,"line_end":79,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316729,"byte_end":316732,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ Note that this restriction in the translator may be removed in the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316737,"byte_end":316807,"line_start":81,"line_end":81,"column_start":5,"column_end":75}},{"value":"/ future.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316812,"byte_end":316823,"line_start":82,"line_end":82,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2796},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":317128,"byte_end":317143,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::hir::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316854,"byte_end":316908,"line_start":84,"line_end":84,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316913,"byte_end":316916,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316921,"byte_end":316991,"line_start":86,"line_end":86,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":316996,"byte_end":317068,"line_start":87,"line_end":87,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":317073,"byte_end":317104,"line_start":88,"line_end":88,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":2781},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315610,"byte_end":315619,"line_start":57,"line_end":57,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::hir::ErrorKind","value":"ErrorKind::{UnicodeNotAllowed, InvalidUtf8, UnicodePropertyNotFound, UnicodePropertyValueNotFound, UnicodePerlClassNotFound, UnicodeCaseUnavailable, EmptyClassNotAllowed, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":2782},{"krate":0,"index":2784},{"krate":0,"index":2786},{"krate":0,"index":2788},{"krate":0,"index":2790},{"krate":0,"index":2792},{"krate":0,"index":2794},{"krate":0,"index":2796}],"decl_id":null,"docs":" The type of an error that occurred while building an `Hir`.\n","sig":null,"attributes":[{"value":"/ The type of an error that occurred while building an `Hir`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315498,"byte_end":315561,"line_start":55,"line_end":55,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":2808},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320762,"byte_end":320765,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"Hir","qualname":"::hir::Hir","value":"Hir {  }","parent":null,"children":[{"krate":0,"index":2809},{"krate":0,"index":2810}],"decl_id":null,"docs":" A high-level intermediate representation (HIR) for a regular expression.","sig":null,"attributes":[{"value":"/ A high-level intermediate representation (HIR) for a regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":318740,"byte_end":318816,"line_start":139,"line_end":139,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":318817,"byte_end":318820,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ The HIR of a regular expression represents an intermediate step between its","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":318821,"byte_end":318900,"line_start":141,"line_end":141,"column_start":1,"column_end":80}},{"value":"/ abstract syntax (a structured description of the concrete syntax) and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":318901,"byte_end":318974,"line_start":142,"line_end":142,"column_start":1,"column_end":74}},{"value":"/ compiled byte codes. The purpose of HIR is to make regular expressions","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":318975,"byte_end":319049,"line_start":143,"line_end":143,"column_start":1,"column_end":75}},{"value":"/ easier to analyze. In particular, the AST is much more complex than the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319050,"byte_end":319125,"line_start":144,"line_end":144,"column_start":1,"column_end":76}},{"value":"/ HIR. For example, while an AST supports arbitrarily nested character","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319126,"byte_end":319198,"line_start":145,"line_end":145,"column_start":1,"column_end":73}},{"value":"/ classes, the HIR will flatten all nested classes into a single set. The HIR","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319199,"byte_end":319278,"line_start":146,"line_end":146,"column_start":1,"column_end":80}},{"value":"/ will also \"compile away\" every flag present in the concrete syntax. For","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319279,"byte_end":319354,"line_start":147,"line_end":147,"column_start":1,"column_end":76}},{"value":"/ example, users of HIR expressions never need to worry about case folding;","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319355,"byte_end":319432,"line_start":148,"line_end":148,"column_start":1,"column_end":78}},{"value":"/ it is handled automatically by the translator (e.g., by translating `(?i)A`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319433,"byte_end":319512,"line_start":149,"line_end":149,"column_start":1,"column_end":80}},{"value":"/ to `[aA]`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319513,"byte_end":319528,"line_start":150,"line_end":150,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319529,"byte_end":319532,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ If the HIR was produced by a translator that disallows invalid UTF-8, then","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319533,"byte_end":319611,"line_start":152,"line_end":152,"column_start":1,"column_end":79}},{"value":"/ the HIR is guaranteed to match UTF-8 exclusively.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319612,"byte_end":319665,"line_start":153,"line_end":153,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319666,"byte_end":319669,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This type defines its own destructor that uses constant stack space and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319670,"byte_end":319745,"line_start":155,"line_end":155,"column_start":1,"column_end":76}},{"value":"/ heap space proportional to the size of the HIR.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319746,"byte_end":319797,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319798,"byte_end":319801,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ The specific type of an HIR expression can be accessed via its `kind`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319802,"byte_end":319875,"line_start":158,"line_end":158,"column_start":1,"column_end":74}},{"value":"/ or `into_kind` methods. This extra level of indirection exists for two","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319876,"byte_end":319950,"line_start":159,"line_end":159,"column_start":1,"column_end":75}},{"value":"/ reasons:","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319951,"byte_end":319963,"line_start":160,"line_end":160,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319964,"byte_end":319967,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ 1. Construction of an HIR expression *must* use the constructor methods","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":319968,"byte_end":320043,"line_start":162,"line_end":162,"column_start":1,"column_end":76}},{"value":"/    on this `Hir` type instead of building the `HirKind` values directly.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320044,"byte_end":320120,"line_start":163,"line_end":163,"column_start":1,"column_end":77}},{"value":"/    This permits construction to enforce invariants like \"concatenations","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320121,"byte_end":320196,"line_start":164,"line_end":164,"column_start":1,"column_end":76}},{"value":"/    always consist of two or more sub-expressions.\"","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320197,"byte_end":320251,"line_start":165,"line_end":165,"column_start":1,"column_end":55}},{"value":"/ 2. Every HIR expression contains attributes that are defined inductively,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320252,"byte_end":320329,"line_start":166,"line_end":166,"column_start":1,"column_end":78}},{"value":"/    and can be computed cheaply during the construction process. For","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320330,"byte_end":320401,"line_start":167,"line_end":167,"column_start":1,"column_end":72}},{"value":"/    example, one such attribute is whether the expression must match at the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320402,"byte_end":320480,"line_start":168,"line_end":168,"column_start":1,"column_end":79}},{"value":"/    beginning of the text.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320481,"byte_end":320510,"line_start":169,"line_end":169,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320511,"byte_end":320514,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ Also, an `Hir`'s `fmt::Display` implementation prints an HIR as a regular","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320515,"byte_end":320592,"line_start":171,"line_end":171,"column_start":1,"column_end":78}},{"value":"/ expression pattern string, and uses constant stack space and heap space","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320593,"byte_end":320668,"line_start":172,"line_end":172,"column_start":1,"column_end":76}},{"value":"/ proportional to the size of the `Hir`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320669,"byte_end":320711,"line_start":173,"line_end":173,"column_start":1,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2823},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321119,"byte_end":321124,"line_start":187,"line_end":187,"column_start":5,"column_end":10},"name":"Empty","qualname":"::hir::HirKind::Empty","value":"HirKind::Empty","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" The empty regular expression, which matches everything, including the\n empty string.\n","sig":null,"attributes":[{"value":"/ The empty regular expression, which matches everything, including the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321019,"byte_end":321092,"line_start":185,"line_end":185,"column_start":5,"column_end":78}},{"value":"/ empty string.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321097,"byte_end":321114,"line_start":186,"line_end":186,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2825},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321202,"byte_end":321209,"line_start":189,"line_end":189,"column_start":5,"column_end":12},"name":"Literal","qualname":"::hir::HirKind::Literal","value":"HirKind::Literal(Literal)","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" A single literal character that matches exactly this character.\n","sig":null,"attributes":[{"value":"/ A single literal character that matches exactly this character.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321130,"byte_end":321197,"line_start":188,"line_end":188,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2828},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321410,"byte_end":321415,"line_start":193,"line_end":193,"column_start":5,"column_end":10},"name":"Class","qualname":"::hir::HirKind::Class","value":"HirKind::Class(Class)","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" A single character class that matches any of the characters in the\n class. A class can either consist of Unicode scalar values as\n characters, or it can use bytes.\n","sig":null,"attributes":[{"value":"/ A single character class that matches any of the characters in the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321224,"byte_end":321294,"line_start":190,"line_end":190,"column_start":5,"column_end":75}},{"value":"/ class. A class can either consist of Unicode scalar values as","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321299,"byte_end":321364,"line_start":191,"line_end":191,"column_start":5,"column_end":70}},{"value":"/ characters, or it can use bytes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321369,"byte_end":321405,"line_start":192,"line_end":192,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2831},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321507,"byte_end":321513,"line_start":195,"line_end":195,"column_start":5,"column_end":11},"name":"Anchor","qualname":"::hir::HirKind::Anchor","value":"HirKind::Anchor(Anchor)","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" An anchor assertion. An anchor assertion match always has zero length.\n","sig":null,"attributes":[{"value":"/ An anchor assertion. An anchor assertion match always has zero length.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321428,"byte_end":321502,"line_start":194,"line_end":194,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2834},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321665,"byte_end":321677,"line_start":198,"line_end":198,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::hir::HirKind::WordBoundary","value":"HirKind::WordBoundary(WordBoundary)","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" A word boundary assertion, which may or may not be Unicode aware. A\n word boundary assertion match always has zero length.\n","sig":null,"attributes":[{"value":"/ A word boundary assertion, which may or may not be Unicode aware. A","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321527,"byte_end":321598,"line_start":196,"line_end":196,"column_start":5,"column_end":76}},{"value":"/ word boundary assertion match always has zero length.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321603,"byte_end":321660,"line_start":197,"line_end":197,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2837},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321759,"byte_end":321769,"line_start":200,"line_end":200,"column_start":5,"column_end":15},"name":"Repetition","qualname":"::hir::HirKind::Repetition","value":"HirKind::Repetition(Repetition)","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" A repetition operation applied to a child expression.\n","sig":null,"attributes":[{"value":"/ A repetition operation applied to a child expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321697,"byte_end":321754,"line_start":199,"line_end":199,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2840},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321858,"byte_end":321863,"line_start":202,"line_end":202,"column_start":5,"column_end":10},"name":"Group","qualname":"::hir::HirKind::Group","value":"HirKind::Group(Group)","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" A possibly capturing group, which contains a child expression.\n","sig":null,"attributes":[{"value":"/ A possibly capturing group, which contains a child expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321787,"byte_end":321853,"line_start":201,"line_end":201,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2843},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322097,"byte_end":322103,"line_start":208,"line_end":208,"column_start":5,"column_end":11},"name":"Concat","qualname":"::hir::HirKind::Concat","value":"HirKind::Concat(Vec<Hir>)","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" A concatenation of expressions. A concatenation always has at least two\n child expressions.","sig":null,"attributes":[{"value":"/ A concatenation of expressions. A concatenation always has at least two","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321876,"byte_end":321951,"line_start":203,"line_end":203,"column_start":5,"column_end":80}},{"value":"/ child expressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321956,"byte_end":321978,"line_start":204,"line_end":204,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321983,"byte_end":321986,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ A concatenation matches only if each of its child expression matches","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321991,"byte_end":322063,"line_start":206,"line_end":206,"column_start":5,"column_end":77}},{"value":"/ one after the other.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322068,"byte_end":322092,"line_start":207,"line_end":207,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2846},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322388,"byte_end":322399,"line_start":214,"line_end":214,"column_start":5,"column_end":16},"name":"Alternation","qualname":"::hir::HirKind::Alternation","value":"HirKind::Alternation(Vec<Hir>)","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" An alternation of expressions. An alternation always has at least two\n child expressions.","sig":null,"attributes":[{"value":"/ An alternation of expressions. An alternation always has at least two","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322119,"byte_end":322192,"line_start":209,"line_end":209,"column_start":5,"column_end":78}},{"value":"/ child expressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322197,"byte_end":322219,"line_start":210,"line_end":210,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322224,"byte_end":322227,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ An alternation matches only if at least one of its child expression","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322232,"byte_end":322303,"line_start":212,"line_end":212,"column_start":5,"column_end":76}},{"value":"/ matches. If multiple expressions match, then the leftmost is preferred.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322308,"byte_end":322383,"line_start":213,"line_end":213,"column_start":5,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":2822},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":321005,"byte_end":321012,"line_start":184,"line_end":184,"column_start":10,"column_end":17},"name":"HirKind","qualname":"::hir::HirKind","value":"HirKind::{Empty, Literal, Class, Anchor, WordBoundary, Repetition, Group, Concat, Alternation}","parent":null,"children":[{"krate":0,"index":2823},{"krate":0,"index":2825},{"krate":0,"index":2828},{"krate":0,"index":2831},{"krate":0,"index":2834},{"krate":0,"index":2837},{"krate":0,"index":2840},{"krate":0,"index":2843},{"krate":0,"index":2846}],"decl_id":null,"docs":" The kind of an arbitrary `Hir` expression.\n","sig":null,"attributes":[{"value":"/ The kind of an arbitrary `Hir` expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":320910,"byte_end":320956,"line_start":182,"line_end":182,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322492,"byte_end":322496,"line_start":219,"line_end":219,"column_start":12,"column_end":16},"name":"kind","qualname":"<Hir>::kind","value":"fn (&self) -> &HirKind","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying HIR kind.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying HIR kind.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322429,"byte_end":322480,"line_start":218,"line_end":218,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322651,"byte_end":322660,"line_start":225,"line_end":225,"column_start":12,"column_end":21},"name":"into_kind","qualname":"<Hir>::into_kind","value":"fn (mut self) -> HirKind","parent":null,"children":[],"decl_id":null,"docs":" Consumes ownership of this HIR expression and returns its underlying\n `HirKind`.\n","sig":null,"attributes":[{"value":"/ Consumes ownership of this HIR expression and returns its underlying","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322548,"byte_end":322620,"line_start":223,"line_end":223,"column_start":5,"column_end":77}},{"value":"/ `HirKind`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322625,"byte_end":322639,"line_start":224,"line_end":224,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322902,"byte_end":322907,"line_start":233,"line_end":233,"column_start":12,"column_end":17},"name":"empty","qualname":"<Hir>::empty","value":"fn () -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty HIR expression.","sig":null,"attributes":[{"value":"/ Returns an empty HIR expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322770,"byte_end":322806,"line_start":230,"line_end":230,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322811,"byte_end":322814,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ An empty HIR expression always matches, including the empty string.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322819,"byte_end":322890,"line_start":232,"line_end":232,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":323728,"byte_end":323735,"line_start":254,"line_end":254,"column_start":12,"column_end":19},"name":"literal","qualname":"<Hir>::literal","value":"fn (lit: Literal) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a literal HIR expression.","sig":null,"attributes":[{"value":"/ Creates a literal HIR expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":323459,"byte_end":323496,"line_start":249,"line_end":249,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":323501,"byte_end":323504,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If the given literal has a `Byte` variant with an ASCII byte, then this","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":323509,"byte_end":323584,"line_start":251,"line_end":251,"column_start":5,"column_end":80}},{"value":"/ method panics. This enforces the invariant that `Byte` variants are","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":323589,"byte_end":323660,"line_start":252,"line_end":252,"column_start":5,"column_end":76}},{"value":"/ only used to express matching of invalid UTF-8.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":323665,"byte_end":323716,"line_start":253,"line_end":253,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":324447,"byte_end":324452,"line_start":275,"line_end":275,"column_start":12,"column_end":17},"name":"class","qualname":"<Hir>::class","value":"fn (class: Class) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a class HIR expression.\n","sig":null,"attributes":[{"value":"/ Creates a class HIR expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":324400,"byte_end":324435,"line_start":274,"line_end":274,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":325102,"byte_end":325108,"line_start":292,"line_end":292,"column_start":12,"column_end":18},"name":"anchor","qualname":"<Hir>::anchor","value":"fn (anchor: Anchor) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates an anchor assertion HIR expression.\n","sig":null,"attributes":[{"value":"/ Creates an anchor assertion HIR expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":325043,"byte_end":325090,"line_start":291,"line_end":291,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":326324,"byte_end":326337,"line_start":325,"line_end":325,"column_start":12,"column_end":25},"name":"word_boundary","qualname":"<Hir>::word_boundary","value":"fn (word_boundary: WordBoundary) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a word boundary assertion HIR expression.\n","sig":null,"attributes":[{"value":"/ Creates a word boundary assertion HIR expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":326259,"byte_end":326312,"line_start":324,"line_end":324,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":327297,"byte_end":327307,"line_start":348,"line_end":348,"column_start":12,"column_end":22},"name":"repetition","qualname":"<Hir>::repetition","value":"fn (rep: Repetition) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a repetition HIR expression.\n","sig":null,"attributes":[{"value":"/ Creates a repetition HIR expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":327245,"byte_end":327285,"line_start":347,"line_end":347,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":328442,"byte_end":328447,"line_start":375,"line_end":375,"column_start":12,"column_end":17},"name":"group","qualname":"<Hir>::group","value":"fn (group: Group) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a group HIR expression.\n","sig":null,"attributes":[{"value":"/ Creates a group HIR expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":328395,"byte_end":328430,"line_start":374,"line_end":374,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":329374,"byte_end":329380,"line_start":394,"line_end":394,"column_start":12,"column_end":18},"name":"concat","qualname":"<Hir>::concat","value":"fn (mut exprs: Vec<Hir>) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns the concatenation of the given expressions.","sig":null,"attributes":[{"value":"/ Returns the concatenation of the given expressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":329243,"byte_end":329298,"line_start":391,"line_end":391,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":329303,"byte_end":329306,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ This flattens the concatenation as appropriate.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":329311,"byte_end":329362,"line_start":393,"line_end":393,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":333348,"byte_end":333359,"line_start":487,"line_end":487,"column_start":12,"column_end":23},"name":"alternation","qualname":"<Hir>::alternation","value":"fn (mut exprs: Vec<Hir>) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns the alternation of the given expressions.","sig":null,"attributes":[{"value":"/ Returns the alternation of the given expressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":333221,"byte_end":333274,"line_start":484,"line_end":484,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":333279,"byte_end":333282,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ This flattens the alternation as appropriate.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":333287,"byte_end":333336,"line_start":486,"line_end":486,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":336037,"byte_end":336040,"line_start":554,"line_end":554,"column_start":12,"column_end":15},"name":"dot","qualname":"<Hir>::dot","value":"fn (bytes: bool) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Build an HIR expression for `.`.","sig":null,"attributes":[{"value":"/ Build an HIR expression for `.`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":335707,"byte_end":335743,"line_start":546,"line_end":546,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":335748,"byte_end":335751,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ A `.` expression matches any character except for `\\n`. To build an","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":335756,"byte_end":335827,"line_start":548,"line_end":548,"column_start":5,"column_end":76}},{"value":"/ expression that matches any character, including `\\n`, use the `any`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":335832,"byte_end":335904,"line_start":549,"line_end":549,"column_start":5,"column_end":77}},{"value":"/ method.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":335909,"byte_end":335920,"line_start":550,"line_end":550,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":335925,"byte_end":335928,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ If `bytes` is `true`, then this assumes characters are limited to a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":335933,"byte_end":336004,"line_start":552,"line_end":552,"column_start":5,"column_end":76}},{"value":"/ single byte.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":336009,"byte_end":336025,"line_start":553,"line_end":553,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":336895,"byte_end":336898,"line_start":576,"line_end":576,"column_start":12,"column_end":15},"name":"any","qualname":"<Hir>::any","value":"fn (bytes: bool) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Build an HIR expression for `(?s).`.","sig":null,"attributes":[{"value":"/ Build an HIR expression for `(?s).`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":336552,"byte_end":336592,"line_start":568,"line_end":568,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":336597,"byte_end":336600,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ A `(?s).` expression matches any character, including `\\n`. To build an","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":336605,"byte_end":336680,"line_start":570,"line_end":570,"column_start":5,"column_end":80}},{"value":"/ expression that matches any character except for `\\n`, then use the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":336685,"byte_end":336756,"line_start":571,"line_end":571,"column_start":5,"column_end":76}},{"value":"/ `dot` method.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":336761,"byte_end":336778,"line_start":572,"line_end":572,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":336783,"byte_end":336786,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ If `bytes` is `true`, then this assumes characters are limited to a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":336791,"byte_end":336862,"line_start":574,"line_end":574,"column_start":5,"column_end":76}},{"value":"/ single byte.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":336867,"byte_end":336883,"line_start":575,"line_end":575,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337485,"byte_end":337499,"line_start":592,"line_end":592,"column_start":12,"column_end":26},"name":"is_always_utf8","qualname":"<Hir>::is_always_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR will always match valid UTF-8.","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR will always match valid UTF-8.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337286,"byte_end":337356,"line_start":588,"line_end":588,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337361,"byte_end":337364,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ When this returns false, then it is possible for this HIR expression","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337369,"byte_end":337441,"line_start":590,"line_end":590,"column_start":5,"column_end":77}},{"value":"/ to match invalid UTF-8.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337446,"byte_end":337473,"line_start":591,"line_end":591,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337782,"byte_end":337799,"line_start":601,"line_end":601,"column_start":12,"column_end":29},"name":"is_all_assertions","qualname":"<Hir>::is_all_assertions","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this entire HIR expression is made up of\n zero-width assertions.","sig":null,"attributes":[{"value":"/ Returns true if and only if this entire HIR expression is made up of","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337563,"byte_end":337635,"line_start":596,"line_end":596,"column_start":5,"column_end":77}},{"value":"/ zero-width assertions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337640,"byte_end":337666,"line_start":597,"line_end":597,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337671,"byte_end":337674,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This includes expressions like `^$\\b\\A\\z` and even `((\\b)+())*^`, but","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337679,"byte_end":337752,"line_start":599,"line_end":599,"column_start":5,"column_end":78}},{"value":"/ not `^a`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337757,"byte_end":337770,"line_start":600,"line_end":600,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338067,"byte_end":338084,"line_start":608,"line_end":608,"column_start":12,"column_end":29},"name":"is_anchored_start","qualname":"<Hir>::is_anchored_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match from the\n beginning of text. This includes expressions like `^foo`, `^(foo|bar)`,\n `^foo|^bar` but not `^foo|bar`.\n","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR is required to match from the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337866,"byte_end":337935,"line_start":605,"line_end":605,"column_start":5,"column_end":74}},{"value":"/ beginning of text. This includes expressions like `^foo`, `^(foo|bar)`,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":337940,"byte_end":338015,"line_start":606,"line_end":606,"column_start":5,"column_end":80}},{"value":"/ `^foo|^bar` but not `^foo|bar`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338020,"byte_end":338055,"line_start":607,"line_end":607,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338344,"byte_end":338359,"line_start":615,"line_end":615,"column_start":12,"column_end":27},"name":"is_anchored_end","qualname":"<Hir>::is_anchored_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match at the end\n of text. This includes expressions like `foo$`, `(foo|bar)$`,\n `foo$|bar$` but not `foo$|bar`.\n","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR is required to match at the end","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338151,"byte_end":338222,"line_start":612,"line_end":612,"column_start":5,"column_end":76}},{"value":"/ of text. This includes expressions like `foo$`, `(foo|bar)$`,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338227,"byte_end":338292,"line_start":613,"line_end":613,"column_start":5,"column_end":70}},{"value":"/ `foo$|bar$` but not `foo$|bar`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338297,"byte_end":338332,"line_start":614,"line_end":614,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338951,"byte_end":338973,"line_start":628,"line_end":628,"column_start":12,"column_end":34},"name":"is_line_anchored_start","qualname":"<Hir>::is_line_anchored_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match from the\n beginning of text or the beginning of a line. This includes expressions\n like `^foo`, `(?m)^foo`, `^(foo|bar)`, `^(foo|bar)`, `(?m)^foo|^bar`\n but not `^foo|bar` or `(?m)^foo|bar`.","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR is required to match from the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338424,"byte_end":338493,"line_start":619,"line_end":619,"column_start":5,"column_end":74}},{"value":"/ beginning of text or the beginning of a line. This includes expressions","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338498,"byte_end":338573,"line_start":620,"line_end":620,"column_start":5,"column_end":80}},{"value":"/ like `^foo`, `(?m)^foo`, `^(foo|bar)`, `^(foo|bar)`, `(?m)^foo|^bar`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338578,"byte_end":338650,"line_start":621,"line_end":621,"column_start":5,"column_end":77}},{"value":"/ but not `^foo|bar` or `(?m)^foo|bar`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338655,"byte_end":338696,"line_start":622,"line_end":622,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338701,"byte_end":338704,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ Note that if `is_anchored_start` is `true`, then","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338709,"byte_end":338761,"line_start":624,"line_end":624,"column_start":5,"column_end":57}},{"value":"/ `is_line_anchored_start` will also be `true`. The reverse implication","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338766,"byte_end":338839,"line_start":625,"line_end":625,"column_start":5,"column_end":78}},{"value":"/ is not true. For example, `(?m)^foo` is line anchored, but not","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338844,"byte_end":338910,"line_start":626,"line_end":626,"column_start":5,"column_end":71}},{"value":"/ `is_anchored_start`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":338915,"byte_end":338939,"line_start":627,"line_end":627,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339571,"byte_end":339591,"line_start":641,"line_end":641,"column_start":12,"column_end":32},"name":"is_line_anchored_end","qualname":"<Hir>::is_line_anchored_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match at the\n end of text or the end of a line. This includes expressions like\n `foo$`, `(?m)foo$`, `(foo|bar)$`, `(?m)(foo|bar)$`, `foo$|bar$`,\n `(?m)(foo|bar)$`, but not `foo$|bar` or `(?m)foo$|bar`.","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR is required to match at the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339045,"byte_end":339112,"line_start":632,"line_end":632,"column_start":5,"column_end":72}},{"value":"/ end of text or the end of a line. This includes expressions like","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339117,"byte_end":339185,"line_start":633,"line_end":633,"column_start":5,"column_end":73}},{"value":"/ `foo$`, `(?m)foo$`, `(foo|bar)$`, `(?m)(foo|bar)$`, `foo$|bar$`,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339190,"byte_end":339258,"line_start":634,"line_end":634,"column_start":5,"column_end":73}},{"value":"/ `(?m)(foo|bar)$`, but not `foo$|bar` or `(?m)foo$|bar`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339263,"byte_end":339322,"line_start":635,"line_end":635,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339327,"byte_end":339330,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ Note that if `is_anchored_end` is `true`, then","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339335,"byte_end":339385,"line_start":637,"line_end":637,"column_start":5,"column_end":55}},{"value":"/ `is_line_anchored_end` will also be `true`. The reverse implication","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339390,"byte_end":339461,"line_start":638,"line_end":638,"column_start":5,"column_end":76}},{"value":"/ is not true. For example, `(?m)foo$` is line anchored, but not","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339466,"byte_end":339532,"line_start":639,"line_end":639,"column_start":5,"column_end":71}},{"value":"/ `is_anchored_end`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339537,"byte_end":339559,"line_start":640,"line_end":640,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339949,"byte_end":339970,"line_start":649,"line_end":649,"column_start":12,"column_end":33},"name":"is_any_anchored_start","qualname":"<Hir>::is_any_anchored_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR contains any sub-expression that\n is required to match at the beginning of text. Specifically, this\n returns true if the `^` symbol (when multiline mode is disabled) or the\n `\\A` escape appear anywhere in the regex.\n","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR contains any sub-expression that","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339661,"byte_end":339733,"line_start":645,"line_end":645,"column_start":5,"column_end":77}},{"value":"/ is required to match at the beginning of text. Specifically, this","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339738,"byte_end":339807,"line_start":646,"line_end":646,"column_start":5,"column_end":74}},{"value":"/ returns true if the `^` symbol (when multiline mode is disabled) or the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339812,"byte_end":339887,"line_start":647,"line_end":647,"column_start":5,"column_end":80}},{"value":"/ `\\A` escape appear anywhere in the regex.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":339892,"byte_end":339937,"line_start":648,"line_end":648,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340323,"byte_end":340342,"line_start":657,"line_end":657,"column_start":12,"column_end":31},"name":"is_any_anchored_end","qualname":"<Hir>::is_any_anchored_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR contains any sub-expression that is\n required to match at the end of text. Specifically, this returns true\n if the `$` symbol (when multiline mode is disabled) or the `\\z` escape\n appear anywhere in the regex.\n","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR contains any sub-expression that is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340041,"byte_end":340116,"line_start":653,"line_end":653,"column_start":5,"column_end":80}},{"value":"/ required to match at the end of text. Specifically, this returns true","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340121,"byte_end":340194,"line_start":654,"line_end":654,"column_start":5,"column_end":78}},{"value":"/ if the `$` symbol (when multiline mode is disabled) or the `\\z` escape","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340199,"byte_end":340273,"line_start":655,"line_end":655,"column_start":5,"column_end":79}},{"value":"/ appear anywhere in the regex.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340278,"byte_end":340311,"line_start":656,"line_end":656,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340658,"byte_end":340672,"line_start":666,"line_end":666,"column_start":12,"column_end":26},"name":"is_match_empty","qualname":"<Hir>::is_match_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if the empty string is part of the language\n matched by this regular expression.","sig":null,"attributes":[{"value":"/ Return true if and only if the empty string is part of the language","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340411,"byte_end":340482,"line_start":661,"line_end":661,"column_start":5,"column_end":76}},{"value":"/ matched by this regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340487,"byte_end":340526,"line_start":662,"line_end":662,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340531,"byte_end":340534,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ This includes `a*`, `a?b*`, `a{0}`, `()`, `()+`, `^$`, `a|b?`, `\\B`,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340539,"byte_end":340611,"line_start":664,"line_end":664,"column_start":5,"column_end":77}},{"value":"/ but not `a`, `a+` or `\\b`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340616,"byte_end":340646,"line_start":665,"line_end":665,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341101,"byte_end":341111,"line_start":676,"line_end":676,"column_start":12,"column_end":22},"name":"is_literal","qualname":"<Hir>::is_literal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is a simple literal. This is only\n true when this HIR expression is either itself a `Literal` or a\n concatenation of only `Literal`s.","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR is a simple literal. This is only","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340736,"byte_end":340809,"line_start":670,"line_end":670,"column_start":5,"column_end":78}},{"value":"/ true when this HIR expression is either itself a `Literal` or a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340814,"byte_end":340881,"line_start":671,"line_end":671,"column_start":5,"column_end":72}},{"value":"/ concatenation of only `Literal`s.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340886,"byte_end":340923,"line_start":672,"line_end":672,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340928,"byte_end":340931,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ For example, `f` and `foo` are literals, but `f+`, `(foo)`, `foo()`,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":340936,"byte_end":341008,"line_start":674,"line_end":674,"column_start":5,"column_end":77}},{"value":"/ `` are not (even though that contain sub-expressions that are literals).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341013,"byte_end":341089,"line_start":675,"line_end":675,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341670,"byte_end":341692,"line_start":688,"line_end":688,"column_start":12,"column_end":34},"name":"is_alternation_literal","qualname":"<Hir>::is_alternation_literal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is either a simple literal or an\n alternation of simple literals. This is only\n true when this HIR expression is either itself a `Literal` or a\n concatenation of only `Literal`s or an alternation of only `Literal`s.","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR is either a simple literal or an","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341171,"byte_end":341243,"line_start":680,"line_end":680,"column_start":5,"column_end":77}},{"value":"/ alternation of simple literals. This is only","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341248,"byte_end":341296,"line_start":681,"line_end":681,"column_start":5,"column_end":53}},{"value":"/ true when this HIR expression is either itself a `Literal` or a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341301,"byte_end":341368,"line_start":682,"line_end":682,"column_start":5,"column_end":72}},{"value":"/ concatenation of only `Literal`s or an alternation of only `Literal`s.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341373,"byte_end":341447,"line_start":683,"line_end":683,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341452,"byte_end":341455,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ For example, `f`, `foo`, `a|b|c`, and `foo|bar|baz` are alternation","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341460,"byte_end":341531,"line_start":685,"line_end":685,"column_start":5,"column_end":76}},{"value":"/ literals, but `f+`, `(foo)`, `foo()`, ``","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341536,"byte_end":341580,"line_start":686,"line_end":686,"column_start":5,"column_end":49}},{"value":"/ are not (even though that contain sub-expressions that are literals).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341585,"byte_end":341658,"line_start":687,"line_end":687,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":342094,"byte_end":342102,"line_start":699,"line_end":699,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HirKind>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is the empty regular expression.","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR is the empty regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341781,"byte_end":341853,"line_start":694,"line_end":694,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341858,"byte_end":341861,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ Note that this is not defined inductively. That is, it only tests if","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341866,"byte_end":341938,"line_start":696,"line_end":696,"column_start":5,"column_end":77}},{"value":"/ this kind is the `Empty` variant. To get the inductive definition,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341943,"byte_end":342013,"line_start":697,"line_end":697,"column_start":5,"column_end":75}},{"value":"/ use the `is_match_empty` method on [`Hir`](struct.Hir.html).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":342018,"byte_end":342082,"line_start":698,"line_end":698,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":342335,"byte_end":342347,"line_start":708,"line_end":708,"column_start":12,"column_end":24},"name":"has_subexprs","qualname":"<HirKind>::has_subexprs","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this kind has any (including possibly\n empty) subexpressions.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this kind has any (including possibly","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":342223,"byte_end":342292,"line_start":706,"line_end":706,"column_start":5,"column_end":74}},{"value":"/ empty) subexpressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":342297,"byte_end":342323,"line_start":707,"line_end":707,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2861},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343607,"byte_end":343614,"line_start":745,"line_end":745,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::Literal::Unicode","value":"Literal::Unicode(char)","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":" A single character represented by a Unicode scalar value.\n","sig":null,"attributes":[{"value":"/ A single character represented by a Unicode scalar value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343541,"byte_end":343602,"line_start":744,"line_end":744,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2864},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343687,"byte_end":343691,"line_start":747,"line_end":747,"column_start":5,"column_end":9},"name":"Byte","qualname":"::hir::Literal::Byte","value":"Literal::Byte(u8)","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":" A single character represented by an arbitrary byte.\n","sig":null,"attributes":[{"value":"/ A single character represented by an arbitrary byte.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343626,"byte_end":343682,"line_start":746,"line_end":746,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":2860},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343527,"byte_end":343534,"line_start":743,"line_end":743,"column_start":10,"column_end":17},"name":"Literal","qualname":"::hir::Literal","value":"Literal::{Unicode, Byte}","parent":null,"children":[{"krate":0,"index":2861},{"krate":0,"index":2864}],"decl_id":null,"docs":" The high-level intermediate representation of a literal.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation of a literal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343128,"byte_end":343188,"line_start":736,"line_end":736,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343189,"byte_end":343192,"line_start":737,"line_end":737,"column_start":1,"column_end":4}},{"value":"/ A literal corresponds to a single character, where a character is either","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343193,"byte_end":343269,"line_start":738,"line_end":738,"column_start":1,"column_end":77}},{"value":"/ defined by a Unicode scalar value or an arbitrary byte. Unicode characters","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343270,"byte_end":343348,"line_start":739,"line_end":739,"column_start":1,"column_end":79}},{"value":"/ are preferred whenever possible. In particular, a `Byte` variant is only","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343349,"byte_end":343425,"line_start":740,"line_end":740,"column_start":1,"column_end":77}},{"value":"/ ever produced when it could match invalid UTF-8.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343426,"byte_end":343478,"line_start":741,"line_end":741,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343822,"byte_end":343832,"line_start":753,"line_end":753,"column_start":12,"column_end":22},"name":"is_unicode","qualname":"<Literal>::is_unicode","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this literal corresponds to a Unicode\n scalar value.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this literal corresponds to a Unicode","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343719,"byte_end":343788,"line_start":751,"line_end":751,"column_start":5,"column_end":74}},{"value":"/ scalar value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343793,"byte_end":343810,"line_start":752,"line_end":752,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2879},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345038,"byte_end":345045,"line_start":781,"line_end":781,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::Class::Unicode","value":"Class::Unicode(ClassUnicode)","parent":{"krate":0,"index":2878},"children":[],"decl_id":null,"docs":" A set of characters represented by Unicode scalar values.\n","sig":null,"attributes":[{"value":"/ A set of characters represented by Unicode scalar values.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344972,"byte_end":345033,"line_start":780,"line_end":780,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2882},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345158,"byte_end":345163,"line_start":784,"line_end":784,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::hir::Class::Bytes","value":"Class::Bytes(ClassBytes)","parent":{"krate":0,"index":2878},"children":[],"decl_id":null,"docs":" A set of characters represented by arbitrary bytes (one byte per\n character).\n","sig":null,"attributes":[{"value":"/ A set of characters represented by arbitrary bytes (one byte per","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345065,"byte_end":345133,"line_start":782,"line_end":782,"column_start":5,"column_end":73}},{"value":"/ character).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345138,"byte_end":345153,"line_start":783,"line_end":783,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":2878},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344960,"byte_end":344965,"line_start":779,"line_end":779,"column_start":10,"column_end":15},"name":"Class","qualname":"::hir::Class","value":"Class::{Unicode, Bytes}","parent":null,"children":[{"krate":0,"index":2879},{"krate":0,"index":2882}],"decl_id":null,"docs":" The high-level intermediate representation of a character class.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation of a character class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344022,"byte_end":344090,"line_start":762,"line_end":762,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344091,"byte_end":344094,"line_start":763,"line_end":763,"column_start":1,"column_end":4}},{"value":"/ A character class corresponds to a set of characters. A character is either","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344095,"byte_end":344174,"line_start":764,"line_end":764,"column_start":1,"column_end":80}},{"value":"/ defined by a Unicode scalar value or a byte. Unicode characters are used","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344175,"byte_end":344251,"line_start":765,"line_end":765,"column_start":1,"column_end":77}},{"value":"/ by default, while bytes are used when Unicode mode (via the `u` flag) is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344252,"byte_end":344328,"line_start":766,"line_end":766,"column_start":1,"column_end":77}},{"value":"/ disabled.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344329,"byte_end":344342,"line_start":767,"line_end":767,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344343,"byte_end":344346,"line_start":768,"line_end":768,"column_start":1,"column_end":4}},{"value":"/ A character class, regardless of its character type, is represented by a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344347,"byte_end":344423,"line_start":769,"line_end":769,"column_start":1,"column_end":77}},{"value":"/ sequence of non-overlapping non-adjacent ranges of characters.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344424,"byte_end":344490,"line_start":770,"line_end":770,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344491,"byte_end":344494,"line_start":771,"line_end":771,"column_start":1,"column_end":4}},{"value":"/ Note that unlike [`Literal`](enum.Literal.html), a `Bytes` variant may","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344495,"byte_end":344569,"line_start":772,"line_end":772,"column_start":1,"column_end":75}},{"value":"/ be produced even when it exclusively matches valid UTF-8. This is because","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344570,"byte_end":344647,"line_start":773,"line_end":773,"column_start":1,"column_end":78}},{"value":"/ a `Bytes` variant represents an intention by the author of the regular","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344648,"byte_end":344722,"line_start":774,"line_end":774,"column_start":1,"column_end":75}},{"value":"/ expression to disable Unicode mode, which in turn impacts the semantics of","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344723,"byte_end":344801,"line_start":775,"line_end":775,"column_start":1,"column_end":79}},{"value":"/ case insensitive matching. For example, `(?i)k` and `(?i-u)k` will not","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344802,"byte_end":344876,"line_start":776,"line_end":776,"column_start":1,"column_end":75}},{"value":"/ match the same set of strings.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":344877,"byte_end":344911,"line_start":777,"line_end":777,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345519,"byte_end":345535,"line_start":794,"line_end":794,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<Class>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Apply Unicode simple case folding to this character class, in place.\n The character class will be expanded to include all simple case folded\n character variants.","sig":null,"attributes":[{"value":"/ Apply Unicode simple case folding to this character class, in place.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345197,"byte_end":345269,"line_start":788,"line_end":788,"column_start":5,"column_end":77}},{"value":"/ The character class will be expanded to include all simple case folded","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345274,"byte_end":345348,"line_start":789,"line_end":789,"column_start":5,"column_end":79}},{"value":"/ character variants.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345353,"byte_end":345376,"line_start":790,"line_end":790,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345381,"byte_end":345384,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ If this is a byte oriented character class, then this will be limited","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345389,"byte_end":345462,"line_start":792,"line_end":792,"column_start":5,"column_end":78}},{"value":"/ to the ASCII ranges `A-Z` and `a-z`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345467,"byte_end":345507,"line_start":793,"line_end":793,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345908,"byte_end":345914,"line_start":805,"line_end":805,"column_start":12,"column_end":18},"name":"negate","qualname":"<Class>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this character class in place.","sig":null,"attributes":[{"value":"/ Negate this character class in place.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345716,"byte_end":345757,"line_start":801,"line_end":801,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345762,"byte_end":345765,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ After completion, this character class will contain precisely the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345770,"byte_end":345839,"line_start":803,"line_end":803,"column_start":5,"column_end":74}},{"value":"/ characters that weren't previously in the class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345844,"byte_end":345896,"line_start":804,"line_end":804,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346619,"byte_end":346633,"line_start":823,"line_end":823,"column_start":12,"column_end":26},"name":"is_always_utf8","qualname":"<Class>::is_always_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class will only ever match\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Returns true if and only if this character class will only ever match","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346075,"byte_end":346148,"line_start":812,"line_end":812,"column_start":5,"column_end":78}},{"value":"/ valid UTF-8.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346153,"byte_end":346169,"line_start":813,"line_end":813,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346174,"byte_end":346177,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ A character class can match invalid UTF-8 only when the following","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346182,"byte_end":346251,"line_start":815,"line_end":815,"column_start":5,"column_end":74}},{"value":"/ conditions are met:","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346256,"byte_end":346279,"line_start":816,"line_end":816,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346284,"byte_end":346287,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ 1. The translator was configured to permit generating an expression","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346292,"byte_end":346363,"line_start":818,"line_end":818,"column_start":5,"column_end":76}},{"value":"/    that can match invalid UTF-8. (By default, this is disabled.)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346368,"byte_end":346436,"line_start":819,"line_end":819,"column_start":5,"column_end":73}},{"value":"/ 2. Unicode mode (via the `u` flag) was disabled either in the concrete","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346441,"byte_end":346515,"line_start":820,"line_end":820,"column_start":5,"column_end":79}},{"value":"/    syntax or in the parser builder. By default, Unicode mode is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346520,"byte_end":346587,"line_start":821,"line_end":821,"column_start":5,"column_end":72}},{"value":"/    enabled.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346592,"byte_end":346607,"line_start":822,"line_end":822,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2896},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346896,"byte_end":346908,"line_start":833,"line_end":833,"column_start":12,"column_end":24},"name":"ClassUnicode","qualname":"::hir::ClassUnicode","value":"ClassUnicode {  }","parent":null,"children":[{"krate":0,"index":2897}],"decl_id":null,"docs":" A set of characters represented by Unicode scalar values.\n","sig":null,"attributes":[{"value":"/ A set of characters represented by Unicode scalar values.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346784,"byte_end":346845,"line_start":831,"line_end":831,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347146,"byte_end":347149,"line_start":842,"line_end":842,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassUnicode>::new","value":"fn <I> (ranges: I) -> ClassUnicode","parent":null,"children":[],"decl_id":null,"docs":" Create a new class from a sequence of ranges.","sig":null,"attributes":[{"value":"/ Create a new class from a sequence of ranges.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346979,"byte_end":347028,"line_start":838,"line_end":838,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347033,"byte_end":347036,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ The given ranges do not need to be in any specific order, and ranges","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347041,"byte_end":347113,"line_start":840,"line_end":840,"column_start":5,"column_end":77}},{"value":"/ may overlap.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347118,"byte_end":347134,"line_start":841,"line_end":841,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347363,"byte_end":347368,"line_start":850,"line_end":850,"column_start":12,"column_end":17},"name":"empty","qualname":"<ClassUnicode>::empty","value":"fn () -> ClassUnicode","parent":null,"children":[],"decl_id":null,"docs":" Create a new class with no ranges.\n","sig":null,"attributes":[{"value":"/ Create a new class with no ranges.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347313,"byte_end":347351,"line_start":849,"line_end":849,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347478,"byte_end":347482,"line_start":855,"line_end":855,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassUnicode>::push","value":"fn (&mut self, range: ClassUnicodeRange) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new range to this set.\n","sig":null,"attributes":[{"value":"/ Add a new range to this set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347434,"byte_end":347466,"line_start":854,"line_end":854,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347691,"byte_end":347695,"line_start":862,"line_end":862,"column_start":12,"column_end":16},"name":"iter","qualname":"<ClassUnicode>::iter","value":"fn (&self) -> ClassUnicodeIter","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all ranges in this class.","sig":null,"attributes":[{"value":"/ Return an iterator over all ranges in this class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347563,"byte_end":347616,"line_start":859,"line_end":859,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347621,"byte_end":347624,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ The iterator yields ranges in ascending order.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347629,"byte_end":347679,"line_start":861,"line_end":861,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347834,"byte_end":347840,"line_start":867,"line_end":867,"column_start":12,"column_end":18},"name":"ranges","qualname":"<ClassUnicode>::ranges","value":"fn (&self) -> &[ClassUnicodeRange]","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying ranges as a slice.\n","sig":null,"attributes":[{"value":"/ Return the underlying ranges as a slice.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347778,"byte_end":347822,"line_start":866,"line_end":866,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348576,"byte_end":348592,"line_start":884,"line_end":884,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<ClassUnicode>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expand this character class such that it contains all case folded\n characters, according to Unicode's \"simple\" mapping. For example, if\n this class consists of the range `a-z`, then applying case folding will\n result in the class containing both the ranges `a-z` and `A-Z`.","sig":null,"attributes":[{"value":"/ Expand this character class such that it contains all case folded","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347914,"byte_end":347983,"line_start":871,"line_end":871,"column_start":5,"column_end":74}},{"value":"/ characters, according to Unicode's \"simple\" mapping. For example, if","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":347988,"byte_end":348060,"line_start":872,"line_end":872,"column_start":5,"column_end":77}},{"value":"/ this class consists of the range `a-z`, then applying case folding will","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348065,"byte_end":348140,"line_start":873,"line_end":873,"column_start":5,"column_end":80}},{"value":"/ result in the class containing both the ranges `a-z` and `A-Z`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348145,"byte_end":348212,"line_start":874,"line_end":874,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348217,"byte_end":348220,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348225,"byte_end":348237,"line_start":876,"line_end":876,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348242,"byte_end":348245,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ This routine panics when the case mapping data necessary for this","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348250,"byte_end":348319,"line_start":878,"line_end":878,"column_start":5,"column_end":74}},{"value":"/ routine to complete is unavailable. This occurs when the `unicode-case`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348324,"byte_end":348399,"line_start":879,"line_end":879,"column_start":5,"column_end":80}},{"value":"/ feature is not enabled.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348404,"byte_end":348431,"line_start":880,"line_end":880,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348436,"byte_end":348439,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ Callers should prefer using `try_case_fold_simple` instead, which will","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348444,"byte_end":348518,"line_start":882,"line_end":882,"column_start":5,"column_end":79}},{"value":"/ return an error instead of panicking.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348523,"byte_end":348564,"line_start":883,"line_end":883,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349265,"byte_end":349285,"line_start":900,"line_end":900,"column_start":12,"column_end":32},"name":"try_case_fold_simple","qualname":"<ClassUnicode>::try_case_fold_simple","value":"fn (&mut self) -> result::Result<(), CaseFoldError>","parent":null,"children":[],"decl_id":null,"docs":" Expand this character class such that it contains all case folded\n characters, according to Unicode's \"simple\" mapping. For example, if\n this class consists of the range `a-z`, then applying case folding will\n result in the class containing both the ranges `a-z` and `A-Z`.","sig":null,"attributes":[{"value":"/ Expand this character class such that it contains all case folded","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348727,"byte_end":348796,"line_start":890,"line_end":890,"column_start":5,"column_end":74}},{"value":"/ characters, according to Unicode's \"simple\" mapping. For example, if","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348801,"byte_end":348873,"line_start":891,"line_end":891,"column_start":5,"column_end":77}},{"value":"/ this class consists of the range `a-z`, then applying case folding will","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348878,"byte_end":348953,"line_start":892,"line_end":892,"column_start":5,"column_end":80}},{"value":"/ result in the class containing both the ranges `a-z` and `A-Z`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":348958,"byte_end":349025,"line_start":893,"line_end":893,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349030,"byte_end":349033,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ # Error","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349038,"byte_end":349049,"line_start":895,"line_end":895,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349054,"byte_end":349057,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ This routine returns an error when the case mapping data necessary","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349062,"byte_end":349132,"line_start":897,"line_end":897,"column_start":5,"column_end":75}},{"value":"/ for this routine to complete is unavailable. This occurs when the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349137,"byte_end":349206,"line_start":898,"line_end":898,"column_start":5,"column_end":74}},{"value":"/ `unicode-case` feature is not enabled.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349211,"byte_end":349253,"line_start":899,"line_end":899,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349587,"byte_end":349593,"line_start":910,"line_end":910,"column_start":12,"column_end":18},"name":"negate","qualname":"<ClassUnicode>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this character class.","sig":null,"attributes":[{"value":"/ Negate this character class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349398,"byte_end":349430,"line_start":906,"line_end":906,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349435,"byte_end":349438,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ For all `c` where `c` is a Unicode scalar value, if `c` was in this","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349443,"byte_end":349514,"line_start":908,"line_end":908,"column_start":5,"column_end":76}},{"value":"/ set, then it will not be in this set after negation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349519,"byte_end":349575,"line_start":909,"line_end":909,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349729,"byte_end":349734,"line_start":915,"line_end":915,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassUnicode>::union","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Union this character class with the given character class, in place.\n","sig":null,"attributes":[{"value":"/ Union this character class with the given character class, in place.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349645,"byte_end":349717,"line_start":914,"line_end":914,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349913,"byte_end":349922,"line_start":921,"line_end":921,"column_start":12,"column_end":21},"name":"intersect","qualname":"<ClassUnicode>::intersect","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Intersect this character class with the given character class, in\n place.\n","sig":null,"attributes":[{"value":"/ Intersect this character class with the given character class, in","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349817,"byte_end":349886,"line_start":919,"line_end":919,"column_start":5,"column_end":74}},{"value":"/ place.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":349891,"byte_end":349901,"line_start":920,"line_end":920,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350096,"byte_end":350106,"line_start":926,"line_end":926,"column_start":12,"column_end":22},"name":"difference","qualname":"<ClassUnicode>::difference","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Subtract the given character class from this character class, in place.\n","sig":null,"attributes":[{"value":"/ Subtract the given character class from this character class, in place.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350009,"byte_end":350084,"line_start":925,"line_end":925,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350675,"byte_end":350695,"line_start":938,"line_end":938,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<ClassUnicode>::symmetric_difference","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the symmetric difference of the given character classes, in\n place.","sig":null,"attributes":[{"value":"/ Compute the symmetric difference of the given character classes, in","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350194,"byte_end":350265,"line_start":930,"line_end":930,"column_start":5,"column_end":76}},{"value":"/ place.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350270,"byte_end":350280,"line_start":931,"line_end":931,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350285,"byte_end":350288,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ This computes the symmetric difference of two character classes. This","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350293,"byte_end":350366,"line_start":933,"line_end":933,"column_start":5,"column_end":78}},{"value":"/ removes all elements in this class that are also in the given class,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350371,"byte_end":350443,"line_start":934,"line_end":934,"column_start":5,"column_end":77}},{"value":"/ but all adds all elements from the given class that aren't in this","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350448,"byte_end":350518,"line_start":935,"line_end":935,"column_start":5,"column_end":75}},{"value":"/ class. That is, the class will contain all elements in either class,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350523,"byte_end":350595,"line_start":936,"line_end":936,"column_start":5,"column_end":77}},{"value":"/ but will not contain any elements that are in both classes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350600,"byte_end":350663,"line_start":937,"line_end":937,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351017,"byte_end":351029,"line_start":945,"line_end":945,"column_start":12,"column_end":24},"name":"is_all_ascii","qualname":"<ClassUnicode>::is_all_ascii","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class will either match\n nothing or only ASCII bytes. Stated differently, this returns false\n if and only if this class contains a non-ASCII codepoint.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this character class will either match","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350793,"byte_end":350863,"line_start":942,"line_end":942,"column_start":5,"column_end":75}},{"value":"/ nothing or only ASCII bytes. Stated differently, this returns false","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350868,"byte_end":350939,"line_start":943,"line_end":943,"column_start":5,"column_end":76}},{"value":"/ if and only if this class contains a non-ASCII codepoint.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":350944,"byte_end":351005,"line_start":944,"line_end":944,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":2909},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351290,"byte_end":351306,"line_start":954,"line_end":954,"column_start":12,"column_end":28},"name":"ClassUnicodeIter","qualname":"::hir::ClassUnicodeIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all ranges in a Unicode character class.","sig":null,"attributes":[{"value":"/ An iterator over all ranges in a Unicode character class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351126,"byte_end":351187,"line_start":950,"line_end":950,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351188,"byte_end":351191,"line_start":951,"line_end":951,"column_start":1,"column_end":4}},{"value":"/ The lifetime `'a` refers to the lifetime of the underlying class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351192,"byte_end":351261,"line_start":952,"line_end":952,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":2916},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351773,"byte_end":351790,"line_start":969,"line_end":969,"column_start":12,"column_end":29},"name":"ClassUnicodeRange","qualname":"::hir::ClassUnicodeRange","value":"ClassUnicodeRange {  }","parent":null,"children":[{"krate":0,"index":2917},{"krate":0,"index":2918}],"decl_id":null,"docs":" A single range of characters represented by Unicode scalar values.","sig":null,"attributes":[{"value":"/ A single range of characters represented by Unicode scalar values.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351527,"byte_end":351597,"line_start":964,"line_end":964,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351598,"byte_end":351601,"line_start":965,"line_end":965,"column_start":1,"column_end":4}},{"value":"/ The range is closed. That is, the start and end of the range are included","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351602,"byte_end":351679,"line_start":966,"line_end":966,"column_start":1,"column_end":78}},{"value":"/ in the range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351680,"byte_end":351697,"line_start":967,"line_end":967,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354219,"byte_end":354222,"line_start":1052,"line_end":1052,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassUnicodeRange>::new","value":"fn (start: char, end: char) -> ClassUnicodeRange","parent":null,"children":[],"decl_id":null,"docs":" Create a new Unicode scalar value range for a character class.","sig":null,"attributes":[{"value":"/ Create a new Unicode scalar value range for a character class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":353987,"byte_end":354053,"line_start":1048,"line_end":1048,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354058,"byte_end":354061,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ The returned range is always in a canonical form. That is, the range","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354066,"byte_end":354138,"line_start":1050,"line_end":1050,"column_start":5,"column_end":77}},{"value":"/ returned always satisfies the invariant that `start <= end`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354143,"byte_end":354207,"line_start":1051,"line_end":1051,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354473,"byte_end":354478,"line_start":1060,"line_end":1060,"column_start":12,"column_end":17},"name":"start","qualname":"<ClassUnicodeRange>::start","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Return the start of this range.","sig":null,"attributes":[{"value":"/ Return the start of this range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354327,"byte_end":354362,"line_start":1056,"line_end":1056,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354367,"byte_end":354370,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ The start of a range is always less than or equal to the end of the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354375,"byte_end":354446,"line_start":1058,"line_end":1058,"column_start":5,"column_end":76}},{"value":"/ range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354451,"byte_end":354461,"line_start":1059,"line_end":1059,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354673,"byte_end":354676,"line_start":1068,"line_end":1068,"column_start":12,"column_end":15},"name":"end","qualname":"<ClassUnicodeRange>::end","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Return the end of this range.","sig":null,"attributes":[{"value":"/ Return the end of this range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354526,"byte_end":354559,"line_start":1064,"line_end":1064,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354564,"byte_end":354567,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ The end of a range is always greater than or equal to the start of the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354572,"byte_end":354646,"line_start":1066,"line_end":1066,"column_start":5,"column_end":79}},{"value":"/ range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354651,"byte_end":354661,"line_start":1067,"line_end":1067,"column_start":5,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":2943},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354876,"byte_end":354886,"line_start":1076,"line_end":1076,"column_start":12,"column_end":22},"name":"ClassBytes","qualname":"::hir::ClassBytes","value":"ClassBytes {  }","parent":null,"children":[{"krate":0,"index":2944}],"decl_id":null,"docs":" A set of characters represented by arbitrary bytes (where one byte\n corresponds to one character).\n","sig":null,"attributes":[{"value":"/ A set of characters represented by arbitrary bytes (where one byte","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354720,"byte_end":354790,"line_start":1073,"line_end":1073,"column_start":1,"column_end":71}},{"value":"/ corresponds to one character).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354791,"byte_end":354825,"line_start":1074,"line_end":1074,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355120,"byte_end":355123,"line_start":1085,"line_end":1085,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassBytes>::new","value":"fn <I> (ranges: I) -> ClassBytes","parent":null,"children":[],"decl_id":null,"docs":" Create a new class from a sequence of ranges.","sig":null,"attributes":[{"value":"/ Create a new class from a sequence of ranges.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354953,"byte_end":355002,"line_start":1081,"line_end":1081,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355007,"byte_end":355010,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ The given ranges do not need to be in any specific order, and ranges","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355015,"byte_end":355087,"line_start":1083,"line_end":1083,"column_start":5,"column_end":77}},{"value":"/ may overlap.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355092,"byte_end":355108,"line_start":1084,"line_end":1084,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355331,"byte_end":355336,"line_start":1093,"line_end":1093,"column_start":12,"column_end":17},"name":"empty","qualname":"<ClassBytes>::empty","value":"fn () -> ClassBytes","parent":null,"children":[],"decl_id":null,"docs":" Create a new class with no ranges.\n","sig":null,"attributes":[{"value":"/ Create a new class with no ranges.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355281,"byte_end":355319,"line_start":1092,"line_end":1092,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355442,"byte_end":355446,"line_start":1098,"line_end":1098,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassBytes>::push","value":"fn (&mut self, range: ClassBytesRange) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new range to this set.\n","sig":null,"attributes":[{"value":"/ Add a new range to this set.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355398,"byte_end":355430,"line_start":1097,"line_end":1097,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355653,"byte_end":355657,"line_start":1105,"line_end":1105,"column_start":12,"column_end":16},"name":"iter","qualname":"<ClassBytes>::iter","value":"fn (&self) -> ClassBytesIter","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all ranges in this class.","sig":null,"attributes":[{"value":"/ Return an iterator over all ranges in this class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355525,"byte_end":355578,"line_start":1102,"line_end":1102,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355583,"byte_end":355586,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ The iterator yields ranges in ascending order.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355591,"byte_end":355641,"line_start":1104,"line_end":1104,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355792,"byte_end":355798,"line_start":1110,"line_end":1110,"column_start":12,"column_end":18},"name":"ranges","qualname":"<ClassBytes>::ranges","value":"fn (&self) -> &[ClassBytesRange]","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying ranges as a slice.\n","sig":null,"attributes":[{"value":"/ Return the underlying ranges as a slice.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355736,"byte_end":355780,"line_start":1109,"line_end":1109,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356263,"byte_end":356279,"line_start":1121,"line_end":1121,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<ClassBytes>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expand this character class such that it contains all case folded\n characters. For example, if this class consists of the range `a-z`,\n then applying case folding will result in the class containing both the\n ranges `a-z` and `A-Z`.","sig":null,"attributes":[{"value":"/ Expand this character class such that it contains all case folded","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355870,"byte_end":355939,"line_start":1114,"line_end":1114,"column_start":5,"column_end":74}},{"value":"/ characters. For example, if this class consists of the range `a-z`,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":355944,"byte_end":356015,"line_start":1115,"line_end":1115,"column_start":5,"column_end":76}},{"value":"/ then applying case folding will result in the class containing both the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356020,"byte_end":356095,"line_start":1116,"line_end":1116,"column_start":5,"column_end":80}},{"value":"/ ranges `a-z` and `A-Z`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356100,"byte_end":356127,"line_start":1117,"line_end":1117,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356132,"byte_end":356135,"line_start":1118,"line_end":1118,"column_start":5,"column_end":8}},{"value":"/ Note that this only applies ASCII case folding, which is limited to the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356140,"byte_end":356215,"line_start":1119,"line_end":1119,"column_start":5,"column_end":80}},{"value":"/ characters `a-z` and `A-Z`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356220,"byte_end":356251,"line_start":1120,"line_end":1120,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356554,"byte_end":356560,"line_start":1129,"line_end":1129,"column_start":12,"column_end":18},"name":"negate","qualname":"<ClassBytes>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this byte class.","sig":null,"attributes":[{"value":"/ Negate this byte class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356382,"byte_end":356409,"line_start":1125,"line_end":1125,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356414,"byte_end":356417,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ For all `b` where `b` is a any byte, if `b` was in this set, then it","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356422,"byte_end":356494,"line_start":1127,"line_end":1127,"column_start":5,"column_end":77}},{"value":"/ will not be in this set after negation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356499,"byte_end":356542,"line_start":1128,"line_end":1128,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356686,"byte_end":356691,"line_start":1134,"line_end":1134,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassBytes>::union","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Union this byte class with the given byte class, in place.\n","sig":null,"attributes":[{"value":"/ Union this byte class with the given byte class, in place.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356612,"byte_end":356674,"line_start":1133,"line_end":1133,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356850,"byte_end":356859,"line_start":1139,"line_end":1139,"column_start":12,"column_end":21},"name":"intersect","qualname":"<ClassBytes>::intersect","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Intersect this byte class with the given byte class, in place.\n","sig":null,"attributes":[{"value":"/ Intersect this byte class with the given byte class, in place.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356772,"byte_end":356838,"line_start":1138,"line_end":1138,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357021,"byte_end":357031,"line_start":1144,"line_end":1144,"column_start":12,"column_end":22},"name":"difference","qualname":"<ClassBytes>::difference","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Subtract the given byte class from this byte class, in place.\n","sig":null,"attributes":[{"value":"/ Subtract the given byte class from this byte class, in place.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":356944,"byte_end":357009,"line_start":1143,"line_end":1143,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357580,"byte_end":357600,"line_start":1155,"line_end":1155,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<ClassBytes>::symmetric_difference","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the symmetric difference of the given byte classes, in place.","sig":null,"attributes":[{"value":"/ Compute the symmetric difference of the given byte classes, in place.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357117,"byte_end":357190,"line_start":1148,"line_end":1148,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357195,"byte_end":357198,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ This computes the symmetric difference of two byte classes. This","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357203,"byte_end":357271,"line_start":1150,"line_end":1150,"column_start":5,"column_end":73}},{"value":"/ removes all elements in this class that are also in the given class,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357276,"byte_end":357348,"line_start":1151,"line_end":1151,"column_start":5,"column_end":77}},{"value":"/ but all adds all elements from the given class that aren't in this","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357353,"byte_end":357423,"line_start":1152,"line_end":1152,"column_start":5,"column_end":75}},{"value":"/ class. That is, the class will contain all elements in either class,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357428,"byte_end":357500,"line_start":1153,"line_end":1153,"column_start":5,"column_end":77}},{"value":"/ but will not contain any elements that are in both classes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357505,"byte_end":357568,"line_start":1154,"line_end":1154,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357915,"byte_end":357927,"line_start":1162,"line_end":1162,"column_start":12,"column_end":24},"name":"is_all_ascii","qualname":"<ClassBytes>::is_all_ascii","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class will either match\n nothing or only ASCII bytes. Stated differently, this returns false\n if and only if this class contains a non-ASCII byte.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this character class will either match","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357696,"byte_end":357766,"line_start":1159,"line_end":1159,"column_start":5,"column_end":75}},{"value":"/ nothing or only ASCII bytes. Stated differently, this returns false","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357771,"byte_end":357842,"line_start":1160,"line_end":1160,"column_start":5,"column_end":76}},{"value":"/ if and only if this class contains a non-ASCII byte.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":357847,"byte_end":357903,"line_start":1161,"line_end":1161,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2956},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358183,"byte_end":358197,"line_start":1171,"line_end":1171,"column_start":12,"column_end":26},"name":"ClassBytesIter","qualname":"::hir::ClassBytesIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all ranges in a byte character class.","sig":null,"attributes":[{"value":"/ An iterator over all ranges in a byte character class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358022,"byte_end":358080,"line_start":1167,"line_end":1167,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358081,"byte_end":358084,"line_start":1168,"line_end":1168,"column_start":1,"column_end":4}},{"value":"/ The lifetime `'a` refers to the lifetime of the underlying class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358085,"byte_end":358154,"line_start":1169,"line_end":1169,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":2963},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358650,"byte_end":358665,"line_start":1186,"line_end":1186,"column_start":12,"column_end":27},"name":"ClassBytesRange","qualname":"::hir::ClassBytesRange","value":"ClassBytesRange {  }","parent":null,"children":[{"krate":0,"index":2964},{"krate":0,"index":2965}],"decl_id":null,"docs":" A single range of characters represented by arbitrary bytes.","sig":null,"attributes":[{"value":"/ A single range of characters represented by arbitrary bytes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358410,"byte_end":358474,"line_start":1181,"line_end":1181,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358475,"byte_end":358478,"line_start":1182,"line_end":1182,"column_start":1,"column_end":4}},{"value":"/ The range is closed. That is, the start and end of the range are included","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358479,"byte_end":358556,"line_start":1183,"line_end":1183,"column_start":1,"column_end":78}},{"value":"/ in the range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358557,"byte_end":358574,"line_start":1184,"line_end":1184,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360224,"byte_end":360227,"line_start":1239,"line_end":1239,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassBytesRange>::new","value":"fn (start: u8, end: u8) -> ClassBytesRange","parent":null,"children":[],"decl_id":null,"docs":" Create a new byte range for a character class.","sig":null,"attributes":[{"value":"/ Create a new byte range for a character class.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360008,"byte_end":360058,"line_start":1235,"line_end":1235,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360063,"byte_end":360066,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ The returned range is always in a canonical form. That is, the range","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360071,"byte_end":360143,"line_start":1237,"line_end":1237,"column_start":5,"column_end":77}},{"value":"/ returned always satisfies the invariant that `start <= end`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360148,"byte_end":360212,"line_start":1238,"line_end":1238,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360470,"byte_end":360475,"line_start":1247,"line_end":1247,"column_start":12,"column_end":17},"name":"start","qualname":"<ClassBytesRange>::start","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the start of this range.","sig":null,"attributes":[{"value":"/ Return the start of this range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360324,"byte_end":360359,"line_start":1243,"line_end":1243,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360364,"byte_end":360367,"line_start":1244,"line_end":1244,"column_start":5,"column_end":8}},{"value":"/ The start of a range is always less than or equal to the end of the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360372,"byte_end":360443,"line_start":1245,"line_end":1245,"column_start":5,"column_end":76}},{"value":"/ range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360448,"byte_end":360458,"line_start":1246,"line_end":1246,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360668,"byte_end":360671,"line_start":1255,"line_end":1255,"column_start":12,"column_end":15},"name":"end","qualname":"<ClassBytesRange>::end","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the end of this range.","sig":null,"attributes":[{"value":"/ Return the end of this range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360521,"byte_end":360554,"line_start":1251,"line_end":1251,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360559,"byte_end":360562,"line_start":1252,"line_end":1252,"column_start":5,"column_end":8}},{"value":"/ The end of a range is always greater than or equal to the start of the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360567,"byte_end":360641,"line_start":1253,"line_end":1253,"column_start":5,"column_end":79}},{"value":"/ range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360646,"byte_end":360656,"line_start":1254,"line_end":1254,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2991},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361614,"byte_end":361623,"line_start":1285,"line_end":1285,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::hir::Anchor::StartLine","value":"Anchor::StartLine","parent":{"krate":0,"index":2990},"children":[],"decl_id":null,"docs":" Match the beginning of a line or the beginning of text. Specifically,\n this matches at the starting position of the input, or at the position\n immediately following a `\\n` character.\n","sig":null,"attributes":[{"value":"/ Match the beginning of a line or the beginning of text. Specifically,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361409,"byte_end":361482,"line_start":1282,"line_end":1282,"column_start":5,"column_end":78}},{"value":"/ this matches at the starting position of the input, or at the position","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361487,"byte_end":361561,"line_start":1283,"line_end":1283,"column_start":5,"column_end":79}},{"value":"/ immediately following a `\\n` character.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361566,"byte_end":361609,"line_start":1284,"line_end":1284,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2993},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361817,"byte_end":361824,"line_start":1289,"line_end":1289,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::hir::Anchor::EndLine","value":"Anchor::EndLine","parent":{"krate":0,"index":2990},"children":[],"decl_id":null,"docs":" Match the end of a line or the end of text. Specifically,\n this matches at the end position of the input, or at the position\n immediately preceding a `\\n` character.\n","sig":null,"attributes":[{"value":"/ Match the end of a line or the end of text. Specifically,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361629,"byte_end":361690,"line_start":1286,"line_end":1286,"column_start":5,"column_end":66}},{"value":"/ this matches at the end position of the input, or at the position","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361695,"byte_end":361764,"line_start":1287,"line_end":1287,"column_start":5,"column_end":74}},{"value":"/ immediately preceding a `\\n` character.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361769,"byte_end":361812,"line_start":1288,"line_end":1288,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2995},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361941,"byte_end":361950,"line_start":1292,"line_end":1292,"column_start":5,"column_end":14},"name":"StartText","qualname":"::hir::Anchor::StartText","value":"Anchor::StartText","parent":{"krate":0,"index":2990},"children":[],"decl_id":null,"docs":" Match the beginning of text. Specifically, this matches at the starting\n position of the input.\n","sig":null,"attributes":[{"value":"/ Match the beginning of text. Specifically, this matches at the starting","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361830,"byte_end":361905,"line_start":1290,"line_end":1290,"column_start":5,"column_end":80}},{"value":"/ position of the input.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361910,"byte_end":361936,"line_start":1291,"line_end":1291,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2997},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362059,"byte_end":362066,"line_start":1295,"line_end":1295,"column_start":5,"column_end":12},"name":"EndText","qualname":"::hir::Anchor::EndText","value":"Anchor::EndText","parent":{"krate":0,"index":2990},"children":[],"decl_id":null,"docs":" Match the end of text. Specifically, this matches at the ending\n position of the input.\n","sig":null,"attributes":[{"value":"/ Match the end of text. Specifically, this matches at the ending","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361956,"byte_end":362023,"line_start":1293,"line_end":1293,"column_start":5,"column_end":72}},{"value":"/ position of the input.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362028,"byte_end":362054,"line_start":1294,"line_end":1294,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":2990},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361396,"byte_end":361402,"line_start":1281,"line_end":1281,"column_start":10,"column_end":16},"name":"Anchor","qualname":"::hir::Anchor","value":"Anchor::{StartLine, EndLine, StartText, EndText}","parent":null,"children":[{"krate":0,"index":2991},{"krate":0,"index":2993},{"krate":0,"index":2995},{"krate":0,"index":2997}],"decl_id":null,"docs":" The high-level intermediate representation for an anchor assertion.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation for an anchor assertion.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361217,"byte_end":361288,"line_start":1277,"line_end":1277,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361289,"byte_end":361292,"line_start":1278,"line_end":1278,"column_start":1,"column_end":4}},{"value":"/ A matching anchor assertion is always zero-length.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":361293,"byte_end":361347,"line_start":1279,"line_end":1279,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3010},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362507,"byte_end":362514,"line_start":1306,"line_end":1306,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::WordBoundary::Unicode","value":"WordBoundary::Unicode","parent":{"krate":0,"index":3009},"children":[],"decl_id":null,"docs":" Match a Unicode-aware word boundary. That is, this matches a position\n where the left adjacent character and right adjacent character\n correspond to a word and non-word or a non-word and word character.\n","sig":null,"attributes":[{"value":"/ Match a Unicode-aware word boundary. That is, this matches a position","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362282,"byte_end":362355,"line_start":1303,"line_end":1303,"column_start":5,"column_end":78}},{"value":"/ where the left adjacent character and right adjacent character","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362360,"byte_end":362426,"line_start":1304,"line_end":1304,"column_start":5,"column_end":71}},{"value":"/ correspond to a word and non-word or a non-word and word character.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362431,"byte_end":362502,"line_start":1305,"line_end":1305,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3012},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362579,"byte_end":362592,"line_start":1308,"line_end":1308,"column_start":5,"column_end":18},"name":"UnicodeNegate","qualname":"::hir::WordBoundary::UnicodeNegate","value":"WordBoundary::UnicodeNegate","parent":{"krate":0,"index":3009},"children":[],"decl_id":null,"docs":" Match a Unicode-aware negation of a word boundary.\n","sig":null,"attributes":[{"value":"/ Match a Unicode-aware negation of a word boundary.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362520,"byte_end":362574,"line_start":1307,"line_end":1307,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3014},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362821,"byte_end":362826,"line_start":1312,"line_end":1312,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::hir::WordBoundary::Ascii","value":"WordBoundary::Ascii","parent":{"krate":0,"index":3009},"children":[],"decl_id":null,"docs":" Match an ASCII-only word boundary. That is, this matches a position\n where the left adjacent character and right adjacent character\n correspond to a word and non-word or a non-word and word character.\n","sig":null,"attributes":[{"value":"/ Match an ASCII-only word boundary. That is, this matches a position","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362598,"byte_end":362669,"line_start":1309,"line_end":1309,"column_start":5,"column_end":76}},{"value":"/ where the left adjacent character and right adjacent character","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362674,"byte_end":362740,"line_start":1310,"line_end":1310,"column_start":5,"column_end":71}},{"value":"/ correspond to a word and non-word or a non-word and word character.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362745,"byte_end":362816,"line_start":1311,"line_end":1311,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3016},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362889,"byte_end":362900,"line_start":1314,"line_end":1314,"column_start":5,"column_end":16},"name":"AsciiNegate","qualname":"::hir::WordBoundary::AsciiNegate","value":"WordBoundary::AsciiNegate","parent":{"krate":0,"index":3009},"children":[],"decl_id":null,"docs":" Match an ASCII-only negation of a word boundary.\n","sig":null,"attributes":[{"value":"/ Match an ASCII-only negation of a word boundary.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362832,"byte_end":362884,"line_start":1313,"line_end":1313,"column_start":5,"column_end":57}}]},{"kind":"Enum","id":{"krate":0,"index":3009},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362263,"byte_end":362275,"line_start":1302,"line_end":1302,"column_start":10,"column_end":22},"name":"WordBoundary","qualname":"::hir::WordBoundary","value":"WordBoundary::{Unicode, UnicodeNegate, Ascii, AsciiNegate}","parent":null,"children":[{"krate":0,"index":3010},{"krate":0,"index":3012},{"krate":0,"index":3014},{"krate":0,"index":3016}],"decl_id":null,"docs":" The high-level intermediate representation for a word-boundary assertion.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation for a word-boundary assertion.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362071,"byte_end":362148,"line_start":1298,"line_end":1298,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362149,"byte_end":362152,"line_start":1299,"line_end":1299,"column_start":1,"column_end":4}},{"value":"/ A matching word boundary assertion is always zero-length.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362153,"byte_end":362214,"line_start":1300,"line_end":1300,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363013,"byte_end":363023,"line_start":1319,"line_end":1319,"column_start":12,"column_end":22},"name":"is_negated","qualname":"<WordBoundary>::is_negated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this word boundary assertion is negated.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this word boundary assertion is negated.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362929,"byte_end":363001,"line_start":1318,"line_end":1318,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":3028},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363547,"byte_end":363552,"line_start":1335,"line_end":1335,"column_start":12,"column_end":17},"name":"Group","qualname":"::hir::Group","value":"Group { kind, hir }","parent":null,"children":[{"krate":0,"index":3029},{"krate":0,"index":3030}],"decl_id":null,"docs":" The high-level intermediate representation for a group.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation for a group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363225,"byte_end":363284,"line_start":1327,"line_end":1327,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363285,"byte_end":363288,"line_start":1328,"line_end":1328,"column_start":1,"column_end":4}},{"value":"/ This represents one of three possible group types:","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363289,"byte_end":363343,"line_start":1329,"line_end":1329,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363344,"byte_end":363347,"line_start":1330,"line_end":1330,"column_start":1,"column_end":4}},{"value":"/ 1. A non-capturing group (e.g., `(?:expr)`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363348,"byte_end":363396,"line_start":1331,"line_end":1331,"column_start":1,"column_end":49}},{"value":"/ 2. A capturing group (e.g., `(expr)`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363397,"byte_end":363439,"line_start":1332,"line_end":1332,"column_start":1,"column_end":43}},{"value":"/ 3. A named capturing group (e.g., `(?P<name>expr)`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363440,"byte_end":363496,"line_start":1333,"line_end":1333,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":3029},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363726,"byte_end":363730,"line_start":1339,"line_end":1339,"column_start":9,"column_end":13},"name":"kind","qualname":"::hir::Group::kind","value":"hir::GroupKind","parent":{"krate":0,"index":3028},"children":[],"decl_id":null,"docs":" The kind of this group. If it is a capturing group, then the kind\n contains the capture group index (and the name, if it is a named\n group).\n","sig":null,"attributes":[{"value":"/ The kind of this group. If it is a capturing group, then the kind","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363559,"byte_end":363628,"line_start":1336,"line_end":1336,"column_start":5,"column_end":74}},{"value":"/ contains the capture group index (and the name, if it is a named","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363633,"byte_end":363701,"line_start":1337,"line_end":1337,"column_start":5,"column_end":73}},{"value":"/ group).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363706,"byte_end":363717,"line_start":1338,"line_end":1338,"column_start":5,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":3030},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363822,"byte_end":363825,"line_start":1341,"line_end":1341,"column_start":9,"column_end":12},"name":"hir","qualname":"::hir::Group::hir","value":"std::boxed::Box<hir::Hir>","parent":{"krate":0,"index":3028},"children":[],"decl_id":null,"docs":" The expression inside the capturing group, which may be empty.\n","sig":null,"attributes":[{"value":"/ The expression inside the capturing group, which may be empty.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363747,"byte_end":363813,"line_start":1340,"line_end":1340,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3043},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364030,"byte_end":364042,"line_start":1350,"line_end":1350,"column_start":5,"column_end":17},"name":"CaptureIndex","qualname":"::hir::GroupKind::CaptureIndex","value":"GroupKind::CaptureIndex(u32)","parent":{"krate":0,"index":3042},"children":[],"decl_id":null,"docs":" A normal unnamed capturing group.","sig":null,"attributes":[{"value":"/ A normal unnamed capturing group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363927,"byte_end":363964,"line_start":1347,"line_end":1347,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363969,"byte_end":363972,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ The value is the capture index of the group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363977,"byte_end":364025,"line_start":1349,"line_end":1349,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":3046},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364086,"byte_end":364097,"line_start":1352,"line_end":1352,"column_start":5,"column_end":16},"name":"CaptureName","qualname":"::hir::GroupKind::CaptureName","value":"GroupKind::CaptureName { name, index }","parent":{"krate":0,"index":3042},"children":[],"decl_id":null,"docs":" A named capturing group.\n","sig":null,"attributes":[{"value":"/ A named capturing group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364053,"byte_end":364081,"line_start":1351,"line_end":1351,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3049},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364263,"byte_end":364275,"line_start":1359,"line_end":1359,"column_start":5,"column_end":17},"name":"NonCapturing","qualname":"::hir::GroupKind::NonCapturing","value":"GroupKind::NonCapturing","parent":{"krate":0,"index":3042},"children":[],"decl_id":null,"docs":" A non-capturing group.\n","sig":null,"attributes":[{"value":"/ A non-capturing group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364232,"byte_end":364258,"line_start":1358,"line_end":1358,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":3042},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363911,"byte_end":363920,"line_start":1346,"line_end":1346,"column_start":10,"column_end":19},"name":"GroupKind","qualname":"::hir::GroupKind","value":"GroupKind::{CaptureIndex, CaptureName, NonCapturing}","parent":null,"children":[{"krate":0,"index":3043},{"krate":0,"index":3046},{"krate":0,"index":3049}],"decl_id":null,"docs":" The kind of group.\n","sig":null,"attributes":[{"value":"/ The kind of group.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":363840,"byte_end":363862,"line_start":1344,"line_end":1344,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3062},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364492,"byte_end":364502,"line_start":1367,"line_end":1367,"column_start":12,"column_end":22},"name":"Repetition","qualname":"::hir::Repetition","value":"Repetition { kind, greedy, hir }","parent":null,"children":[{"krate":0,"index":3063},{"krate":0,"index":3064},{"krate":0,"index":3065}],"decl_id":null,"docs":" The high-level intermediate representation of a repetition operator.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation of a repetition operator.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364280,"byte_end":364352,"line_start":1362,"line_end":1362,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364353,"byte_end":364356,"line_start":1363,"line_end":1363,"column_start":1,"column_end":4}},{"value":"/ A repetition operator permits the repetition of an arbitrary","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364357,"byte_end":364421,"line_start":1364,"line_end":1364,"column_start":1,"column_end":65}},{"value":"/ sub-expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364422,"byte_end":364441,"line_start":1365,"line_end":1365,"column_start":1,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":3063},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364559,"byte_end":364563,"line_start":1369,"line_end":1369,"column_start":9,"column_end":13},"name":"kind","qualname":"::hir::Repetition::kind","value":"hir::RepetitionKind","parent":{"krate":0,"index":3062},"children":[],"decl_id":null,"docs":" The kind of this repetition operator.\n","sig":null,"attributes":[{"value":"/ The kind of this repetition operator.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364509,"byte_end":364550,"line_start":1368,"line_end":1368,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":3064},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365002,"byte_end":365008,"line_start":1377,"line_end":1377,"column_start":9,"column_end":15},"name":"greedy","qualname":"::hir::Repetition::greedy","value":"bool","parent":{"krate":0,"index":3062},"children":[],"decl_id":null,"docs":" Whether this repetition operator is greedy or not. A greedy operator\n will match as much as it can. A non-greedy operator will match as\n little as it can.","sig":null,"attributes":[{"value":"/ Whether this repetition operator is greedy or not. A greedy operator","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364585,"byte_end":364657,"line_start":1370,"line_end":1370,"column_start":5,"column_end":77}},{"value":"/ will match as much as it can. A non-greedy operator will match as","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364662,"byte_end":364731,"line_start":1371,"line_end":1371,"column_start":5,"column_end":74}},{"value":"/ little as it can.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364736,"byte_end":364757,"line_start":1372,"line_end":1372,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364762,"byte_end":364765,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ Typically, operators are greedy by default and are only non-greedy when","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364770,"byte_end":364845,"line_start":1374,"line_end":1374,"column_start":5,"column_end":80}},{"value":"/ a `?` suffix is used, e.g., `(expr)*` is greedy while `(expr)*?` is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364850,"byte_end":364921,"line_start":1375,"line_end":1375,"column_start":5,"column_end":76}},{"value":"/ not. However, this can be inverted via the `U` \"ungreedy\" flag.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":364926,"byte_end":364993,"line_start":1376,"line_end":1376,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":3065},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365063,"byte_end":365066,"line_start":1379,"line_end":1379,"column_start":9,"column_end":12},"name":"hir","qualname":"::hir::Repetition::hir","value":"std::boxed::Box<hir::Hir>","parent":{"krate":0,"index":3062},"children":[],"decl_id":null,"docs":" The expression being repeated.\n","sig":null,"attributes":[{"value":"/ The expression being repeated.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365020,"byte_end":365054,"line_start":1378,"line_end":1378,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365632,"byte_end":365646,"line_start":1392,"line_end":1392,"column_start":12,"column_end":26},"name":"is_match_empty","qualname":"<Repetition>::is_match_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this repetition operator makes it possible\n to match the empty string.","sig":null,"attributes":[{"value":"/ Returns true if and only if this repetition operator makes it possible","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365103,"byte_end":365177,"line_start":1383,"line_end":1383,"column_start":5,"column_end":79}},{"value":"/ to match the empty string.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365182,"byte_end":365212,"line_start":1384,"line_end":1384,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365217,"byte_end":365220,"line_start":1385,"line_end":1385,"column_start":5,"column_end":8}},{"value":"/ Note that this is not defined inductively. For example, while `a*`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365225,"byte_end":365295,"line_start":1386,"line_end":1386,"column_start":5,"column_end":75}},{"value":"/ will report `true`, `()+` will not, even though `()` matches the empty","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365300,"byte_end":365374,"line_start":1387,"line_end":1387,"column_start":5,"column_end":79}},{"value":"/ string and one or more occurrences of something that matches the empty","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365379,"byte_end":365453,"line_start":1388,"line_end":1388,"column_start":5,"column_end":79}},{"value":"/ string will always match the empty string. In order to get the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365458,"byte_end":365524,"line_start":1389,"line_end":1389,"column_start":5,"column_end":71}},{"value":"/ inductive definition, see the corresponding method on","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365529,"byte_end":365586,"line_start":1390,"line_end":1390,"column_start":5,"column_end":62}},{"value":"/ [`Hir`](struct.Hir.html).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365591,"byte_end":365620,"line_start":1391,"line_end":1391,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3078},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366237,"byte_end":366246,"line_start":1408,"line_end":1408,"column_start":5,"column_end":14},"name":"ZeroOrOne","qualname":"::hir::RepetitionKind::ZeroOrOne","value":"RepetitionKind::ZeroOrOne","parent":{"krate":0,"index":3077},"children":[],"decl_id":null,"docs":" Matches a sub-expression zero or one times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression zero or one times.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366185,"byte_end":366232,"line_start":1407,"line_end":1407,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3080},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366305,"byte_end":366315,"line_start":1410,"line_end":1410,"column_start":5,"column_end":15},"name":"ZeroOrMore","qualname":"::hir::RepetitionKind::ZeroOrMore","value":"RepetitionKind::ZeroOrMore","parent":{"krate":0,"index":3077},"children":[],"decl_id":null,"docs":" Matches a sub-expression zero or more times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression zero or more times.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366252,"byte_end":366300,"line_start":1409,"line_end":1409,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3082},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366373,"byte_end":366382,"line_start":1412,"line_end":1412,"column_start":5,"column_end":14},"name":"OneOrMore","qualname":"::hir::RepetitionKind::OneOrMore","value":"RepetitionKind::OneOrMore","parent":{"krate":0,"index":3077},"children":[],"decl_id":null,"docs":" Matches a sub-expression one or more times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression one or more times.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366321,"byte_end":366368,"line_start":1411,"line_end":1411,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3084},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366454,"byte_end":366459,"line_start":1414,"line_end":1414,"column_start":5,"column_end":10},"name":"Range","qualname":"::hir::RepetitionKind::Range","value":"RepetitionKind::Range(RepetitionRange)","parent":{"krate":0,"index":3077},"children":[],"decl_id":null,"docs":" Matches a sub-expression within a bounded range of times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression within a bounded range of times.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366388,"byte_end":366449,"line_start":1413,"line_end":1413,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":3077},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366164,"byte_end":366178,"line_start":1406,"line_end":1406,"column_start":10,"column_end":24},"name":"RepetitionKind","qualname":"::hir::RepetitionKind","value":"RepetitionKind::{ZeroOrOne, ZeroOrMore, OneOrMore, Range}","parent":null,"children":[{"krate":0,"index":3078},{"krate":0,"index":3080},{"krate":0,"index":3082},{"krate":0,"index":3084}],"decl_id":null,"docs":" The kind of a repetition operator.\n","sig":null,"attributes":[{"value":"/ The kind of a repetition operator.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366077,"byte_end":366115,"line_start":1404,"line_end":1404,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3099},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366656,"byte_end":366663,"line_start":1421,"line_end":1421,"column_start":5,"column_end":12},"name":"Exactly","qualname":"::hir::RepetitionRange::Exactly","value":"RepetitionRange::Exactly(u32)","parent":{"krate":0,"index":3098},"children":[],"decl_id":null,"docs":" Matches a sub-expression exactly this many times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression exactly this many times.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366598,"byte_end":366651,"line_start":1420,"line_end":1420,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3102},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366733,"byte_end":366740,"line_start":1423,"line_end":1423,"column_start":5,"column_end":12},"name":"AtLeast","qualname":"::hir::RepetitionRange::AtLeast","value":"RepetitionRange::AtLeast(u32)","parent":{"krate":0,"index":3098},"children":[],"decl_id":null,"docs":" Matches a sub-expression at least this many times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression at least this many times.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366674,"byte_end":366728,"line_start":1422,"line_end":1422,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3105},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366826,"byte_end":366833,"line_start":1425,"line_end":1425,"column_start":5,"column_end":12},"name":"Bounded","qualname":"::hir::RepetitionRange::Bounded","value":"RepetitionRange::Bounded(u32, u32)","parent":{"krate":0,"index":3098},"children":[],"decl_id":null,"docs":" Matches a sub-expression at least `m` times and at most `n` times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression at least `m` times and at most `n` times.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366751,"byte_end":366821,"line_start":1424,"line_end":1424,"column_start":5,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":3098},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366576,"byte_end":366591,"line_start":1419,"line_end":1419,"column_start":10,"column_end":25},"name":"RepetitionRange","qualname":"::hir::RepetitionRange","value":"RepetitionRange::{Exactly, AtLeast, Bounded}","parent":null,"children":[{"krate":0,"index":3099},{"krate":0,"index":3102},{"krate":0,"index":3105}],"decl_id":null,"docs":" The kind of a counted repetition operator.\n","sig":null,"attributes":[{"value":"/ The kind of a counted repetition operator.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":366481,"byte_end":366527,"line_start":1417,"line_end":1417,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":3155},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598742,"byte_end":598755,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"ParserBuilder","qualname":"::parser::ParserBuilder","value":"ParserBuilder {  }","parent":null,"children":[{"krate":0,"index":3156},{"krate":0,"index":3157}],"decl_id":null,"docs":" A builder for a regular expression parser.","sig":null,"attributes":[{"value":"/ A builder for a regular expression parser.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598363,"byte_end":598409,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598410,"byte_end":598413,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This builder permits modifying configuration options for the parser.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598414,"byte_end":598486,"line_start":8,"line_end":8,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598487,"byte_end":598490,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This type combines the builder options for both the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598491,"byte_end":598546,"line_start":10,"line_end":10,"column_start":1,"column_end":56}},{"value":"/ [AST `ParserBuilder`](ast/parse/struct.ParserBuilder.html)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598547,"byte_end":598609,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/ and the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598610,"byte_end":598621,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/ [HIR `TranslatorBuilder`](hir/translate/struct.TranslatorBuilder.html).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598622,"byte_end":598697,"line_start":13,"line_end":13,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598939,"byte_end":598942,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserBuilder>::new","value":"fn () -> ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser builder with a default configuration.\n","sig":null,"attributes":[{"value":"/ Create a new parser builder with a default configuration.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598866,"byte_end":598927,"line_start":21,"line_end":21,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599086,"byte_end":599091,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"build","qualname":"<ParserBuilder>::build","value":"fn (&self) -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Build a parser from this configuration with the given pattern.\n","sig":null,"attributes":[{"value":"/ Build a parser from this configuration with the given pattern.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599008,"byte_end":599074,"line_start":26,"line_end":26,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600653,"byte_end":600663,"line_start":56,"line_end":56,"column_start":12,"column_end":22},"name":"nest_limit","qualname":"<ParserBuilder>::nest_limit","value":"fn (&mut self, limit: u32) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the nesting limit for this parser.","sig":null,"attributes":[{"value":"/ Set the nesting limit for this parser.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599186,"byte_end":599228,"line_start":31,"line_end":31,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599233,"byte_end":599236,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ The nesting limit controls how deep the abstract syntax tree is allowed","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599241,"byte_end":599316,"line_start":33,"line_end":33,"column_start":5,"column_end":80}},{"value":"/ to be. If the AST exceeds the given limit (e.g., with too many nested","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599321,"byte_end":599394,"line_start":34,"line_end":34,"column_start":5,"column_end":78}},{"value":"/ groups), then an error is returned by the parser.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599399,"byte_end":599452,"line_start":35,"line_end":35,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599457,"byte_end":599460,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The purpose of this limit is to act as a heuristic to prevent stack","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599465,"byte_end":599536,"line_start":37,"line_end":37,"column_start":5,"column_end":76}},{"value":"/ overflow for consumers that do structural induction on an `Ast` using","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599541,"byte_end":599614,"line_start":38,"line_end":38,"column_start":5,"column_end":78}},{"value":"/ explicit recursion. While this crate never does this (instead using","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599619,"byte_end":599690,"line_start":39,"line_end":39,"column_start":5,"column_end":76}},{"value":"/ constant stack space and moving the call stack to the heap), other","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599695,"byte_end":599765,"line_start":40,"line_end":40,"column_start":5,"column_end":75}},{"value":"/ crates may.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599770,"byte_end":599785,"line_start":41,"line_end":41,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599790,"byte_end":599793,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ This limit is not checked until the entire Ast is parsed. Therefore,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599798,"byte_end":599870,"line_start":43,"line_end":43,"column_start":5,"column_end":77}},{"value":"/ if callers want to put a limit on the amount of heap space used, then","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599875,"byte_end":599948,"line_start":44,"line_end":44,"column_start":5,"column_end":78}},{"value":"/ they should impose a limit on the length, in bytes, of the concrete","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":599953,"byte_end":600024,"line_start":45,"line_end":45,"column_start":5,"column_end":76}},{"value":"/ pattern string. In particular, this is viable since this parser","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600029,"byte_end":600096,"line_start":46,"line_end":46,"column_start":5,"column_end":72}},{"value":"/ implementation will limit itself to heap space proportional to the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600101,"byte_end":600171,"line_start":47,"line_end":47,"column_start":5,"column_end":75}},{"value":"/ lenth of the pattern string.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600176,"byte_end":600208,"line_start":48,"line_end":48,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600213,"byte_end":600216,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ Note that a nest limit of `0` will return a nest limit error for most","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600221,"byte_end":600294,"line_start":50,"line_end":50,"column_start":5,"column_end":78}},{"value":"/ patterns but not all. For example, a nest limit of `0` permits `a` but","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600299,"byte_end":600373,"line_start":51,"line_end":51,"column_start":5,"column_end":79}},{"value":"/ not `ab`, since `ab` requires a concatenation, which results in a nest","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600378,"byte_end":600452,"line_start":52,"line_end":52,"column_start":5,"column_end":79}},{"value":"/ depth of `1`. In general, a nest limit is not something that manifests","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600457,"byte_end":600531,"line_start":53,"line_end":53,"column_start":5,"column_end":79}},{"value":"/ in an obvious way in the concrete syntax, therefore, it should not be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600536,"byte_end":600609,"line_start":54,"line_end":54,"column_start":5,"column_end":78}},{"value":"/ used in a granular way.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600614,"byte_end":600641,"line_start":55,"line_end":55,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601606,"byte_end":601611,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"octal","qualname":"<ParserBuilder>::octal","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to support octal syntax or not.","sig":null,"attributes":[{"value":"/ Whether to support octal syntax or not.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600771,"byte_end":600814,"line_start":61,"line_end":61,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600819,"byte_end":600822,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Octal syntax is a little-known way of uttering Unicode codepoints in","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600827,"byte_end":600899,"line_start":63,"line_end":63,"column_start":5,"column_end":77}},{"value":"/ a regular expression. For example, `a`, `\\x61`, `\\u0061` and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600904,"byte_end":600968,"line_start":64,"line_end":64,"column_start":5,"column_end":69}},{"value":"/ `\\141` are all equivalent regular expressions, where the last example","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":600973,"byte_end":601046,"line_start":65,"line_end":65,"column_start":5,"column_end":78}},{"value":"/ shows octal syntax.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601051,"byte_end":601074,"line_start":66,"line_end":66,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601079,"byte_end":601082,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ While supporting octal syntax isn't in and of itself a problem, it does","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601087,"byte_end":601162,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"/ make good error messages harder. That is, in PCRE based regex engines,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601167,"byte_end":601241,"line_start":69,"line_end":69,"column_start":5,"column_end":79}},{"value":"/ syntax like `\\0` invokes a backreference, which is explicitly","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601246,"byte_end":601311,"line_start":70,"line_end":70,"column_start":5,"column_end":70}},{"value":"/ unsupported in Rust's regex engine. However, many users expect it to","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601316,"byte_end":601388,"line_start":71,"line_end":71,"column_start":5,"column_end":77}},{"value":"/ be supported. Therefore, when octal support is disabled, the error","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601393,"byte_end":601463,"line_start":72,"line_end":72,"column_start":5,"column_end":75}},{"value":"/ message will explicitly mention that backreferences aren't supported.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601468,"byte_end":601541,"line_start":73,"line_end":73,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601546,"byte_end":601549,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Octal syntax is disabled by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601554,"byte_end":601594,"line_start":75,"line_end":75,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602359,"byte_end":602377,"line_start":92,"line_end":92,"column_start":12,"column_end":30},"name":"allow_invalid_utf8","qualname":"<ParserBuilder>::allow_invalid_utf8","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" When enabled, the parser will permit the construction of a regular\n expression that may match invalid UTF-8.","sig":null,"attributes":[{"value":"/ When enabled, the parser will permit the construction of a regular","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601711,"byte_end":601781,"line_start":81,"line_end":81,"column_start":5,"column_end":75}},{"value":"/ expression that may match invalid UTF-8.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601786,"byte_end":601830,"line_start":82,"line_end":82,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601835,"byte_end":601838,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ When disabled (the default), the parser is guaranteed to produce","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601843,"byte_end":601911,"line_start":84,"line_end":84,"column_start":5,"column_end":73}},{"value":"/ an expression that will only ever match valid UTF-8 (otherwise, the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601916,"byte_end":601987,"line_start":85,"line_end":85,"column_start":5,"column_end":76}},{"value":"/ parser will return an error).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":601992,"byte_end":602025,"line_start":86,"line_end":86,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602030,"byte_end":602033,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Perhaps surprisingly, when invalid UTF-8 isn't allowed, a negated ASCII","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602038,"byte_end":602113,"line_start":88,"line_end":88,"column_start":5,"column_end":80}},{"value":"/ word boundary (uttered as `(?-u:\\B)` in the concrete syntax) will cause","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602118,"byte_end":602193,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ the parser to return an error. Namely, a negated ASCII word boundary","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602198,"byte_end":602270,"line_start":90,"line_end":90,"column_start":5,"column_end":77}},{"value":"/ can result in matching positions that aren't valid UTF-8 boundaries.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602275,"byte_end":602347,"line_start":91,"line_end":91,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602937,"byte_end":602954,"line_start":105,"line_end":105,"column_start":12,"column_end":29},"name":"ignore_whitespace","qualname":"<ParserBuilder>::ignore_whitespace","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable verbose mode in the regular expression.","sig":null,"attributes":[{"value":"/ Enable verbose mode in the regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602490,"byte_end":602540,"line_start":97,"line_end":97,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602545,"byte_end":602548,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ When enabled, verbose mode permits insigificant whitespace in many","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602553,"byte_end":602623,"line_start":99,"line_end":99,"column_start":5,"column_end":75}},{"value":"/ places in the regular expression, as well as comments. Comments are","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602628,"byte_end":602699,"line_start":100,"line_end":100,"column_start":5,"column_end":76}},{"value":"/ started using `#` and continue until the end of the line.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602704,"byte_end":602765,"line_start":101,"line_end":101,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602770,"byte_end":602773,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ By default, this is disabled. It may be selectively enabled in the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602778,"byte_end":602848,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/ regular expression by using the `x` flag regardless of this setting.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":602853,"byte_end":602925,"line_start":104,"line_end":104,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603285,"byte_end":603301,"line_start":114,"line_end":114,"column_start":12,"column_end":28},"name":"case_insensitive","qualname":"<ParserBuilder>::case_insensitive","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the case insensitive flag by default.","sig":null,"attributes":[{"value":"/ Enable or disable the case insensitive flag by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603066,"byte_end":603125,"line_start":110,"line_end":110,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603130,"byte_end":603133,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ By default this is disabled. It may alternatively be selectively","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603138,"byte_end":603206,"line_start":112,"line_end":112,"column_start":5,"column_end":73}},{"value":"/ enabled in the regular expression itself via the `i` flag.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603211,"byte_end":603273,"line_start":113,"line_end":113,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603634,"byte_end":603644,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"multi_line","qualname":"<ParserBuilder>::multi_line","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the multi-line matching flag by default.","sig":null,"attributes":[{"value":"/ Enable or disable the multi-line matching flag by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603412,"byte_end":603474,"line_start":119,"line_end":119,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603479,"byte_end":603482,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ By default this is disabled. It may alternatively be selectively","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603487,"byte_end":603555,"line_start":121,"line_end":121,"column_start":5,"column_end":73}},{"value":"/ enabled in the regular expression itself via the `m` flag.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603560,"byte_end":603622,"line_start":122,"line_end":122,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603979,"byte_end":603999,"line_start":132,"line_end":132,"column_start":12,"column_end":32},"name":"dot_matches_new_line","qualname":"<ParserBuilder>::dot_matches_new_line","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"dot matches any character\" flag by default.","sig":null,"attributes":[{"value":"/ Enable or disable the \"dot matches any character\" flag by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603749,"byte_end":603819,"line_start":128,"line_end":128,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603824,"byte_end":603827,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ By default this is disabled. It may alternatively be selectively","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603832,"byte_end":603900,"line_start":130,"line_end":130,"column_start":5,"column_end":73}},{"value":"/ enabled in the regular expression itself via the `s` flag.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":603905,"byte_end":603967,"line_start":131,"line_end":131,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604329,"byte_end":604339,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"swap_greed","qualname":"<ParserBuilder>::swap_greed","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"swap greed\" flag by default.","sig":null,"attributes":[{"value":"/ Enable or disable the \"swap greed\" flag by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604114,"byte_end":604169,"line_start":137,"line_end":137,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604174,"byte_end":604177,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ By default this is disabled. It may alternatively be selectively","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604182,"byte_end":604250,"line_start":139,"line_end":139,"column_start":5,"column_end":73}},{"value":"/ enabled in the regular expression itself via the `U` flag.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604255,"byte_end":604317,"line_start":140,"line_end":140,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604898,"byte_end":604905,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ParserBuilder>::unicode","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the Unicode flag (`u`) by default.","sig":null,"attributes":[{"value":"/ Enable or disable the Unicode flag (`u`) by default.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604444,"byte_end":604500,"line_start":146,"line_end":146,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604505,"byte_end":604508,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ By default this is **enabled**. It may alternatively be selectively","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604513,"byte_end":604584,"line_start":148,"line_end":148,"column_start":5,"column_end":76}},{"value":"/ disabled in the regular expression itself via the `u` flag.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604589,"byte_end":604652,"line_start":149,"line_end":149,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604657,"byte_end":604660,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Note that unless `allow_invalid_utf8` is enabled (it's disabled by","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604665,"byte_end":604735,"line_start":151,"line_end":151,"column_start":5,"column_end":75}},{"value":"/ default), a regular expression will fail to parse if Unicode mode is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604740,"byte_end":604812,"line_start":152,"line_end":152,"column_start":5,"column_end":77}},{"value":"/ disabled and a sub-expression could possibly match invalid UTF-8.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":604817,"byte_end":604886,"line_start":153,"line_end":153,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3164},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605782,"byte_end":605788,"line_start":175,"line_end":175,"column_start":12,"column_end":18},"name":"Parser","qualname":"::parser::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":3165},{"krate":0,"index":3166}],"decl_id":null,"docs":" A convenience parser for regular expressions.","sig":null,"attributes":[{"value":"/ A convenience parser for regular expressions.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605005,"byte_end":605054,"line_start":160,"line_end":160,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605055,"byte_end":605058,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ This parser takes as input a regular expression pattern string (the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605059,"byte_end":605130,"line_start":162,"line_end":162,"column_start":1,"column_end":72}},{"value":"/ \"concrete syntax\") and returns a high-level intermediate representation","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605131,"byte_end":605206,"line_start":163,"line_end":163,"column_start":1,"column_end":76}},{"value":"/ (the HIR) suitable for most types of analysis. In particular, this parser","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605207,"byte_end":605284,"line_start":164,"line_end":164,"column_start":1,"column_end":78}},{"value":"/ hides the intermediate state of producing an AST (the \"abstract syntax\").","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605285,"byte_end":605362,"line_start":165,"line_end":165,"column_start":1,"column_end":78}},{"value":"/ The AST is itself far more complex than the HIR, so this parser serves as a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605363,"byte_end":605442,"line_start":166,"line_end":166,"column_start":1,"column_end":80}},{"value":"/ convenience for never having to deal with it at all.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605443,"byte_end":605499,"line_start":167,"line_end":167,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605500,"byte_end":605503,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ If callers have more fine grained use cases that need an AST, then please","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605504,"byte_end":605581,"line_start":169,"line_end":169,"column_start":1,"column_end":78}},{"value":"/ see the [`ast::parse`](ast/parse/index.html) module.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605582,"byte_end":605638,"line_start":170,"line_end":170,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605639,"byte_end":605642,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ A `Parser` can be configured in more detail via a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605643,"byte_end":605696,"line_start":172,"line_end":172,"column_start":1,"column_end":54}},{"value":"/ [`ParserBuilder`](struct.ParserBuilder.html).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605697,"byte_end":605746,"line_start":173,"line_end":173,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":606235,"byte_end":606238,"line_start":189,"line_end":189,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser>::new","value":"fn () -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser with a default configuration.","sig":null,"attributes":[{"value":"/ Create a new parser with a default configuration.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605878,"byte_end":605931,"line_start":181,"line_end":181,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605936,"byte_end":605939,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ The parser can be run with `parse` method. The parse method returns","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605944,"byte_end":606015,"line_start":183,"line_end":183,"column_start":5,"column_end":76}},{"value":"/ a high level intermediate representation of the given regular","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":606020,"byte_end":606085,"line_start":184,"line_end":184,"column_start":5,"column_end":70}},{"value":"/ expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":606090,"byte_end":606105,"line_start":185,"line_end":185,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":606110,"byte_end":606113,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ To set configuration options on the parser, use","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":606118,"byte_end":606169,"line_start":187,"line_end":187,"column_start":5,"column_end":56}},{"value":"/ [`ParserBuilder`](struct.ParserBuilder.html).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":606174,"byte_end":606223,"line_start":188,"line_end":188,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":606400,"byte_end":606405,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"parse","qualname":"<Parser>::parse","value":"fn (&mut self, pattern: &str) -> Result<hir::Hir>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression into a high level intermediate\n representation.\n","sig":null,"attributes":[{"value":"/ Parse the regular expression into a high level intermediate","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":606301,"byte_end":606364,"line_start":193,"line_end":193,"column_start":5,"column_end":68}},{"value":"/ representation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":606369,"byte_end":606388,"line_start":194,"line_end":194,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":3180},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":607700,"byte_end":607713,"line_start":36,"line_end":36,"column_start":12,"column_end":25},"name":"CaseFoldError","qualname":"::unicode::CaseFoldError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that occurs when Unicode-aware simple case folding fails.","sig":null,"attributes":[{"value":"/ An error that occurs when Unicode-aware simple case folding fails.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":607378,"byte_end":607448,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":607449,"byte_end":607452,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This error can occur when the case mapping tables necessary for Unicode","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":607453,"byte_end":607528,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/ aware case folding are unavailable. This only occurs when the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":607529,"byte_end":607594,"line_start":33,"line_end":33,"column_start":1,"column_end":66}},{"value":"/ `unicode-case` feature is disabled. (The feature is enabled by default.)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":607595,"byte_end":607671,"line_start":34,"line_end":34,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":3185},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":608374,"byte_end":608390,"line_start":56,"line_end":56,"column_start":12,"column_end":28},"name":"UnicodeWordError","qualname":"::unicode::UnicodeWordError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that occurs when the Unicode-aware `\\w` class is unavailable.","sig":null,"attributes":[{"value":"/ An error that occurs when the Unicode-aware `\\w` class is unavailable.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":608039,"byte_end":608113,"line_start":50,"line_end":50,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":608114,"byte_end":608117,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This error can occur when the data tables necessary for the Unicode aware","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":608118,"byte_end":608195,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ Perl character class `\\w` are unavailable. This only occurs when the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":608196,"byte_end":608268,"line_start":53,"line_end":53,"column_start":1,"column_end":73}},{"value":"/ `unicode-perl` feature is disabled. (The feature is enabled by default.)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":608269,"byte_end":608345,"line_start":54,"line_end":54,"column_start":1,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":1562},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utf8","qualname":"::utf8","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","parent":null,"children":[{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":3226},{"krate":0,"index":3265},{"krate":0,"index":3260},{"krate":0,"index":3254},{"krate":0,"index":3255},{"krate":0,"index":3250},{"krate":0,"index":3251},{"krate":0,"index":3244},{"krate":0,"index":3242},{"krate":0,"index":1567},{"krate":0,"index":1574},{"krate":0,"index":1579},{"krate":0,"index":3266},{"krate":0,"index":3289},{"krate":0,"index":3288},{"krate":0,"index":3285},{"krate":0,"index":3286},{"krate":0,"index":3281},{"krate":0,"index":3282},{"krate":0,"index":3271},{"krate":0,"index":3269},{"krate":0,"index":1582},{"krate":0,"index":1585},{"krate":0,"index":1587},{"krate":0,"index":1589},{"krate":0,"index":1593},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1603},{"krate":0,"index":1609}],"decl_id":null,"docs":"Converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes.","sig":null,"attributes":[{"value":"!\nConverts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes.\n\nThis is sub-module is useful for constructing byte based automatons that need\nto embed UTF-8 decoding. The most common use of this module is in conjunction\nwith the [`hir::ClassUnicodeRange`](../hir/struct.ClassUnicodeRange.html) type.\n\nSee the documentation on the `Utf8Sequences` iterator for more details and\nan example.\n\n# Wait, what is this?\n\nThis is simplest to explain with an example. Let's say you wanted to test\nwhether a particular byte sequence was a Cyrillic character. One possible\nscalar value range is `[0400-04FF]`. The set of allowed bytes for this\nrange can be expressed as a sequence of byte ranges:\n\n```ignore\n[D0-D3][80-BF]\n```\n\nThis is simple enough: simply encode the boundaries, `0400` encodes to\n`D0 80` and `04FF` encodes to `D3 BF`, and create ranges from each\ncorresponding pair of bytes: `D0` to `D3` and `80` to `BF`.\n\nHowever, what if you wanted to add the Cyrillic Supplementary characters to\nyour range? Your range might then become `[0400-052F]`. The same procedure\nas above doesn't quite work because `052F` encodes to `D4 AF`. The byte ranges\nyou'd get from the previous transformation would be `[D0-D4][80-AF]`. However,\nthis isn't quite correct because this range doesn't capture many characters,\nfor example, `04FF` (because its last byte, `BF` isn't in the range `80-AF`).\n\nInstead, you need multiple sequences of byte ranges:\n\n```ignore\n[D0-D3][80-BF]  # matches codepoints 0400-04FF\n[D4][80-AF]     # matches codepoints 0500-052F\n```\n\nThis gets even more complicated if you want bigger ranges, particularly if\nthey naively contain surrogate codepoints. For example, the sequence of byte\nranges for the basic multilingual plane (`[0000-FFFF]`) look like this:\n\n```ignore\n[0-7F]\n[C2-DF][80-BF]\n[E0][A0-BF][80-BF]\n[E1-EC][80-BF][80-BF]\n[ED][80-9F][80-BF]\n[EE-EF][80-BF][80-BF]\n```\n\nNote that the byte ranges above will *not* match any erroneous encoding of\nUTF-8, including encodings of surrogate codepoints.\n\nAnd, of course, for all of Unicode (`[000000-10FFFF]`):\n\n```ignore\n[0-7F]\n[C2-DF][80-BF]\n[E0][A0-BF][80-BF]\n[E1-EC][80-BF][80-BF]\n[ED][80-9F][80-BF]\n[EE-EF][80-BF][80-BF]\n[F0][90-BF][80-BF][80-BF]\n[F1-F3][80-BF][80-BF][80-BF]\n[F4][80-8F][80-BF][80-BF]\n```\n\nThis module automates the process of creating these byte ranges from ranges of\nUnicode scalar values.\n\n# Lineage\n\nI got the idea and general implementation strategy from Russ Cox in his\n[article on regexps](https://web.archive.org/web/20160404141123/https://swtch.com/~rsc/regexp/regexp3.html) and RE2.\nRuss Cox got it from Ken Thompson's `grep` (no source, folk lore?).\nI also got the idea from\n[Lucene](https://github.com/apache/lucene-solr/blob/ae93f4e7ac6a3908046391de35d4f50a0d3c59ca/lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8.java),\nwhich uses it for executing automata on their term index.\n*/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1364304,"byte_end":1367216,"line_start":1,"line_end":81,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367218,"byte_end":1367240,"line_start":83,"line_end":83,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3227},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367722,"byte_end":1367725,"line_start":101,"line_end":101,"column_start":5,"column_end":8},"name":"One","qualname":"::utf8::Utf8Sequence::One","value":"Utf8Sequence::One(Utf8Range)","parent":{"krate":0,"index":3226},"children":[],"decl_id":null,"docs":" One byte range.\n","sig":null,"attributes":[{"value":"/ One byte range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367698,"byte_end":1367717,"line_start":100,"line_end":100,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3230},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367778,"byte_end":1367781,"line_start":103,"line_end":103,"column_start":5,"column_end":8},"name":"Two","qualname":"::utf8::Utf8Sequence::Two","value":"Utf8Sequence::Two([Utf8Range; 2])","parent":{"krate":0,"index":3226},"children":[],"decl_id":null,"docs":" Two successive byte ranges.\n","sig":null,"attributes":[{"value":"/ Two successive byte ranges.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367742,"byte_end":1367773,"line_start":102,"line_end":102,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3234},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367841,"byte_end":1367846,"line_start":105,"line_end":105,"column_start":5,"column_end":10},"name":"Three","qualname":"::utf8::Utf8Sequence::Three","value":"Utf8Sequence::Three([Utf8Range; 3])","parent":{"krate":0,"index":3226},"children":[],"decl_id":null,"docs":" Three successive byte ranges.\n","sig":null,"attributes":[{"value":"/ Three successive byte ranges.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367803,"byte_end":1367836,"line_start":104,"line_end":104,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3238},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367905,"byte_end":1367909,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Four","qualname":"::utf8::Utf8Sequence::Four","value":"Utf8Sequence::Four([Utf8Range; 4])","parent":{"krate":0,"index":3226},"children":[],"decl_id":null,"docs":" Four successive byte ranges.\n","sig":null,"attributes":[{"value":"/ Four successive byte ranges.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367868,"byte_end":1367900,"line_start":106,"line_end":106,"column_start":5,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":3226},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367679,"byte_end":1367691,"line_start":99,"line_end":99,"column_start":10,"column_end":22},"name":"Utf8Sequence","qualname":"::utf8::Utf8Sequence","value":"Utf8Sequence::{One, Two, Three, Four}","parent":null,"children":[{"krate":0,"index":3227},{"krate":0,"index":3230},{"krate":0,"index":3234},{"krate":0,"index":3238}],"decl_id":null,"docs":" Utf8Sequence represents a sequence of byte ranges.","sig":null,"attributes":[{"value":"/ Utf8Sequence represents a sequence of byte ranges.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367322,"byte_end":1367376,"line_start":91,"line_end":91,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367377,"byte_end":1367380,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ To match a Utf8Sequence, a candidate byte sequence must match each","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367381,"byte_end":1367451,"line_start":93,"line_end":93,"column_start":1,"column_end":71}},{"value":"/ successive range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367452,"byte_end":1367473,"line_start":94,"line_end":94,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367474,"byte_end":1367477,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ For example, if there are two ranges, `[C2-DF][80-BF]`, then the byte","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367478,"byte_end":1367551,"line_start":96,"line_end":96,"column_start":1,"column_end":74}},{"value":"/ sequence `\\xDD\\x61` would not match because `0x61 < 0x80`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367552,"byte_end":1367614,"line_start":97,"line_end":97,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369022,"byte_end":1369030,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Utf8Sequence>::as_slice","value":"fn (&self) -> &[Utf8Range]","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying sequence of byte ranges as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the underlying sequence of byte ranges as a slice.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1368948,"byte_end":1369010,"line_start":137,"line_end":137,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369432,"byte_end":1369435,"line_start":151,"line_end":151,"column_start":12,"column_end":15},"name":"len","qualname":"<Utf8Sequence>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of byte ranges in this sequence.","sig":null,"attributes":[{"value":"/ Returns the number of byte ranges in this sequence.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369285,"byte_end":1369340,"line_start":148,"line_end":148,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369345,"byte_end":1369348,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ The length is guaranteed to be in the closed interval `[1, 4]`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369353,"byte_end":1369420,"line_start":150,"line_end":150,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369915,"byte_end":1369922,"line_start":171,"line_end":171,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Utf8Sequence>::reverse","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reverses the ranges in this sequence.","sig":null,"attributes":[{"value":"/ Reverses the ranges in this sequence.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369495,"byte_end":1369536,"line_start":155,"line_end":155,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369541,"byte_end":1369544,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ For example, if this corresponds to the following sequence:","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369549,"byte_end":1369612,"line_start":157,"line_end":157,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369617,"byte_end":1369620,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369625,"byte_end":1369638,"line_start":159,"line_end":159,"column_start":5,"column_end":18}},{"value":"/ [D0-D3][80-BF]","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369643,"byte_end":1369661,"line_start":160,"line_end":160,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369666,"byte_end":1369673,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369678,"byte_end":1369681,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Then after reversal, it will be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369686,"byte_end":1369721,"line_start":163,"line_end":163,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369726,"byte_end":1369729,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369734,"byte_end":1369747,"line_start":165,"line_end":165,"column_start":5,"column_end":18}},{"value":"/ [80-BF][D0-D3]","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369752,"byte_end":1369770,"line_start":166,"line_end":166,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369775,"byte_end":1369782,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369787,"byte_end":1369790,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ This is useful when one is constructing a UTF-8 automaton to match","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369795,"byte_end":1369865,"line_start":169,"line_end":169,"column_start":5,"column_end":75}},{"value":"/ character classes in reverse.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1369870,"byte_end":1369903,"line_start":170,"line_end":170,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1370301,"byte_end":1370308,"line_start":182,"line_end":182,"column_start":12,"column_end":19},"name":"matches","qualname":"<Utf8Sequence>::matches","value":"fn (&self, bytes: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if a prefix of `bytes` matches this sequence\n of byte ranges.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if a prefix of `bytes` matches this sequence","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1370192,"byte_end":1370265,"line_start":180,"line_end":180,"column_start":5,"column_end":78}},{"value":"/ of byte ranges.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1370270,"byte_end":1370289,"line_start":181,"line_end":181,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":3266},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371358,"byte_end":1371367,"line_start":220,"line_end":220,"column_start":12,"column_end":21},"name":"Utf8Range","qualname":"::utf8::Utf8Range","value":"Utf8Range { start, end }","parent":null,"children":[{"krate":0,"index":3267},{"krate":0,"index":3268}],"decl_id":null,"docs":" A single inclusive range of UTF-8 bytes.\n","sig":null,"attributes":[{"value":"/ A single inclusive range of UTF-8 bytes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371247,"byte_end":1371291,"line_start":218,"line_end":218,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":3267},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371419,"byte_end":1371424,"line_start":222,"line_end":222,"column_start":9,"column_end":14},"name":"start","qualname":"::utf8::Utf8Range::start","value":"u8","parent":{"krate":0,"index":3266},"children":[],"decl_id":null,"docs":" Start of byte range (inclusive).\n","sig":null,"attributes":[{"value":"/ Start of byte range (inclusive).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371374,"byte_end":1371410,"line_start":221,"line_end":221,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":3268},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371477,"byte_end":1371480,"line_start":224,"line_end":224,"column_start":9,"column_end":12},"name":"end","qualname":"::utf8::Utf8Range::end","value":"u8","parent":{"krate":0,"index":3266},"children":[],"decl_id":null,"docs":" End of byte range (inclusive).\n","sig":null,"attributes":[{"value":"/ End of byte range (inclusive).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371434,"byte_end":1371468,"line_start":223,"line_end":223,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1584},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371667,"byte_end":1371674,"line_start":233,"line_end":233,"column_start":12,"column_end":19},"name":"matches","qualname":"<Utf8Range>::matches","value":"fn (&self, b: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if the given byte is in this range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371591,"byte_end":1371655,"line_start":232,"line_end":232,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1587},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374023,"byte_end":1374036,"line_start":298,"line_end":298,"column_start":12,"column_end":25},"name":"Utf8Sequences","qualname":"::utf8::Utf8Sequences","value":"Utf8Sequences {  }","parent":null,"children":[{"krate":0,"index":1588}],"decl_id":null,"docs":" An iterator over ranges of matching UTF-8 byte sequences.","sig":null,"attributes":[{"value":"/ An iterator over ranges of matching UTF-8 byte sequences.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372015,"byte_end":1372076,"line_start":248,"line_end":248,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372077,"byte_end":1372080,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ The iteration represents an alternation of comprehensive byte sequences","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372081,"byte_end":1372156,"line_start":250,"line_end":250,"column_start":1,"column_end":76}},{"value":"/ that match precisely the set of UTF-8 encoded scalar values.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372157,"byte_end":1372221,"line_start":251,"line_end":251,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372222,"byte_end":1372225,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ A byte sequence corresponds to one of the scalar values in the range given","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372226,"byte_end":1372304,"line_start":253,"line_end":253,"column_start":1,"column_end":79}},{"value":"/ if and only if it completely matches exactly one of the sequences of byte","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372305,"byte_end":1372382,"line_start":254,"line_end":254,"column_start":1,"column_end":78}},{"value":"/ ranges produced by this iterator.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372383,"byte_end":1372420,"line_start":255,"line_end":255,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372421,"byte_end":1372424,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ Each sequence of byte ranges matches a unique set of bytes. That is, no two","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372425,"byte_end":1372504,"line_start":257,"line_end":257,"column_start":1,"column_end":80}},{"value":"/ sequences will match the same bytes.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372505,"byte_end":1372545,"line_start":258,"line_end":258,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372546,"byte_end":1372549,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372550,"byte_end":1372563,"line_start":260,"line_end":260,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372564,"byte_end":1372567,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ This shows how to match an arbitrary byte sequence against a range of","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372568,"byte_end":1372641,"line_start":262,"line_end":262,"column_start":1,"column_end":74}},{"value":"/ scalar values.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372642,"byte_end":1372660,"line_start":263,"line_end":263,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372661,"byte_end":1372664,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372665,"byte_end":1372676,"line_start":265,"line_end":265,"column_start":1,"column_end":12}},{"value":"/ use regex_syntax::utf8::{Utf8Sequences, Utf8Sequence};","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372677,"byte_end":1372735,"line_start":266,"line_end":266,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372736,"byte_end":1372739,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ fn matches(seqs: &[Utf8Sequence], bytes: &[u8]) -> bool {","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372740,"byte_end":1372801,"line_start":268,"line_end":268,"column_start":1,"column_end":62}},{"value":"/     for range in seqs {","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372802,"byte_end":1372829,"line_start":269,"line_end":269,"column_start":1,"column_end":28}},{"value":"/         if range.matches(bytes) {","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372830,"byte_end":1372867,"line_start":270,"line_end":270,"column_start":1,"column_end":38}},{"value":"/             return true;","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372868,"byte_end":1372896,"line_start":271,"line_end":271,"column_start":1,"column_end":29}},{"value":"/         }","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372897,"byte_end":1372910,"line_start":272,"line_end":272,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372911,"byte_end":1372920,"line_start":273,"line_end":273,"column_start":1,"column_end":10}},{"value":"/     false","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372921,"byte_end":1372934,"line_start":274,"line_end":274,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372935,"byte_end":1372940,"line_start":275,"line_end":275,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372941,"byte_end":1372944,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ // Test the basic multilingual plane.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372945,"byte_end":1372986,"line_start":277,"line_end":277,"column_start":1,"column_end":42}},{"value":"/ let seqs: Vec<_> = Utf8Sequences::new('\\u{0}', '\\u{FFFF}').collect();","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1372987,"byte_end":1373060,"line_start":278,"line_end":278,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373061,"byte_end":1373064,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ // UTF-8 encoding of 'a'.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373065,"byte_end":1373094,"line_start":280,"line_end":280,"column_start":1,"column_end":30}},{"value":"/ assert!(matches(&seqs, &[0x61]));","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373095,"byte_end":1373132,"line_start":281,"line_end":281,"column_start":1,"column_end":38}},{"value":"/ // UTF-8 encoding of '☃' (`\\u{2603}`).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373133,"byte_end":1373177,"line_start":282,"line_end":282,"column_start":1,"column_end":43}},{"value":"/ assert!(matches(&seqs, &[0xE2, 0x98, 0x83]));","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373178,"byte_end":1373227,"line_start":283,"line_end":283,"column_start":1,"column_end":50}},{"value":"/ // UTF-8 encoding of `\\u{10348}` (outside the BMP).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373228,"byte_end":1373283,"line_start":284,"line_end":284,"column_start":1,"column_end":56}},{"value":"/ assert!(!matches(&seqs, &[0xF0, 0x90, 0x8D, 0x88]));","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373284,"byte_end":1373340,"line_start":285,"line_end":285,"column_start":1,"column_end":57}},{"value":"/ // Tries to match against a UTF-8 encoding of a surrogate codepoint,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373341,"byte_end":1373413,"line_start":286,"line_end":286,"column_start":1,"column_end":73}},{"value":"/ // which is invalid UTF-8, and therefore fails, despite the fact that","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373414,"byte_end":1373487,"line_start":287,"line_end":287,"column_start":1,"column_end":74}},{"value":"/ // the corresponding codepoint (0xD800) falls in the range given.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373488,"byte_end":1373557,"line_start":288,"line_end":288,"column_start":1,"column_end":70}},{"value":"/ assert!(!matches(&seqs, &[0xED, 0xA0, 0x80]));","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373558,"byte_end":1373608,"line_start":289,"line_end":289,"column_start":1,"column_end":51}},{"value":"/ // And fails against plain old invalid UTF-8.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373609,"byte_end":1373658,"line_start":290,"line_end":290,"column_start":1,"column_end":50}},{"value":"/ assert!(!matches(&seqs, &[0xFF, 0xFF]));","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373659,"byte_end":1373703,"line_start":291,"line_end":291,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373704,"byte_end":1373711,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373712,"byte_end":1373715,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ If this example seems circuitous, that's because it is! It's meant to be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373716,"byte_end":1373792,"line_start":294,"line_end":294,"column_start":1,"column_end":77}},{"value":"/ illustrative. In practice, you could just try to decode your byte sequence","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373793,"byte_end":1373871,"line_start":295,"line_end":295,"column_start":1,"column_end":79}},{"value":"/ and compare it with the scalar value range directly. However, this is not","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373872,"byte_end":1373949,"line_start":296,"line_end":296,"column_start":1,"column_end":78}},{"value":"/ always possible (for example, in a byte based automaton).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1373950,"byte_end":1374011,"line_start":297,"line_end":297,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374204,"byte_end":1374207,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"new","qualname":"<Utf8Sequences>::new","value":"fn (start: char, end: char) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator over UTF-8 byte ranges for the scalar value range\n given.\n","sig":null,"attributes":[{"value":"/ Create a new iterator over UTF-8 byte ranges for the scalar value range","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374102,"byte_end":1374177,"line_start":303,"line_end":303,"column_start":5,"column_end":80}},{"value":"/ given.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374182,"byte_end":1374192,"line_start":304,"line_end":304,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1591},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374571,"byte_end":1374576,"line_start":316,"line_end":316,"column_start":12,"column_end":17},"name":"reset","qualname":"<Utf8Sequences>::reset","value":"fn (&mut self, start: char, end: char) -> ()","parent":null,"children":[],"decl_id":null,"docs":" reset resets the scalar value range.\n Any existing state is cleared, but resources may be reused.","sig":null,"attributes":[{"value":"/ reset resets the scalar value range.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374367,"byte_end":1374407,"line_start":311,"line_end":311,"column_start":5,"column_end":45}},{"value":"/ Any existing state is cleared, but resources may be reused.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374412,"byte_end":1374475,"line_start":312,"line_end":312,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374480,"byte_end":1374483,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ N.B. Benchmarks say that this method is dubious.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374488,"byte_end":1374540,"line_start":314,"line_end":314,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1610},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7553,"byte_end":7559,"line_start":177,"line_end":177,"column_start":8,"column_end":14},"name":"escape","qualname":"::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[{"value":"/ Escapes all regular expression meta characters in `text`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7395,"byte_end":7456,"line_start":173,"line_end":173,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7457,"byte_end":7460,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ The string returned may be safely used as a literal in a regular","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7461,"byte_end":7529,"line_start":175,"line_end":175,"column_start":1,"column_end":69}},{"value":"/ expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7530,"byte_end":7545,"line_start":176,"line_end":176,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1611},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7910,"byte_end":7921,"line_start":187,"line_end":187,"column_start":8,"column_end":19},"name":"escape_into","qualname":"::escape_into","value":"fn (text: &str, buf: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Escapes all meta characters in `text` and writes the result into `buf`.","sig":null,"attributes":[{"value":"/ Escapes all meta characters in `text` and writes the result into `buf`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7670,"byte_end":7745,"line_start":183,"line_end":183,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7746,"byte_end":7749,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ This will append escape characters into the given buffer. The characters","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7750,"byte_end":7826,"line_start":185,"line_end":185,"column_start":1,"column_end":77}},{"value":"/ that are appended are safe to use as a literal in a regular expression.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7827,"byte_end":7902,"line_start":186,"line_end":186,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":1612},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8589,"byte_end":8606,"line_start":206,"line_end":206,"column_start":8,"column_end":25},"name":"is_meta_character","qualname":"::is_meta_character","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the give character has significance in a regex.","sig":null,"attributes":[{"value":"/ Returns true if the give character has significance in a regex.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8113,"byte_end":8180,"line_start":197,"line_end":197,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8181,"byte_end":8184,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ These are the only characters that are allowed to be escaped, with one","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8185,"byte_end":8259,"line_start":199,"line_end":199,"column_start":1,"column_end":75}},{"value":"/ exception: an ASCII space character may be escaped when extended mode (with","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8260,"byte_end":8339,"line_start":200,"line_end":200,"column_start":1,"column_end":80}},{"value":"/ the `x` flag) is enabld. In particular, `is_meta_character(' ')` returns","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8340,"byte_end":8416,"line_start":201,"line_end":201,"column_start":1,"column_end":77}},{"value":"/ `false`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8417,"byte_end":8429,"line_start":202,"line_end":202,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8430,"byte_end":8433,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ Note that the set of characters for which this function returns `true` or","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8434,"byte_end":8511,"line_start":204,"line_end":204,"column_start":1,"column_end":78}},{"value":"/ `false` is fixed and won't change in a semver compatible release.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8512,"byte_end":8581,"line_start":205,"line_end":205,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":1613},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9484,"byte_end":9501,"line_start":230,"line_end":230,"column_start":8,"column_end":25},"name":"is_word_character","qualname":"::is_word_character","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given character is a Unicode word\n character.","sig":null,"attributes":[{"value":"/ Returns true if and only if the given character is a Unicode word","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8801,"byte_end":8870,"line_start":214,"line_end":214,"column_start":1,"column_end":70}},{"value":"/ character.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8871,"byte_end":8885,"line_start":215,"line_end":215,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8886,"byte_end":8889,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ A Unicode word character is defined by","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8890,"byte_end":8932,"line_start":217,"line_end":217,"column_start":1,"column_end":43}},{"value":"/ [UTS#18 Annex C](http://unicode.org/reports/tr18/#Compatibility_Properties).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":8933,"byte_end":9013,"line_start":218,"line_end":218,"column_start":1,"column_end":81}},{"value":"/ In particular, a character","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9014,"byte_end":9044,"line_start":219,"line_end":219,"column_start":1,"column_end":31}},{"value":"/ is considered a word character if it is in either of the `Alphabetic` or","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9045,"byte_end":9121,"line_start":220,"line_end":220,"column_start":1,"column_end":77}},{"value":"/ `Join_Control` properties, or is in one of the `Decimal_Number`, `Mark`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9122,"byte_end":9197,"line_start":221,"line_end":221,"column_start":1,"column_end":76}},{"value":"/ or `Connector_Punctuation` general categories.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9198,"byte_end":9248,"line_start":222,"line_end":222,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9249,"byte_end":9252,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9253,"byte_end":9265,"line_start":224,"line_end":224,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9266,"byte_end":9269,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ If the `unicode-perl` feature is not enabled, then this function panics.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9270,"byte_end":9346,"line_start":226,"line_end":226,"column_start":1,"column_end":77}},{"value":"/ For this reason, it is recommended that callers use","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9347,"byte_end":9402,"line_start":227,"line_end":227,"column_start":1,"column_end":56}},{"value":"/ [`try_is_word_character`](fn.try_is_word_character.html)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9403,"byte_end":9463,"line_start":228,"line_end":228,"column_start":1,"column_end":61}},{"value":"/ instead.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9464,"byte_end":9476,"line_start":229,"line_end":229,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":1614},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":10174,"byte_end":10195,"line_start":248,"line_end":248,"column_start":8,"column_end":29},"name":"try_is_word_character","qualname":"::try_is_word_character","value":"fn (c: char) -> std::result::Result<bool, UnicodeWordError>","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given character is a Unicode word\n character.","sig":null,"attributes":[{"value":"/ Returns true if and only if the given character is a Unicode word","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9600,"byte_end":9669,"line_start":234,"line_end":234,"column_start":1,"column_end":70}},{"value":"/ character.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9670,"byte_end":9684,"line_start":235,"line_end":235,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9685,"byte_end":9688,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ A Unicode word character is defined by","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9689,"byte_end":9731,"line_start":237,"line_end":237,"column_start":1,"column_end":43}},{"value":"/ [UTS#18 Annex C](http://unicode.org/reports/tr18/#Compatibility_Properties).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9732,"byte_end":9812,"line_start":238,"line_end":238,"column_start":1,"column_end":81}},{"value":"/ In particular, a character","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9813,"byte_end":9843,"line_start":239,"line_end":239,"column_start":1,"column_end":31}},{"value":"/ is considered a word character if it is in either of the `Alphabetic` or","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9844,"byte_end":9920,"line_start":240,"line_end":240,"column_start":1,"column_end":77}},{"value":"/ `Join_Control` properties, or is in one of the `Decimal_Number`, `Mark`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9921,"byte_end":9996,"line_start":241,"line_end":241,"column_start":1,"column_end":76}},{"value":"/ or `Connector_Punctuation` general categories.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":9997,"byte_end":10047,"line_start":242,"line_end":242,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":10048,"byte_end":10051,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":10052,"byte_end":10064,"line_start":244,"line_end":244,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":10065,"byte_end":10068,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ If the `unicode-perl` feature is not enabled, then this function always","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":10069,"byte_end":10144,"line_start":246,"line_end":246,"column_start":1,"column_end":76}},{"value":"/ returns an error.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":10145,"byte_end":10166,"line_start":247,"line_end":247,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":1615},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":10482,"byte_end":10494,"line_start":258,"line_end":258,"column_start":8,"column_end":20},"name":"is_word_byte","qualname":"::is_word_byte","value":"fn (c: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given character is an ASCII word character.","sig":null,"attributes":[{"value":"/ Returns true if and only if the given character is an ASCII word character.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":10298,"byte_end":10377,"line_start":254,"line_end":254,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":10378,"byte_end":10381,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ An ASCII word character is defined by the following character class:","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":10382,"byte_end":10454,"line_start":256,"line_end":256,"column_start":1,"column_end":73}},{"value":"/ `[_0-9a-zA-Z]'.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":10455,"byte_end":10474,"line_start":257,"line_end":257,"column_start":1,"column_end":20}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":62821,"byte_end":62830,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":65699,"byte_end":65712,"line_start":119,"line_end":119,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":65794,"byte_end":65807,"line_start":125,"line_end":125,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74346,"byte_end":74352,"line_start":323,"line_end":323,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":75938,"byte_end":75945,"line_start":365,"line_end":365,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":98472,"byte_end":98479,"line_start":960,"line_end":960,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":143329,"byte_end":143340,"line_start":2146,"line_end":2146,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":144358,"byte_end":144369,"line_start":2181,"line_end":2181,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":266756,"byte_end":266770,"line_start":19,"line_end":19,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":266854,"byte_end":266868,"line_start":25,"line_end":25,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267528,"byte_end":267535,"line_start":49,"line_end":49,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":268191,"byte_end":268197,"line_start":70,"line_end":70,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":270788,"byte_end":270794,"line_start":156,"line_end":156,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":291619,"byte_end":291630,"line_start":201,"line_end":201,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":300046,"byte_end":300051,"line_start":437,"line_end":437,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":300444,"byte_end":300454,"line_start":450,"line_end":450,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":301028,"byte_end":301039,"line_start":467,"line_end":467,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":301436,"byte_end":301446,"line_start":480,"line_end":480,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":301827,"byte_end":301838,"line_start":492,"line_end":492,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12952,"byte_end":12957,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":19399,"byte_end":19404,"line_start":181,"line_end":181,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":21609,"byte_end":21614,"line_start":222,"line_end":222,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":21753,"byte_end":21762,"line_start":228,"line_end":228,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25751,"byte_end":25755,"line_start":330,"line_end":330,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25899,"byte_end":25903,"line_start":336,"line_end":336,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26047,"byte_end":26051,"line_start":342,"line_end":342,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26692,"byte_end":26700,"line_start":363,"line_end":363,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26924,"byte_end":26932,"line_start":373,"line_end":373,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27053,"byte_end":27061,"line_start":379,"line_end":379,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27174,"byte_end":27178,"line_start":385,"line_end":385,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28266,"byte_end":28274,"line_start":420,"line_end":420,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30905,"byte_end":30908,"line_start":493,"line_end":493,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32516,"byte_end":32519,"line_start":544,"line_end":544,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32901,"byte_end":32912,"line_start":560,"line_end":560,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33640,"byte_end":33646,"line_start":584,"line_end":584,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34598,"byte_end":34605,"line_start":614,"line_end":614,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37213,"byte_end":37227,"line_start":691,"line_end":691,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38083,"byte_end":38088,"line_start":717,"line_end":717,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39779,"byte_end":39793,"line_start":796,"line_end":796,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41581,"byte_end":41593,"line_start":845,"line_end":845,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43103,"byte_end":43121,"line_start":892,"line_end":892,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44384,"byte_end":44392,"line_start":930,"line_end":930,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45984,"byte_end":45996,"line_start":980,"line_end":980,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46828,"byte_end":46841,"line_start":1007,"line_end":1007,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47427,"byte_end":47440,"line_start":1027,"line_end":1027,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51418,"byte_end":51433,"line_start":1164,"line_end":1164,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52320,"byte_end":52325,"line_start":1193,"line_end":1193,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54539,"byte_end":54544,"line_start":1269,"line_end":1269,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56310,"byte_end":56323,"line_start":1330,"line_end":1330,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56965,"byte_end":56968,"line_start":1359,"line_end":1359,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":58820,"byte_end":58828,"line_start":1409,"line_end":1409,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":304133,"byte_end":304138,"line_start":30,"line_end":30,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":304242,"byte_end":304247,"line_start":36,"line_end":36,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":304351,"byte_end":304356,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":304702,"byte_end":304707,"line_start":54,"line_end":54,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":305708,"byte_end":305717,"line_start":82,"line_end":82,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":305995,"byte_end":306004,"line_start":93,"line_end":93,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":306275,"byte_end":306284,"line_start":104,"line_end":104,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":309071,"byte_end":309076,"line_start":169,"line_end":169,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":398311,"byte_end":398322,"line_start":40,"line_end":40,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":409859,"byte_end":409874,"line_start":327,"line_end":327,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417641,"byte_end":417649,"line_start":51,"line_end":51,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":547},{"krate":0,"index":549},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":444332,"byte_end":444340,"line_start":840,"line_end":840,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":444616,"byte_end":444623,"line_start":850,"line_end":850,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445121,"byte_end":445128,"line_start":872,"line_end":872,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445230,"byte_end":445237,"line_start":878,"line_end":878,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445376,"byte_end":445383,"line_start":884,"line_end":884,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445650,"byte_end":445657,"line_start":894,"line_end":894,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445737,"byte_end":445744,"line_start":900,"line_end":900,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445856,"byte_end":445863,"line_start":907,"line_end":907,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472163,"byte_end":472177,"line_start":20,"line_end":20,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472261,"byte_end":472275,"line_start":26,"line_end":26,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473350,"byte_end":473357,"line_start":57,"line_end":57,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":474013,"byte_end":474019,"line_start":78,"line_end":78,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":478953,"byte_end":478959,"line_start":212,"line_end":212,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":483888,"byte_end":483905,"line_start":21,"line_end":21,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":483995,"byte_end":484012,"line_start":27,"line_end":27,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487151,"byte_end":487161,"line_start":114,"line_end":114,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":490371,"byte_end":490379,"line_start":186,"line_end":186,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":491882,"byte_end":491893,"line_start":234,"line_end":234,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":506147,"byte_end":506158,"line_start":595,"line_end":595,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":520352,"byte_end":520357,"line_start":996,"line_end":996,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":594576,"byte_end":594587,"line_start":98,"line_end":98,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":597942,"byte_end":597947,"line_start":192,"line_end":192,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315052,"byte_end":315057,"line_start":36,"line_end":36,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":317153,"byte_end":317162,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":318171,"byte_end":318176,"line_start":117,"line_end":117,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":318381,"byte_end":318386,"line_start":125,"line_end":125,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":318525,"byte_end":318534,"line_start":131,"line_end":131,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322419,"byte_end":322422,"line_start":217,"line_end":217,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341767,"byte_end":341774,"line_start":693,"line_end":693,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":851},{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":342983,"byte_end":342986,"line_start":729,"line_end":729,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343705,"byte_end":343712,"line_start":750,"line_end":750,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345185,"byte_end":345190,"line_start":787,"line_end":787,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346960,"byte_end":346972,"line_start":837,"line_end":837,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351375,"byte_end":351391,"line_start":956,"line_end":956,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":880},{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351848,"byte_end":351865,"line_start":974,"line_end":974,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":352472,"byte_end":352489,"line_start":994,"line_end":994,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":353963,"byte_end":353980,"line_start":1047,"line_end":1047,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354936,"byte_end":354946,"line_start":1080,"line_end":1080,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":897},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358264,"byte_end":358278,"line_start":1173,"line_end":1173,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358717,"byte_end":358732,"line_start":1191,"line_end":1191,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":359986,"byte_end":360001,"line_start":1234,"line_end":1234,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360733,"byte_end":360748,"line_start":1260,"line_end":1260,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362910,"byte_end":362922,"line_start":1317,"line_end":1317,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365086,"byte_end":365096,"line_start":1382,"line_end":1382,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":367013,"byte_end":367016,"line_start":1430,"line_end":1430,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":369371,"byte_end":369378,"line_start":1502,"line_end":1502,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":937},{"krate":0,"index":3133},{"krate":0,"index":3134},{"krate":0,"index":3135},{"krate":0,"index":3136},{"krate":0,"index":3137},{"krate":0,"index":3138},{"krate":0,"index":3139},{"krate":0,"index":3140},{"krate":0,"index":3141},{"krate":0,"index":3142},{"krate":0,"index":3143},{"krate":0,"index":3144},{"krate":0,"index":3145},{"krate":0,"index":3146},{"krate":0,"index":3147},{"krate":0,"index":3148},{"krate":0,"index":3149},{"krate":0,"index":3150},{"krate":0,"index":3151},{"krate":0,"index":3152},{"krate":0,"index":3153},{"krate":0,"index":3154}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598846,"byte_end":598859,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605865,"byte_end":605871,"line_start":180,"line_end":180,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":607742,"byte_end":607755,"line_start":38,"line_end":38,"column_start":23,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":607782,"byte_end":607795,"line_start":40,"line_end":40,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":608419,"byte_end":608435,"line_start":58,"line_end":58,"column_start":23,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":608462,"byte_end":608478,"line_start":60,"line_end":60,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":612920,"byte_end":612930,"line_start":187,"line_end":187,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367935,"byte_end":1367947,"line_start":110,"line_end":110,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1568},{"krate":0,"index":1569},{"krate":0,"index":1571},{"krate":0,"index":1572},{"krate":0,"index":1573}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1370802,"byte_end":1370814,"line_start":204,"line_end":204,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1580}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371494,"byte_end":1371503,"line_start":227,"line_end":227,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1583},{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371769,"byte_end":1371778,"line_start":238,"line_end":238,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374082,"byte_end":1374095,"line_start":302,"line_end":302,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1590},{"krate":0,"index":1591},{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374889,"byte_end":1374900,"line_start":331,"line_end":331,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1597}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1375056,"byte_end":1375069,"line_start":337,"line_end":337,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1599},{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1377031,"byte_end":1377042,"line_start":391,"line_end":391,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1607},{"krate":0,"index":1608}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7294,"byte_end":7297,"line_start":164,"line_end":164,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12190,"byte_end":12195,"line_start":11,"line_end":11,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":17}},{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12205,"byte_end":12210,"line_start":12,"line_end":12,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":157}},{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7330,"byte_end":7333,"line_start":167,"line_end":167,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":446}},{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":314561,"byte_end":314568,"line_start":19,"line_end":19,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":523}},{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":314578,"byte_end":314583,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":626}},{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":314593,"byte_end":314602,"line_start":21,"line_end":21,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":660}},{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/lib.rs","byte_start":7388,"byte_end":7392,"line_start":171,"line_end":171,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1562}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":62821,"byte_end":62830,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":65699,"byte_end":65712,"line_start":119,"line_end":119,"column_start":18,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1643},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":65794,"byte_end":65807,"line_start":125,"line_end":125,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":74346,"byte_end":74352,"line_start":323,"line_end":323,"column_start":6,"column_end":12},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1651},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":75938,"byte_end":75945,"line_start":365,"line_end":365,"column_start":29,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":98472,"byte_end":98479,"line_start":960,"line_end":960,"column_start":29,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":143329,"byte_end":143340,"line_start":2146,"line_end":2146,"column_start":33,"column_end":44},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1703},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/parse.rs","byte_start":144358,"byte_end":144369,"line_start":2181,"line_end":2181,"column_start":50,"column_end":61},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1703},"to":{"krate":0,"index":223}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":266756,"byte_end":266770,"line_start":19,"line_end":19,"column_start":18,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":266854,"byte_end":266868,"line_start":25,"line_end":25,"column_start":6,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1714},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":267528,"byte_end":267535,"line_start":49,"line_end":49,"column_start":6,"column_end":13},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1720},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":268191,"byte_end":268197,"line_start":70,"line_end":70,"column_start":37,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1724},"to":{"krate":0,"index":223}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/print.rs","byte_start":270788,"byte_end":270794,"line_start":156,"line_end":156,"column_start":25,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1724},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":291619,"byte_end":291630,"line_start":201,"line_end":201,"column_start":10,"column_end":21},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":300046,"byte_end":300051,"line_start":437,"line_end":437,"column_start":10,"column_end":15},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":242},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":300444,"byte_end":300454,"line_start":450,"line_end":450,"column_start":10,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":301028,"byte_end":301039,"line_start":467,"line_end":467,"column_start":10,"column_end":21},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":301436,"byte_end":301446,"line_start":480,"line_end":480,"column_start":25,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":256},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/visitor.rs","byte_start":301827,"byte_end":301838,"line_start":492,"line_end":492,"column_start":25,"column_end":36},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":270},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":12952,"byte_end":12957,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1733},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":19399,"byte_end":19404,"line_start":181,"line_end":181,"column_start":23,"column_end":28},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1733},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":21609,"byte_end":21614,"line_start":222,"line_end":222,"column_start":23,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1733},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":21753,"byte_end":21762,"line_start":228,"line_end":228,"column_start":23,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1748},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25751,"byte_end":25755,"line_start":330,"line_end":330,"column_start":21,"column_end":25},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1825},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":25899,"byte_end":25903,"line_start":336,"line_end":336,"column_start":14,"column_end":18},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1825},"to":{"krate":2,"index":1660}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26047,"byte_end":26051,"line_start":342,"line_end":342,"column_start":21,"column_end":25},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1825},"to":{"krate":2,"index":1671}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26692,"byte_end":26700,"line_start":363,"line_end":363,"column_start":21,"column_end":29},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1838},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":26924,"byte_end":26932,"line_start":373,"line_end":373,"column_start":14,"column_end":22},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1838},"to":{"krate":2,"index":1660}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27053,"byte_end":27061,"line_start":379,"line_end":379,"column_start":21,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1838},"to":{"krate":2,"index":1671}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":27174,"byte_end":27178,"line_start":385,"line_end":385,"column_start":6,"column_end":10},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":28266,"byte_end":28274,"line_start":420,"line_end":420,"column_start":6,"column_end":14},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1838},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":30905,"byte_end":30908,"line_start":493,"line_end":493,"column_start":6,"column_end":9},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32516,"byte_end":32519,"line_start":544,"line_end":544,"column_start":23,"column_end":26},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1880},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":32901,"byte_end":32912,"line_start":560,"line_end":560,"column_start":6,"column_end":17},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1922},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":33640,"byte_end":33646,"line_start":584,"line_end":584,"column_start":6,"column_end":12},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":34598,"byte_end":34605,"line_start":614,"line_end":614,"column_start":6,"column_end":13},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":37213,"byte_end":37227,"line_start":691,"line_end":691,"column_start":6,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2017},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":38083,"byte_end":38088,"line_start":717,"line_end":717,"column_start":6,"column_end":11},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":39779,"byte_end":39793,"line_start":796,"line_end":796,"column_start":6,"column_end":20},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":41581,"byte_end":41593,"line_start":845,"line_end":845,"column_start":6,"column_end":18},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":43103,"byte_end":43121,"line_start":892,"line_end":892,"column_start":6,"column_end":24},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":44384,"byte_end":44392,"line_start":930,"line_end":930,"column_start":6,"column_end":14},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":45984,"byte_end":45996,"line_start":980,"line_end":980,"column_start":6,"column_end":18},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":46828,"byte_end":46841,"line_start":1007,"line_end":1007,"column_start":6,"column_end":19},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2264},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":47427,"byte_end":47440,"line_start":1027,"line_end":1027,"column_start":6,"column_end":19},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":51418,"byte_end":51433,"line_start":1164,"line_end":1164,"column_start":6,"column_end":21},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":52320,"byte_end":52325,"line_start":1193,"line_end":1193,"column_start":6,"column_end":11},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2437},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":54539,"byte_end":54544,"line_start":1269,"line_end":1269,"column_start":6,"column_end":11},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56310,"byte_end":56323,"line_start":1330,"line_end":1330,"column_start":6,"column_end":19},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":56965,"byte_end":56968,"line_start":1359,"line_end":1359,"column_start":15,"column_end":18},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1880},"to":{"krate":2,"index":2097}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/ast/mod.rs","byte_start":58820,"byte_end":58828,"line_start":1409,"line_end":1409,"column_start":15,"column_end":23},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2210},"to":{"krate":2,"index":2097}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":304133,"byte_end":304138,"line_start":30,"line_end":30,"column_start":27,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2603},"to":{"krate":2,"index":1825}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":304242,"byte_end":304247,"line_start":36,"line_end":36,"column_start":27,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2603},"to":{"krate":2,"index":1825}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":304351,"byte_end":304356,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2603},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":304702,"byte_end":304707,"line_start":54,"line_end":54,"column_start":23,"column_end":28},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2603},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":305708,"byte_end":305717,"line_start":82,"line_end":82,"column_start":35,"column_end":44},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2623},"to":{"krate":2,"index":1825}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":305995,"byte_end":306004,"line_start":93,"line_end":93,"column_start":35,"column_end":44},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2623},"to":{"krate":2,"index":1825}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":306275,"byte_end":306284,"line_start":104,"line_end":104,"column_start":44,"column_end":53},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2623},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/error.rs","byte_start":309071,"byte_end":309076,"line_start":169,"line_end":169,"column_start":10,"column_end":15},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":429},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":398311,"byte_end":398322,"line_start":40,"line_end":40,"column_start":19,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":409859,"byte_end":409874,"line_start":327,"line_end":327,"column_start":26,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2654},"to":{"krate":2,"index":4852}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":410005,"byte_end":410010,"line_start":336,"line_end":336,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1606},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":410013,"byte_end":410017,"line_start":336,"line_end":336,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1914},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":410020,"byte_end":410025,"line_start":336,"line_end":336,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":6069},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":410028,"byte_end":410035,"line_start":336,"line_end":336,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":410038,"byte_end":410040,"line_start":336,"line_end":336,"column_start":38,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":1639},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":410043,"byte_end":410052,"line_start":336,"line_end":336,"column_start":43,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":1634},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":410055,"byte_end":410065,"line_start":336,"line_end":336,"column_start":55,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":1671},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":410068,"byte_end":410071,"line_start":336,"line_end":336,"column_start":68,"column_end":71},"kind":"SuperTrait","from":{"krate":2,"index":1660},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":414670,"byte_end":414674,"line_start":467,"line_end":467,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1914},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":414677,"byte_end":414682,"line_start":467,"line_end":467,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1606},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":414685,"byte_end":414690,"line_start":467,"line_end":467,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":6069},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":414693,"byte_end":414695,"line_start":467,"line_end":467,"column_start":28,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1639},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":414698,"byte_end":414707,"line_start":467,"line_end":467,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1634},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":414710,"byte_end":414720,"line_start":467,"line_end":467,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1671},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/interval.rs","byte_start":414723,"byte_end":414726,"line_start":467,"line_end":467,"column_start":58,"column_end":61},"kind":"SuperTrait","from":{"krate":2,"index":1660},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":417641,"byte_end":417649,"line_start":51,"line_end":51,"column_start":6,"column_end":14},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2663},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":444332,"byte_end":444340,"line_start":840,"line_end":840,"column_start":21,"column_end":29},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2663},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":444616,"byte_end":444623,"line_start":850,"line_end":850,"column_start":6,"column_end":13},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2676},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445121,"byte_end":445128,"line_start":872,"line_end":872,"column_start":20,"column_end":27},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2676},"to":{"krate":2,"index":1634}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445230,"byte_end":445237,"line_start":878,"line_end":878,"column_start":21,"column_end":28},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2676},"to":{"krate":2,"index":1671}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445376,"byte_end":445383,"line_start":884,"line_end":884,"column_start":21,"column_end":28},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2676},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445650,"byte_end":445657,"line_start":894,"line_end":894,"column_start":22,"column_end":29},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2676},"to":{"krate":2,"index":1816}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445737,"byte_end":445744,"line_start":900,"line_end":900,"column_start":21,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2676},"to":{"krate":2,"index":2073}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/literal/mod.rs","byte_start":445856,"byte_end":445863,"line_start":907,"line_end":907,"column_start":24,"column_end":31},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2676},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472163,"byte_end":472177,"line_start":20,"line_end":20,"column_start":18,"column_end":32},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2686},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":472261,"byte_end":472275,"line_start":26,"line_end":26,"column_start":6,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2686},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":473350,"byte_end":473357,"line_start":57,"line_end":57,"column_start":6,"column_end":13},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":474013,"byte_end":474019,"line_start":78,"line_end":78,"column_start":37,"column_end":43},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2696},"to":{"krate":0,"index":766}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/print.rs","byte_start":478953,"byte_end":478959,"line_start":212,"line_end":212,"column_start":25,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2696},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":483888,"byte_end":483905,"line_start":21,"line_end":21,"column_start":18,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2705},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":483995,"byte_end":484012,"line_start":27,"line_end":27,"column_start":6,"column_end":23},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":487151,"byte_end":487161,"line_start":114,"line_end":114,"column_start":6,"column_end":16},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":490371,"byte_end":490379,"line_start":186,"line_end":186,"column_start":6,"column_end":14},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2720},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":491882,"byte_end":491893,"line_start":234,"line_end":234,"column_start":26,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2740},"to":{"krate":0,"index":223}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":506147,"byte_end":506158,"line_start":595,"line_end":595,"column_start":14,"column_end":25},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2740},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/translate.rs","byte_start":520352,"byte_end":520357,"line_start":996,"line_end":996,"column_start":6,"column_end":11},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":594576,"byte_end":594587,"line_start":98,"line_end":98,"column_start":10,"column_end":21},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/visitor.rs","byte_start":597942,"byte_end":597947,"line_start":192,"line_end":192,"column_start":10,"column_end":15},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":315052,"byte_end":315057,"line_start":36,"line_end":36,"column_start":6,"column_end":11},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":317153,"byte_end":317162,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2781},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":318171,"byte_end":318176,"line_start":117,"line_end":117,"column_start":23,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2766},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":318381,"byte_end":318386,"line_start":125,"line_end":125,"column_start":23,"column_end":28},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2766},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":318525,"byte_end":318534,"line_start":131,"line_end":131,"column_start":23,"column_end":32},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2781},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":322419,"byte_end":322422,"line_start":217,"line_end":217,"column_start":6,"column_end":9},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2808},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":341767,"byte_end":341774,"line_start":693,"line_end":693,"column_start":6,"column_end":13},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2822},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":342983,"byte_end":342986,"line_start":729,"line_end":729,"column_start":23,"column_end":26},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2808},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":343705,"byte_end":343712,"line_start":750,"line_end":750,"column_start":6,"column_end":13},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":345185,"byte_end":345190,"line_start":787,"line_end":787,"column_start":6,"column_end":11},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2878},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":346960,"byte_end":346972,"line_start":837,"line_end":837,"column_start":6,"column_end":18},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351375,"byte_end":351391,"line_start":956,"line_end":956,"column_start":23,"column_end":39},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2909},"to":{"krate":2,"index":4852}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":351848,"byte_end":351865,"line_start":974,"line_end":974,"column_start":21,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2916},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":352472,"byte_end":352489,"line_start":994,"line_end":994,"column_start":19,"column_end":36},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2916},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":353963,"byte_end":353980,"line_start":1047,"line_end":1047,"column_start":6,"column_end":23},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2916},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":354936,"byte_end":354946,"line_start":1080,"line_end":1080,"column_start":6,"column_end":16},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358264,"byte_end":358278,"line_start":1173,"line_end":1173,"column_start":23,"column_end":37},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2956},"to":{"krate":2,"index":4852}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":358717,"byte_end":358732,"line_start":1191,"line_end":1191,"column_start":19,"column_end":34},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2963},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":359986,"byte_end":360001,"line_start":1234,"line_end":1234,"column_start":6,"column_end":21},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2963},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":360733,"byte_end":360748,"line_start":1260,"line_end":1260,"column_start":21,"column_end":36},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2963},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":362910,"byte_end":362922,"line_start":1317,"line_end":1317,"column_start":6,"column_end":18},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":3009},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":365086,"byte_end":365096,"line_start":1382,"line_end":1382,"column_start":6,"column_end":16},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3062},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":367013,"byte_end":367016,"line_start":1430,"line_end":1430,"column_start":15,"column_end":18},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2808},"to":{"krate":2,"index":2097}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/hir/mod.rs","byte_start":369371,"byte_end":369378,"line_start":1502,"line_end":1502,"column_start":6,"column_end":13},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":598846,"byte_end":598859,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":3155},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/parser.rs","byte_start":605865,"byte_end":605871,"line_start":180,"line_end":180,"column_start":6,"column_end":12},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":607742,"byte_end":607755,"line_start":38,"line_end":38,"column_start":23,"column_end":36},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":3180},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":607782,"byte_end":607795,"line_start":40,"line_end":40,"column_start":23,"column_end":36},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":3180},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":608419,"byte_end":608435,"line_start":58,"line_end":58,"column_start":23,"column_end":39},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3185},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":608462,"byte_end":608478,"line_start":60,"line_end":60,"column_start":23,"column_end":39},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":3185},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/unicode.rs","byte_start":612920,"byte_end":612930,"line_start":187,"line_end":187,"column_start":10,"column_end":20},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":3190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1367935,"byte_end":1367947,"line_start":110,"line_end":110,"column_start":6,"column_end":18},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1370802,"byte_end":1370814,"line_start":204,"line_end":204,"column_start":21,"column_end":33},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":3226},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371494,"byte_end":1371503,"line_start":227,"line_end":227,"column_start":6,"column_end":15},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":3266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1371769,"byte_end":1371778,"line_start":238,"line_end":238,"column_start":21,"column_end":30},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":3266},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374082,"byte_end":1374095,"line_start":302,"line_end":302,"column_start":6,"column_end":19},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1374889,"byte_end":1374900,"line_start":331,"line_end":331,"column_start":21,"column_end":32},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1593},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1375056,"byte_end":1375069,"line_start":337,"line_end":337,"column_start":19,"column_end":32},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1587},"to":{"krate":2,"index":4852}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.18/src/utf8.rs","byte_start":1377031,"byte_end":1377042,"line_start":391,"line_end":391,"column_start":6,"column_end":17},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1593},"to":{"krate":4294967295,"index":4294967295}}]}