{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0","program":"/home/farjad-ali/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","simba","--edition=2018","/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=98012b013ecd9437","-C","extra-filename=-98012b013ecd9437","--out-dir","/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps","-L","dependency=/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps","--extern","approx=/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps/libapprox-224d59d13d32eeb0.rmeta","--extern","num_complex=/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps/libnum_complex-5541e8a041939eb4.rmeta","--extern","num_traits=/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps/libnum_traits-cdf93f73925a1d07.rmeta","--extern","paste=/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps/libpaste-5a49ab8c0694e69d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/farjad-ali/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps/libsimba-98012b013ecd9437.rmeta"},"prelude":{"crate_id":{"name":"simba","disambiguator":[6216583338450269413,12924415775222353370]},"crate_root":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src","external_crates":[{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9564622754343001814,6395353584576912375]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16347567532895737325,10433174518283571136]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6035154360143295752,3120051156278071757]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17970804288108720841,8277620835330235672]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16732030649177302276,7623982932271952002]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[2049976911787826744,13979720418681232837]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17847122289935873599,14578858192368606437]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12400616498443773685,4537628398871354645]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1484644931138181661,6065563251080435870]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10540921678309121045,13783658537477923762]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14352423081837475994,16315607114161141584]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[15159368332461590608,12067571535011159917]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[565700744459104052,3788273681611333969]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[2676206115383283879,17948995864942817625]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","num":15,"id":{"name":"num_traits","disambiguator":[18280951367680062438,17399211580599509837]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","num":16,"id":{"name":"approx","disambiguator":[4659412410510464707,8179273015758229317]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","num":17,"id":{"name":"num_complex","disambiguator":[13109746978719735377,2968288435886182343]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","num":18,"id":{"name":"paste","disambiguator":[9347646932603485813,8717825850453567916]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","num":19,"id":{"name":"proc_macro_hack","disambiguator":[6420530350504618305,13182919156808654971]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","num":20,"id":{"name":"paste_impl","disambiguator":[14446104188430901687,11289301769036049829]}}],"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":72},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":2107,"byte_end":2119,"line_start":3,"line_end":3,"column_start":24,"column_end":36},"alias_span":null,"name":"ComplexField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":144},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":2143,"byte_end":2152,"line_start":4,"line_end":4,"column_start":23,"column_end":32},"alias_span":null,"name":"ClosedAdd","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":150},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":2154,"byte_end":2163,"line_start":4,"line_end":4,"column_start":34,"column_end":43},"alias_span":null,"name":"ClosedDiv","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":148},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":2165,"byte_end":2174,"line_start":4,"line_end":4,"column_start":45,"column_end":54},"alias_span":null,"name":"ClosedMul","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":152},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":2176,"byte_end":2185,"line_start":4,"line_end":4,"column_start":56,"column_end":65},"alias_span":null,"name":"ClosedNeg","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":2187,"byte_end":2196,"line_start":4,"line_end":4,"column_start":67,"column_end":76},"alias_span":null,"name":"ClosedSub","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":167},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":2198,"byte_end":2203,"line_start":4,"line_end":4,"column_start":78,"column_end":83},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":28},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":2303,"byte_end":2312,"line_start":7,"line_end":7,"column_start":21,"column_end":30},"alias_span":null,"name":"RealField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":2337,"byte_end":2345,"line_start":8,"line_end":8,"column_start":24,"column_end":32},"alias_span":null,"name":"SubsetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":180},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":2347,"byte_end":2357,"line_start":8,"line_end":8,"column_start":34,"column_end":44},"alias_span":null,"name":"SupersetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":217},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/mod.rs","byte_start":53582,"byte_end":53590,"line_start":5,"line_end":5,"column_start":26,"column_end":34},"alias_span":null,"name":"SimdBool","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":286},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/mod.rs","byte_start":53620,"byte_end":53636,"line_start":6,"line_end":6,"column_start":29,"column_end":45},"alias_span":null,"name":"SimdComplexField","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":348},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/mod.rs","byte_start":53665,"byte_end":53675,"line_start":7,"line_end":7,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdOption","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":363},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/mod.rs","byte_start":53709,"byte_end":53723,"line_start":8,"line_end":8,"column_start":33,"column_end":47},"alias_span":null,"name":"SimdPartialOrd","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":394},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/mod.rs","byte_start":53750,"byte_end":53763,"line_start":9,"line_end":9,"column_start":26,"column_end":39},"alias_span":null,"name":"SimdRealField","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":436},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/mod.rs","byte_start":53792,"byte_end":53802,"line_start":10,"line_end":10,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdSigned","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":465},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/mod.rs","byte_start":53831,"byte_end":53849,"line_start":11,"line_end":11,"column_start":28,"column_end":46},"alias_span":null,"name":"PrimitiveSimdValue","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":451},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/mod.rs","byte_start":53851,"byte_end":53860,"line_start":11,"line_end":11,"column_start":48,"column_end":57},"alias_span":null,"name":"SimdValue","value":"","parent":{"krate":0,"index":201}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":201}],"decl_id":null,"docs":"__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.","sig":null,"attributes":[{"value":"!\n__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.\n\nOne example of use-case applied by the [nalgebra crate](https://nalgebra.org) is to define generic methods\nlike vector normalization that will work for `Vector3<f32>` as well as `Vector3<f32x4>`.\n\nThis makes it easier leverage the power of [SIMD Array-of-Struct-of-Array (AoSoA)](https://www.rustsim.org/blog/2020/03/23/simd-aosoa-in-nalgebra/)\nwith less code duplication.\n\n\n## Cargo features\n\nTwo cargo features can be optionally enabled:\n- With the __`packed_simd`__ feature enabled, the `simba::simd` module will export several SIMD types like `f32x2`,\n `f64x4`, `i32i8`, `u16i16`, etc. There types are wrappers around the SIMD types from the [__packed_simd__\n crate](https://docs.rs/packed_simd). This requires a nightly compiler.\n- With the __`wide`__ feature enabled, the `simba::simd` module will export the `WideF32x4` and `WideBoolF32x4`\n  types. They types ure wrapper around the `wide::f32x4` type from the [__wide__ crate](https://docs.rs/wide).\n  This will work with both a stable or nightly compiler.\n\nIf none of those features are enabled, __simba__ will still define all the scalar and SIMD traits.\nHowever, the SIMD traits won't be implemented for any SIMD types. Therefore it is recommended to:\n- Use the `packed_simd` feature if you want more features, and can afford to use a nightly compiler.\n- Use the `wide` feature if you only need 4-lanes 32-bits floats, and can't afford to use a nightly compiler.\n*/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","byte_start":0,"byte_end":1691,"line_start":1,"line_end":27,"column_start":1,"column_end":3}},{"value":"deny(non_camel_case_types)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","byte_start":1693,"byte_end":1723,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"deny(unused_parens)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","byte_start":1724,"byte_end":1747,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","byte_start":1748,"byte_end":1780,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"deny(unused_results)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","byte_start":1781,"byte_end":1805,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"deny(missing_docs)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","byte_start":1806,"byte_end":1828,"line_start":33,"line_end":33,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalar","qualname":"::scalar","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":52},{"krate":0,"index":130},{"krate":0,"index":171}],"decl_id":null,"docs":" Traits implemented by scalar, non-SIMD, types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","byte_start":1988,"byte_end":2000,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"! Traits implemented by scalar, non-SIMD, types.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/mod.rs","byte_start":2032,"byte_end":2082,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":2817,"byte_end":2826,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"RealField","qualname":"::scalar::real::RealField","value":"RealField: ComplexField<RealField = Self> + RelativeEq<Epsilon = Self> +\nUlpsEq<Epsilon = Self> + Signed + Bounded + PartialOrd","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"decl_id":null,"docs":" Trait shared by all reals.\n","sig":null,"attributes":[{"value":"/ Trait shared by all reals.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":2753,"byte_end":2783,"line_start":13,"line_end":13,"column_start":1,"column_end":31}},{"value":"allow(missing_docs)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":2784,"byte_end":2806,"line_start":14,"line_end":14,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3028,"byte_end":3044,"line_start":24,"line_end":24,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::scalar::real::RealField::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Is the sign of this real number positive?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number positive?","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":2975,"byte_end":3020,"line_start":23,"line_end":23,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3117,"byte_end":3133,"line_start":26,"line_end":26,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::scalar::real::RealField::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Is the sign of this real number negative?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number negative?","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3064,"byte_end":3109,"line_start":25,"line_end":25,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3356,"byte_end":3364,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"copysign","qualname":"::scalar::real::RealField::copysign","value":"fn (self, to: Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Copies the sign of `self` to `to`.","sig":null,"attributes":[{"value":"/ Copies the sign of `self` to `to`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3153,"byte_end":3191,"line_start":27,"line_end":27,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3196,"byte_end":3199,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ - Returns `to.simd_abs()` if `self` is positive or positive-zero.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3204,"byte_end":3273,"line_start":29,"line_end":29,"column_start":5,"column_end":74}},{"value":"/ - Returns `-to.simd_abs()` if `self` is negative or negative-zero.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3278,"byte_end":3348,"line_start":30,"line_end":30,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3398,"byte_end":3401,"line_start":33,"line_end":33,"column_start":8,"column_end":11},"name":"max","qualname":"::scalar::real::RealField::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3437,"byte_end":3440,"line_start":34,"line_end":34,"column_start":8,"column_end":11},"name":"min","qualname":"::scalar::real::RealField::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3476,"byte_end":3481,"line_start":35,"line_end":35,"column_start":8,"column_end":13},"name":"clamp","qualname":"::scalar::real::RealField::clamp","value":"fn (self, min: Self, max: Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3526,"byte_end":3531,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"atan2","qualname":"::scalar::real::RealField::atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3568,"byte_end":3570,"line_start":38,"line_end":38,"column_start":8,"column_end":10},"name":"pi","qualname":"::scalar::real::RealField::pi","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3589,"byte_end":3595,"line_start":39,"line_end":39,"column_start":8,"column_end":14},"name":"two_pi","qualname":"::scalar::real::RealField::two_pi","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3614,"byte_end":3623,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"frac_pi_2","qualname":"::scalar::real::RealField::frac_pi_2","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3642,"byte_end":3651,"line_start":41,"line_end":41,"column_start":8,"column_end":17},"name":"frac_pi_3","qualname":"::scalar::real::RealField::frac_pi_3","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3670,"byte_end":3679,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"frac_pi_4","qualname":"::scalar::real::RealField::frac_pi_4","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3698,"byte_end":3707,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"frac_pi_6","qualname":"::scalar::real::RealField::frac_pi_6","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3726,"byte_end":3735,"line_start":44,"line_end":44,"column_start":8,"column_end":17},"name":"frac_pi_8","qualname":"::scalar::real::RealField::frac_pi_8","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3754,"byte_end":3763,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"frac_1_pi","qualname":"::scalar::real::RealField::frac_1_pi","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3782,"byte_end":3791,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"frac_2_pi","qualname":"::scalar::real::RealField::frac_2_pi","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3810,"byte_end":3824,"line_start":47,"line_end":47,"column_start":8,"column_end":22},"name":"frac_2_sqrt_pi","qualname":"::scalar::real::RealField::frac_2_sqrt_pi","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3844,"byte_end":3845,"line_start":49,"line_end":49,"column_start":8,"column_end":9},"name":"e","qualname":"::scalar::real::RealField::e","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3864,"byte_end":3870,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"log2_e","qualname":"::scalar::real::RealField::log2_e","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3889,"byte_end":3896,"line_start":51,"line_end":51,"column_start":8,"column_end":15},"name":"log10_e","qualname":"::scalar::real::RealField::log10_e","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3915,"byte_end":3919,"line_start":52,"line_end":52,"column_start":8,"column_end":12},"name":"ln_2","qualname":"::scalar::real::RealField::ln_2","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":3938,"byte_end":3943,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"ln_10","qualname":"::scalar::real::RealField::ln_10","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14507,"byte_end":14519,"line_start":162,"line_end":162,"column_start":11,"column_end":23},"name":"ComplexField","qualname":"::scalar::complex::ComplexField","value":"ComplexField: SubsetOf<Self> + SupersetOf<f64> + Field<Element = Self, SimdBool = bool> +\nCopy + Neg<Output = Self> + Send + Sync + Any + 'static + Debug +\nFromPrimitive + Display","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":74},{"krate":0,"index":75}],"decl_id":null,"docs":" Trait shared by all complex fields and its subfields (like real numbers).","sig":null,"attributes":[{"value":"/ Trait shared by all complex fields and its subfields (like real numbers).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14025,"byte_end":14102,"line_start":155,"line_end":155,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14103,"byte_end":14106,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Complex numbers are equipped with functions that are commonly used on complex numbers and reals.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14107,"byte_end":14207,"line_start":157,"line_end":157,"column_start":1,"column_end":101}},{"value":"/ The results of those functions only have to be approximately equal to the actual theoretical values.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14208,"byte_end":14312,"line_start":158,"line_end":158,"column_start":1,"column_end":105}},{"value":"allow(missing_docs)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14474,"byte_end":14496,"line_start":161,"line_end":161,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":73},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14794,"byte_end":14803,"line_start":178,"line_end":178,"column_start":10,"column_end":19},"name":"RealField","qualname":"::scalar::complex::ComplexField::RealField","value":"type RealField: RealField;","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14863,"byte_end":14872,"line_start":181,"line_end":181,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::scalar::complex::ComplexField::is_finite","value":"fn (&self) -> bool","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14896,"byte_end":14904,"line_start":182,"line_end":182,"column_start":8,"column_end":16},"name":"try_sqrt","qualname":"::scalar::complex::ComplexField::try_sqrt","value":"fn (self) -> Option<Self>","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":144},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44240,"byte_end":44249,"line_start":6,"line_end":6,"column_start":11,"column_end":20},"name":"ClosedAdd","qualname":"::scalar::field::ClosedAdd","value":"ClosedAdd<Right = Self>: Sized + Add<Right, Output = Self> + AddAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44156,"byte_end":44229,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":146},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44406,"byte_end":44415,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"ClosedSub","qualname":"::scalar::field::ClosedSub","value":"ClosedSub<Right = Self>: Sized + Sub<Right, Output = Self> + SubAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44322,"byte_end":44395,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":148},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44572,"byte_end":44581,"line_start":12,"line_end":12,"column_start":11,"column_end":20},"name":"ClosedMul","qualname":"::scalar::field::ClosedMul","value":"ClosedMul<Right = Self>: Sized + Mul<Right, Output = Self> + MulAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44488,"byte_end":44561,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":150},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44738,"byte_end":44747,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"ClosedDiv","qualname":"::scalar::field::ClosedDiv","value":"ClosedDiv<Right = Self>: Sized + Div<Right, Output = Self> + DivAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44654,"byte_end":44727,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":152},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44888,"byte_end":44897,"line_start":18,"line_end":18,"column_start":11,"column_end":20},"name":"ClosedNeg","qualname":"::scalar::field::ClosedNeg","value":"ClosedNeg: Sized + Neg<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Neg` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Neg` with result of type `Self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44820,"byte_end":44877,"line_start":17,"line_end":17,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":167},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45428,"byte_end":45433,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"Field","qualname":"::scalar::field::Field","value":"Field: SimdValue + NumAssign + ClosedNeg","parent":null,"children":[],"decl_id":null,"docs":" Trait implemented by fields, i.e., complex numbers and floats.\n","sig":null,"attributes":[{"value":"/ Trait implemented by fields, i.e., complex numbers and floats.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45351,"byte_end":45417,"line_start":26,"line_end":26,"column_start":1,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":174},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47018,"byte_end":47026,"line_start":24,"line_end":24,"column_start":11,"column_end":19},"name":"SubsetOf","qualname":"::scalar::subset::SubsetOf","value":"SubsetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179}],"decl_id":null,"docs":" Nested sets and conversions between them (using an injective mapping). Useful to work with\n substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever\n possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever\n `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them (using an injective mapping). Useful to work with","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":45826,"byte_end":45920,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":45921,"byte_end":46017,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46018,"byte_end":46110,"line_start":8,"line_end":8,"column_start":1,"column_end":93}},{"value":"/ `SubsetOf` is).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46111,"byte_end":46130,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46131,"byte_end":46134,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46135,"byte_end":46227,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46228,"byte_end":46319,"line_start":12,"line_end":12,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46320,"byte_end":46332,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46333,"byte_end":46429,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46430,"byte_end":46466,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, u32 is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46467,"byte_end":46565,"line_start":16,"line_end":16,"column_start":1,"column_end":99}},{"value":"/ a subset of i8.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46566,"byte_end":46585,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46586,"byte_end":46682,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46683,"byte_end":46721,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46722,"byte_end":46725,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46726,"byte_end":46821,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46822,"byte_end":46910,"line_start":22,"line_end":22,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":46911,"byte_end":47007,"line_start":23,"line_end":23,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47132,"byte_end":47143,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"to_superset","qualname":"::scalar::subset::SubsetOf::to_superset","value":"fn (&self) -> T","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47043,"byte_end":47124,"line_start":25,"line_end":25,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47359,"byte_end":47372,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"from_superset","qualname":"::scalar::subset::SubsetOf::from_superset","value":"fn (element: &T) -> Option<Self>","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47162,"byte_end":47256,"line_start":28,"line_end":28,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47261,"byte_end":47274,"line_start":29,"line_end":29,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47279,"byte_end":47282,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47287,"byte_end":47351,"line_start":31,"line_end":31,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47660,"byte_end":47683,"line_start":41,"line_end":41,"column_start":8,"column_end":31},"name":"from_superset_unchecked","qualname":"::scalar::subset::SubsetOf::from_superset_unchecked","value":"fn (element: &T) -> Self","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47557,"byte_end":47652,"line_start":40,"line_end":40,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47810,"byte_end":47822,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SubsetOf::is_in_subset","value":"fn (element: &T) -> bool","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" Checks if `element` is actually part of the subset `Self` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `element` is actually part of the subset `Self` (and can be converted to it).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47711,"byte_end":47802,"line_start":43,"line_end":43,"column_start":5,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":180},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48995,"byte_end":49005,"line_start":64,"line_end":64,"column_start":11,"column_end":21},"name":"SupersetOf","qualname":"::scalar::subset::SupersetOf","value":"SupersetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185}],"decl_id":null,"docs":" Nested sets and conversions between them. Useful to work with substructures. It is preferable\n to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because\n `SupersetOf` is automatically implemented whenever `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them. Useful to work with substructures. It is preferable","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47848,"byte_end":47945,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47946,"byte_end":48034,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/ `SupersetOf` is automatically implemented whenever `SubsetOf` is).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48035,"byte_end":48105,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48106,"byte_end":48109,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48110,"byte_end":48202,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48203,"byte_end":48294,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48295,"byte_end":48307,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48308,"byte_end":48404,"line_start":54,"line_end":54,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48405,"byte_end":48441,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, i8 is","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48442,"byte_end":48539,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ a superset of u32.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48540,"byte_end":48562,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48563,"byte_end":48659,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48660,"byte_end":48698,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48699,"byte_end":48702,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48703,"byte_end":48798,"line_start":61,"line_end":61,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48799,"byte_end":48887,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":48888,"byte_end":48984,"line_start":63,"line_end":63,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49219,"byte_end":49228,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"to_subset","qualname":"::scalar::subset::SupersetOf::to_subset","value":"fn (&self) -> Option<T>","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49022,"byte_end":49116,"line_start":65,"line_end":65,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49121,"byte_end":49134,"line_start":66,"line_end":66,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49139,"byte_end":49142,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49147,"byte_end":49211,"line_start":68,"line_end":68,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49477,"byte_end":49489,"line_start":78,"line_end":78,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SupersetOf::is_in_subset","value":"fn (&self) -> bool","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" Checks if `self` is actually part of its subset `T` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `self` is actually part of its subset `T` (and can be converted to it).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49384,"byte_end":49469,"line_start":77,"line_end":77,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49612,"byte_end":49631,"line_start":81,"line_end":81,"column_start":8,"column_end":27},"name":"to_subset_unchecked","qualname":"::scalar::subset::SupersetOf::to_subset_unchecked","value":"fn (&self) -> T","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49511,"byte_end":49604,"line_start":80,"line_end":80,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49739,"byte_end":49750,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"from_subset","qualname":"::scalar::subset::SupersetOf::from_subset","value":"fn (element: &T) -> Self","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49650,"byte_end":49731,"line_start":83,"line_end":83,"column_start":5,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":201},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"simd","qualname":"::simd","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/mod.rs","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":269},{"krate":0,"index":344},{"krate":0,"index":361},{"krate":0,"index":388},{"krate":0,"index":433},{"krate":0,"index":449}],"decl_id":null,"docs":" Traits implemented by SIMD types and non-SIMD types.\n","sig":null,"attributes":[{"value":"! Traits implemented by SIMD types and non-SIMD types.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/mod.rs","byte_start":53432,"byte_end":53488,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":217},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54528,"byte_end":54536,"line_start":9,"line_end":9,"column_start":11,"column_end":19},"name":"SimdBool","qualname":"::simd::simd_bool::SimdBool","value":"SimdBool: Copy + BitAnd<Self, Output = Self> + BitOr<Self, Output = Self> +\nBitXor<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":229},{"krate":0,"index":235}],"decl_id":null,"docs":" Lane-wise generalization of `bool` for SIMD booleans.","sig":null,"attributes":[{"value":"/ Lane-wise generalization of `bool` for SIMD booleans.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54235,"byte_end":54292,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54293,"byte_end":54296,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This trait implemented by `bool` as well as SIMD boolean types like `packed_simd::m32x4`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54297,"byte_end":54390,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ It is designed to abstract the behavior of booleans so it can work with multi-lane boolean","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54391,"byte_end":54485,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ values in an AoSoA setting.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54486,"byte_end":54517,"line_start":8,"line_end":8,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54814,"byte_end":54821,"line_start":15,"line_end":15,"column_start":8,"column_end":15},"name":"bitmask","qualname":"::simd::simd_bool::SimdBool::bitmask","value":"fn (self) -> u64","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" A bit mask representing the boolean state of each lanes of `self`.","sig":null,"attributes":[{"value":"/ A bit mask representing the boolean state of each lanes of `self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54642,"byte_end":54712,"line_start":12,"line_end":12,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54717,"byte_end":54720,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ The `i-th` bit of the result is `1` iff. the `i-th` lane of `self` is `true`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54725,"byte_end":54806,"line_start":14,"line_end":14,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54897,"byte_end":54900,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"and","qualname":"::simd::simd_bool::SimdBool::and","value":"fn (self) -> bool","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" Lane-wise bitwise and of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise and of the vector elements.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54840,"byte_end":54889,"line_start":16,"line_end":16,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54976,"byte_end":54978,"line_start":19,"line_end":19,"column_start":8,"column_end":10},"name":"or","qualname":"::simd::simd_bool::SimdBool::or","value":"fn (self) -> bool","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" Lane-wise bitwise or of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise or of the vector elements.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54920,"byte_end":54968,"line_start":18,"line_end":18,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55055,"byte_end":55058,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"xor","qualname":"::simd::simd_bool::SimdBool::xor","value":"fn (self) -> bool","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" Lane-wise bitwise xor of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise xor of the vector elements.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54998,"byte_end":55047,"line_start":20,"line_end":20,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55116,"byte_end":55119,"line_start":23,"line_end":23,"column_start":8,"column_end":11},"name":"all","qualname":"::simd::simd_bool::SimdBool::all","value":"fn (self) -> bool","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" Are all vector lanes true?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes true?","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55078,"byte_end":55108,"line_start":22,"line_end":22,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55175,"byte_end":55178,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"any","qualname":"::simd::simd_bool::SimdBool::any","value":"fn (self) -> bool","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" Is any vector lane true?\n","sig":null,"attributes":[{"value":"/ Is any vector lane true?","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55139,"byte_end":55167,"line_start":24,"line_end":24,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55237,"byte_end":55241,"line_start":27,"line_end":27,"column_start":8,"column_end":12},"name":"none","qualname":"::simd::simd_bool::SimdBool::none","value":"fn (self) -> bool","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" Are all vector lanes false?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes false?","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55198,"byte_end":55229,"line_start":26,"line_end":26,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55731,"byte_end":55738,"line_start":35,"line_end":35,"column_start":8,"column_end":15},"name":"if_else","qualname":"::simd::simd_bool::SimdBool::if_else","value":"fn <Res> (self, if_value: impl FnOnce() -> Res, else_value: impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55261,"byte_end":55350,"line_start":28,"line_end":28,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55355,"byte_end":55358,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55363,"byte_end":55472,"line_start":30,"line_end":30,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55477,"byte_end":55588,"line_start":31,"line_end":31,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55593,"byte_end":55596,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases `if_value` and `else_value` are actually","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55601,"byte_end":55707,"line_start":33,"line_end":33,"column_start":5,"column_end":111}},{"value":"/ called.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55712,"byte_end":55723,"line_start":34,"line_end":34,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":56615,"byte_end":56623,"line_start":48,"line_end":48,"column_start":8,"column_end":16},"name":"if_else2","qualname":"::simd::simd_bool::SimdBool::if_else2","value":"fn <Res> (self, if_value: impl FnOnce() -> Res, else_if: (impl FnOnce() -> Self, impl FnOnce() -> Res), else_value: impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":55888,"byte_end":56013,"line_start":41,"line_end":41,"column_start":5,"column_end":130}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":56018,"byte_end":56021,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":56026,"byte_end":56135,"line_start":43,"line_end":43,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":56140,"byte_end":56312,"line_start":44,"line_end":44,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":56317,"byte_end":56490,"line_start":45,"line_end":45,"column_start":5,"column_end":178}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":56495,"byte_end":56498,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":56503,"byte_end":56607,"line_start":47,"line_end":47,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":57700,"byte_end":57708,"line_start":63,"line_end":63,"column_start":8,"column_end":16},"name":"if_else3","qualname":"::simd::simd_bool::SimdBool::if_else3","value":"fn <Res> (self, if_value: impl FnOnce() -> Res, else_if: (impl FnOnce() -> Self, impl FnOnce() -> Res), else_else_if: (impl FnOnce() -> Self, impl FnOnce() -> Res), else_value: impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":56837,"byte_end":57008,"line_start":55,"line_end":55,"column_start":5,"column_end":176}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":57013,"byte_end":57016,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":57021,"byte_end":57130,"line_start":57,"line_end":57,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":57135,"byte_end":57307,"line_start":58,"line_end":58,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` and `else_if.0()` containing `0` and `else_else_if.0()` containing `1`, the result will contain the corresponding lane of `else_else_if.1()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":57312,"byte_end":57498,"line_start":59,"line_end":59,"column_start":5,"column_end":191}},{"value":"/ - Other lanes will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":57503,"byte_end":57575,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":57580,"byte_end":57583,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":57588,"byte_end":57692,"line_start":62,"line_end":62,"column_start":5,"column_end":109}}]},{"kind":"Trait","id":{"krate":0,"index":286},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60139,"byte_end":60155,"line_start":14,"line_end":14,"column_start":11,"column_end":27},"name":"SimdComplexField","qualname":"::simd::simd_complex::SimdComplexField","value":"SimdComplexField: SubsetOf<Self> + SupersetOf<f64> + Field + Copy + Neg<Output = Self> + Send +\nSync + Any + 'static + Debug + NumAssignOps + NumOps + PartialEq","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349}],"decl_id":null,"docs":" Lane-wise generalisation of `ComplexField` for SIMD complex fields.","sig":null,"attributes":[{"value":"/ Lane-wise generalisation of `ComplexField` for SIMD complex fields.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":59956,"byte_end":60028,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60029,"byte_end":60032,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD complex field should contain one complex field.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60033,"byte_end":60105,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"allow(missing_docs)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60106,"byte_end":60128,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":287},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60465,"byte_end":60478,"line_start":32,"line_end":32,"column_start":10,"column_end":23},"name":"SimdRealField","qualname":"::simd::simd_complex::SimdComplexField::SimdRealField","value":"type SimdRealField: SimdRealField<SimdBool = <Self as SimdValue>::SimdBool>;","parent":{"krate":0,"index":286},"children":[],"decl_id":null,"docs":" Type of the coefficients of a complex number.\n","sig":null,"attributes":[{"value":"/ Type of the coefficients of a complex number.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60406,"byte_end":60455,"line_start":31,"line_end":31,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":348},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66204,"byte_end":66214,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"SimdOption","qualname":"::simd::simd_option::SimdOption","value":"SimdOption {  }","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351}],"decl_id":null,"docs":" Generalization of Option for SIMD computation.\n","sig":null,"attributes":[{"value":"/ Generalization of Option for SIMD computation.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66142,"byte_end":66192,"line_start":24,"line_end":24,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66425,"byte_end":66428,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<SimdOption<V>>::new","value":"fn (val: V, mask: V::SimdBool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.\n","sig":null,"attributes":[{"value":"/ Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66308,"byte_end":66413,"line_start":31,"line_end":31,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66566,"byte_end":66570,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"mask","qualname":"<SimdOption<V>>::mask","value":"fn (&self) -> V::SimdBool","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying SIMD boolean mask.\n","sig":null,"attributes":[{"value":"/ Return the underlying SIMD boolean mask.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66510,"byte_end":66554,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66679,"byte_end":66684,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"value","qualname":"<SimdOption<V>>::value","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying unfiltered value.\n","sig":null,"attributes":[{"value":"/ Return the underlying unfiltered value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66624,"byte_end":66667,"line_start":41,"line_end":41,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66953,"byte_end":66959,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"option","qualname":"<SimdOption<V>>::option","value":"fn (self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Converts this SIMD option to a strandard Option.","sig":null,"attributes":[{"value":"/ Converts this SIMD option to a strandard Option.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66729,"byte_end":66781,"line_start":46,"line_end":46,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66786,"byte_end":66789,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ If all the bits of `self.mask` are 1, then this returns `Some(self.value())`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66794,"byte_end":66875,"line_start":48,"line_end":48,"column_start":5,"column_end":86}},{"value":"/ If any bit of `self.mask` is 0, then this returns `None`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66880,"byte_end":66941,"line_start":49,"line_end":49,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67252,"byte_end":67263,"line_start":62,"line_end":62,"column_start":12,"column_end":23},"name":"simd_unwrap","qualname":"<SimdOption<V>>::simd_unwrap","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying value if all the bits of `self.mask` are 1.","sig":null,"attributes":[{"value":"/ Retrieve the underlying value if all the bits of `self.mask` are 1.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67092,"byte_end":67163,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67168,"byte_end":67171,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Panics if any of the bits of `self.mask` is 0.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67176,"byte_end":67226,"line_start":60,"line_end":60,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67231,"byte_end":67240,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67973,"byte_end":67987,"line_start":78,"line_end":78,"column_start":12,"column_end":26},"name":"simd_unwrap_or","qualname":"<SimdOption<V>>::simd_unwrap_or","value":"fn (self, other: impl FnOnce() -> V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Merges the value of `self` with the value of `other`.","sig":null,"attributes":[{"value":"/ Merges the value of `self` with the value of `other`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67438,"byte_end":67495,"line_start":70,"line_end":70,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67500,"byte_end":67503,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Each lane of the result with a corresponding bit mask set to 1 will be filled with the corresponding lanes of `self.value()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67508,"byte_end":67637,"line_start":72,"line_end":72,"column_start":5,"column_end":134}},{"value":"/ The lanes of the result with a corresponding bit mask set to 0 will be filled with the corresponding lanes of `other()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67642,"byte_end":67766,"line_start":73,"line_end":73,"column_start":5,"column_end":129}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67771,"byte_end":67774,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The function in `other` should not do any side-effect. Indeed, implementors of this trait are free to decide in what","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67779,"byte_end":67899,"line_start":75,"line_end":75,"column_start":5,"column_end":125}},{"value":"/ cases `other` is called or not.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67904,"byte_end":67939,"line_start":76,"line_end":76,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":67944,"byte_end":67961,"line_start":77,"line_end":77,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":363},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68195,"byte_end":68209,"line_start":4,"line_end":4,"column_start":11,"column_end":25},"name":"SimdPartialOrd","qualname":"::simd::simd_partial_ord::SimdPartialOrd","value":"SimdPartialOrd: SimdValue","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374}],"decl_id":null,"docs":" Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n","sig":null,"attributes":[{"value":"/ Lane-wise generalization of the standard `PartialOrd` for SIMD values.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68110,"byte_end":68184,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68278,"byte_end":68285,"line_start":6,"line_end":6,"column_start":8,"column_end":15},"name":"simd_gt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_gt","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Lanewise _greater than_ `>` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater than_ `>` comparison.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68227,"byte_end":68270,"line_start":5,"line_end":5,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68376,"byte_end":68383,"line_start":8,"line_end":8,"column_start":8,"column_end":15},"name":"simd_lt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_lt","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Lanewise _less than_ `<` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less than_ `<` comparison.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68328,"byte_end":68368,"line_start":7,"line_end":7,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68482,"byte_end":68489,"line_start":10,"line_end":10,"column_start":8,"column_end":15},"name":"simd_ge","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ge","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Lanewise _greater or equal_ `>=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater or equal_ `>=` comparison.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68426,"byte_end":68474,"line_start":9,"line_end":9,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68585,"byte_end":68592,"line_start":12,"line_end":12,"column_start":8,"column_end":15},"name":"simd_le","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_le","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Lanewise _less or equal_ `<=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less or equal_ `<=` comparison.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68532,"byte_end":68577,"line_start":11,"line_end":11,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68680,"byte_end":68687,"line_start":14,"line_end":14,"column_start":8,"column_end":15},"name":"simd_eq","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_eq","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Lanewise _equal_ `==` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _equal_ `==` comparison.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68635,"byte_end":68672,"line_start":13,"line_end":13,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68779,"byte_end":68786,"line_start":16,"line_end":16,"column_start":8,"column_end":15},"name":"simd_ne","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ne","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Lanewise _not equal_ `!=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _not equal_ `!=` comparison.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68730,"byte_end":68771,"line_start":15,"line_end":15,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68861,"byte_end":68869,"line_start":19,"line_end":19,"column_start":8,"column_end":16},"name":"simd_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Lanewise max value.\n","sig":null,"attributes":[{"value":"/ Lanewise max value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68830,"byte_end":68853,"line_start":18,"line_end":18,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68933,"byte_end":68941,"line_start":21,"line_end":21,"column_start":8,"column_end":16},"name":"simd_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Lanewise min value.\n","sig":null,"attributes":[{"value":"/ Lanewise min value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68902,"byte_end":68925,"line_start":20,"line_end":20,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":69063,"byte_end":69073,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"simd_clamp","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_clamp","value":"fn (self, min: Self, max: Self) -> Self","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Clamps each lane of `self` between the corresponding lane of `min` and `max`.\n","sig":null,"attributes":[{"value":"/ Clamps each lane of `self` between the corresponding lane of `min` and `max`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68974,"byte_end":69055,"line_start":22,"line_end":22,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":69168,"byte_end":69187,"line_start":26,"line_end":26,"column_start":8,"column_end":27},"name":"simd_horizontal_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_min","value":"fn (self) -> Self::Element","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" The min value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The min value among all lanes of `self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":69116,"byte_end":69160,"line_start":25,"line_end":25,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":69268,"byte_end":69287,"line_start":28,"line_end":28,"column_start":8,"column_end":27},"name":"simd_horizontal_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_max","value":"fn (self) -> Self::Element","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" The max value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The max value among all lanes of `self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":69216,"byte_end":69260,"line_start":27,"line_end":27,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":394},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71129,"byte_end":71142,"line_start":9,"line_end":9,"column_start":11,"column_end":24},"name":"SimdRealField","qualname":"::simd::simd_real::SimdRealField","value":"SimdRealField: SimdPartialOrd + SimdSigned + SimdComplexField<SimdRealField = Self>","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"decl_id":null,"docs":" Lanewise generalization of `RealField` for SIMD reals.","sig":null,"attributes":[{"value":"/ Lanewise generalization of `RealField` for SIMD reals.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":70856,"byte_end":70914,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":70915,"byte_end":70918,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD real field should contain one real field.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":70919,"byte_end":70985,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ This is implemented by scalar reals like `f32` and `f64` as well as SIMD reals like `packed_simd::f32x4`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":70986,"byte_end":71095,"line_start":7,"line_end":7,"column_start":1,"column_end":110}},{"value":"allow(missing_docs)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71096,"byte_end":71118,"line_start":8,"line_end":8,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71426,"byte_end":71439,"line_start":16,"line_end":16,"column_start":8,"column_end":21},"name":"simd_copysign","qualname":"::simd::simd_real::SimdRealField::simd_copysign","value":"fn (self, to: Self) -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Copies the sign of `self` to `to`.","sig":null,"attributes":[{"value":"/ Copies the sign of `self` to `to`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71223,"byte_end":71261,"line_start":12,"line_end":12,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71266,"byte_end":71269,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ - Returns `to.simd_abs()` if `self` is positive or positive-zero.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71274,"byte_end":71343,"line_start":14,"line_end":14,"column_start":5,"column_end":74}},{"value":"/ - Returns `-to.simd_abs()` if `self` is negative or negative-zero.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71348,"byte_end":71418,"line_start":15,"line_end":15,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71472,"byte_end":71482,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"simd_atan2","qualname":"::simd::simd_real::SimdRealField::simd_atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71519,"byte_end":71539,"line_start":19,"line_end":19,"column_start":8,"column_end":28},"name":"simd_default_epsilon","qualname":"::simd::simd_real::SimdRealField::simd_default_epsilon","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71558,"byte_end":71565,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"simd_pi","qualname":"::simd::simd_real::SimdRealField::simd_pi","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71584,"byte_end":71595,"line_start":21,"line_end":21,"column_start":8,"column_end":19},"name":"simd_two_pi","qualname":"::simd::simd_real::SimdRealField::simd_two_pi","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71614,"byte_end":71628,"line_start":22,"line_end":22,"column_start":8,"column_end":22},"name":"simd_frac_pi_2","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_2","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71647,"byte_end":71661,"line_start":23,"line_end":23,"column_start":8,"column_end":22},"name":"simd_frac_pi_3","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_3","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71680,"byte_end":71694,"line_start":24,"line_end":24,"column_start":8,"column_end":22},"name":"simd_frac_pi_4","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_4","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71713,"byte_end":71727,"line_start":25,"line_end":25,"column_start":8,"column_end":22},"name":"simd_frac_pi_6","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_6","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71746,"byte_end":71760,"line_start":26,"line_end":26,"column_start":8,"column_end":22},"name":"simd_frac_pi_8","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_8","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71779,"byte_end":71793,"line_start":27,"line_end":27,"column_start":8,"column_end":22},"name":"simd_frac_1_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_1_pi","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71812,"byte_end":71826,"line_start":28,"line_end":28,"column_start":8,"column_end":22},"name":"simd_frac_2_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_pi","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71845,"byte_end":71864,"line_start":29,"line_end":29,"column_start":8,"column_end":27},"name":"simd_frac_2_sqrt_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_sqrt_pi","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71884,"byte_end":71890,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"simd_e","qualname":"::simd::simd_real::SimdRealField::simd_e","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71909,"byte_end":71920,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"simd_log2_e","qualname":"::simd::simd_real::SimdRealField::simd_log2_e","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71939,"byte_end":71951,"line_start":33,"line_end":33,"column_start":8,"column_end":20},"name":"simd_log10_e","qualname":"::simd::simd_real::SimdRealField::simd_log10_e","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71970,"byte_end":71979,"line_start":34,"line_end":34,"column_start":8,"column_end":17},"name":"simd_ln_2","qualname":"::simd::simd_real::SimdRealField::simd_ln_2","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71998,"byte_end":72008,"line_start":35,"line_end":35,"column_start":8,"column_end":18},"name":"simd_ln_10","qualname":"::simd::simd_real::SimdRealField::simd_ln_10","value":"fn () -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":436},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":73857,"byte_end":73867,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"SimdSigned","qualname":"::simd::simd_signed::SimdSigned","value":"SimdSigned: SimdValue","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"decl_id":null,"docs":" A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.\n","sig":null,"attributes":[{"value":"/ A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":73726,"byte_end":73846,"line_start":4,"line_end":4,"column_start":1,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":73939,"byte_end":73947,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"simd_abs","qualname":"::simd::simd_signed::SimdSigned::simd_abs","value":"fn (&self) -> Self","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" The absolute value of each lane of `self`.\n","sig":null,"attributes":[{"value":"/ The absolute value of each lane of `self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":73885,"byte_end":73931,"line_start":6,"line_end":6,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74238,"byte_end":74250,"line_start":12,"line_end":12,"column_start":8,"column_end":20},"name":"simd_abs_sub","qualname":"::simd::simd_signed::SimdSigned::simd_abs_sub","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" The absolute difference of each lane of `self`.","sig":null,"attributes":[{"value":"/ The absolute difference of each lane of `self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":73968,"byte_end":74019,"line_start":8,"line_end":8,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74024,"byte_end":74027,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ For each lane, this zero if the lane of self is less than or equal to the corresponding lane of other","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74032,"byte_end":74137,"line_start":10,"line_end":10,"column_start":5,"column_end":110}},{"value":"/ otherwise the difference between the lane of self and the lane of other is returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74142,"byte_end":74230,"line_start":11,"line_end":11,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74331,"byte_end":74342,"line_start":14,"line_end":14,"column_start":8,"column_end":19},"name":"simd_signum","qualname":"::simd::simd_signed::SimdSigned::simd_signum","value":"fn (&self) -> Self","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" The signum of each lane of `Self`.\n","sig":null,"attributes":[{"value":"/ The signum of each lane of `Self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74285,"byte_end":74323,"line_start":13,"line_end":13,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74404,"byte_end":74420,"line_start":16,"line_end":16,"column_start":8,"column_end":24},"name":"is_simd_positive","qualname":"::simd::simd_signed::SimdSigned::is_simd_positive","value":"fn (&self) -> Self::SimdBool","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Tests which lane is positive.\n","sig":null,"attributes":[{"value":"/ Tests which lane is positive.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74363,"byte_end":74396,"line_start":15,"line_end":15,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74492,"byte_end":74508,"line_start":18,"line_end":18,"column_start":8,"column_end":24},"name":"is_simd_negative","qualname":"::simd::simd_signed::SimdSigned::is_simd_negative","value":"fn (&self) -> Self::SimdBool","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Tests which lane is negative.\n","sig":null,"attributes":[{"value":"/ Tests which lane is negative.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74451,"byte_end":74484,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":451},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75169,"byte_end":75178,"line_start":4,"line_end":4,"column_start":11,"column_end":20},"name":"SimdValue","qualname":"::simd::simd_value::SimdValue","value":"SimdValue: Sized","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":463}],"decl_id":null,"docs":" Base trait for every SIMD types.\n","sig":null,"attributes":[{"value":"/ Base trait for every SIMD types.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75122,"byte_end":75158,"line_start":3,"line_end":3,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":452},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75263,"byte_end":75270,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"name":"Element","qualname":"::simd::simd_value::SimdValue::Element","value":"type Element: SimdValue<Element = Self::Element, SimdBool = bool>;","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" The type of the elements of each lane of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The type of the elements of each lane of this SIMD value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75192,"byte_end":75253,"line_start":5,"line_end":5,"column_start":5,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":453},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75403,"byte_end":75411,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"SimdBool","qualname":"::simd::simd_value::SimdValue::SimdBool","value":"type SimdBool: SimdBool;","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Type of the result of comparing two SIMD values like `self`.\n","sig":null,"attributes":[{"value":"/ Type of the result of comparing two SIMD values like `self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75329,"byte_end":75393,"line_start":7,"line_end":7,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75479,"byte_end":75484,"line_start":11,"line_end":11,"column_start":8,"column_end":13},"name":"lanes","qualname":"::simd::simd_value::SimdValue::lanes","value":"fn () -> usize","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" The number of lanes of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The number of lanes of this SIMD value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75428,"byte_end":75471,"line_start":10,"line_end":10,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75568,"byte_end":75573,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"splat","qualname":"::simd::simd_value::SimdValue::splat","value":"fn (val: Self::Element) -> Self","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Initializes an SIMD value with each lanes set to `val`.\n","sig":null,"attributes":[{"value":"/ Initializes an SIMD value with each lanes set to `val`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75501,"byte_end":75560,"line_start":12,"line_end":12,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75700,"byte_end":75707,"line_start":17,"line_end":17,"column_start":8,"column_end":15},"name":"extract","qualname":"::simd::simd_value::SimdValue::extract","value":"fn (&self, i: usize) -> Self::Element","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self`.","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75607,"byte_end":75644,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75649,"byte_end":75652,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75657,"byte_end":75692,"line_start":16,"line_end":16,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75822,"byte_end":75839,"line_start":19,"line_end":19,"column_start":15,"column_end":32},"name":"extract_unchecked","qualname":"::simd::simd_value::SimdValue::extract_unchecked","value":"fn (&self, i: usize) -> Self::Element","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self` without bound-checking.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75747,"byte_end":75807,"line_start":18,"line_end":18,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75981,"byte_end":75988,"line_start":23,"line_end":23,"column_start":8,"column_end":15},"name":"replace","qualname":"::simd::simd_value::SimdValue::replace","value":"fn (&mut self, i: usize, val: Self::Element) -> ()","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val`.","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75879,"byte_end":75925,"line_start":20,"line_end":20,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75930,"byte_end":75933,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75938,"byte_end":75973,"line_start":22,"line_end":22,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76119,"byte_end":76136,"line_start":25,"line_end":25,"column_start":15,"column_end":32},"name":"replace_unchecked","qualname":"::simd::simd_value::SimdValue::replace_unchecked","value":"fn (&mut self, i: usize, val: Self::Element) -> ()","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val` without bound-checking.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76035,"byte_end":76104,"line_start":24,"line_end":24,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76486,"byte_end":76492,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"select","qualname":"::simd::simd_value::SimdValue::select","value":"fn (self, cond: Self::SimdBool, other: Self) -> Self","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Merges `self` and `other` depending on the lanes of `cond`.","sig":null,"attributes":[{"value":"/ Merges `self` and `other` depending on the lanes of `cond`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76184,"byte_end":76247,"line_start":27,"line_end":27,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76252,"byte_end":76255,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ For each lane of `cond` with bits set to 1, the result's will contain the value of the lane of `self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76260,"byte_end":76366,"line_start":29,"line_end":29,"column_start":5,"column_end":111}},{"value":"/ For each lane of `cond` with bits set to 0, the result's will contain the value of the lane of `other`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76371,"byte_end":76478,"line_start":30,"line_end":30,"column_start":5,"column_end":112}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76818,"byte_end":76827,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"map_lanes","qualname":"::simd::simd_value::SimdValue::map_lanes","value":"fn (self, f: impl Fn(Self::Element) -> Self::Element) -> Self","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76548,"byte_end":76594,"line_start":33,"line_end":33,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76599,"byte_end":76602,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76607,"byte_end":76681,"line_start":35,"line_end":35,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76686,"byte_end":76762,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76767,"byte_end":76788,"line_start":37,"line_end":37,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":76793,"byte_end":76810,"line_start":38,"line_end":38,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":77429,"byte_end":77442,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"zip_map_lanes","qualname":"::simd::simd_value::SimdValue::zip_map_lanes","value":"fn (self, b: Self, f: impl Fn(Self::Element, Self::Element) -> Self::Element) -> Self","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self` paired with the corresponding lane of `b`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self` paired with the corresponding lane of `b`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":77117,"byte_end":77205,"line_start":52,"line_end":52,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":77210,"byte_end":77213,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":77218,"byte_end":77292,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":77297,"byte_end":77373,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":77378,"byte_end":77399,"line_start":56,"line_end":56,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":77404,"byte_end":77421,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":465},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":78262,"byte_end":78280,"line_start":86,"line_end":86,"column_start":11,"column_end":29},"name":"PrimitiveSimdValue","qualname":"::simd::simd_value::PrimitiveSimdValue","value":"PrimitiveSimdValue: Copy + SimdValue","parent":null,"children":[],"decl_id":null,"docs":" Marker trait implemented by SIMD and non-SIMD primitive numeric values.","sig":null,"attributes":[{"value":"/ Marker trait implemented by SIMD and non-SIMD primitive numeric values.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":77891,"byte_end":77966,"line_start":80,"line_end":80,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":77967,"byte_end":77970,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This trait is useful for some disambiguations when writing blanked impls.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":77971,"byte_end":78048,"line_start":82,"line_end":82,"column_start":1,"column_end":78}},{"value":"/ This is implemented by all unsigned integer, integer, float, and complex types, as","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":78049,"byte_end":78135,"line_start":83,"line_end":83,"column_start":1,"column_end":87}},{"value":"/ with only one lane, i.e., `f32`, `f64`, `u32`, `i64`, etc. as well as SIMD types like","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":78136,"byte_end":78225,"line_start":84,"line_end":84,"column_start":1,"column_end":90}},{"value":"/ `f32x4, i32x8`, etc..","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":78226,"byte_end":78251,"line_start":85,"line_end":85,"column_start":1,"column_end":26}}]}],"impls":[{"id":4,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":31879,"byte_end":31886,"line_start":1036,"line_end":1036,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44966,"byte_end":44967,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45058,"byte_end":45059,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45150,"byte_end":45151,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45242,"byte_end":45243,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45320,"byte_end":45321,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45547,"byte_end":45554,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49822,"byte_end":49824,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":52040,"byte_end":52047,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60683,"byte_end":60684,"line_start":37,"line_end":37,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66288,"byte_end":66298,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":69396,"byte_end":69397,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":72103,"byte_end":72104,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74598,"byte_end":74599,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":78349,"byte_end":78356,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":79779,"byte_end":79786,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","byte_start":2009,"byte_end":2015,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/lib.rs","byte_start":2025,"byte_end":2029,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":201}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":2832,"byte_end":2844,"line_start":16,"line_end":16,"column_start":5,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":72},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":2869,"byte_end":2879,"line_start":17,"line_end":17,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":16,"index":56},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":2902,"byte_end":2908,"line_start":18,"line_end":18,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":16,"index":92},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":2931,"byte_end":2937,"line_start":19,"line_end":19,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":15,"index":564},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":2944,"byte_end":2951,"line_start":20,"line_end":20,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":15,"index":92},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/real.rs","byte_start":2958,"byte_end":2968,"line_start":21,"line_end":21,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1671},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14525,"byte_end":14533,"line_start":163,"line_end":163,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":174},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14546,"byte_end":14556,"line_start":164,"line_end":164,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":180},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14568,"byte_end":14573,"line_start":165,"line_end":165,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":167},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14613,"byte_end":14617,"line_start":166,"line_end":166,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1914},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14624,"byte_end":14627,"line_start":167,"line_end":167,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1994},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14697,"byte_end":14701,"line_start":170,"line_end":170,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1904},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14708,"byte_end":14712,"line_start":171,"line_end":171,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1916},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14719,"byte_end":14722,"line_start":172,"line_end":172,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2394},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14743,"byte_end":14748,"line_start":174,"line_end":174,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":6069},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14755,"byte_end":14768,"line_start":175,"line_end":175,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":15,"index":151},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":14775,"byte_end":14782,"line_start":176,"line_end":176,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":6074},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/complex.rs","byte_start":31879,"byte_end":31886,"line_start":1036,"line_end":1036,"column_start":63,"column_end":70},"kind":{"Impl":{"id":4}},"from":{"krate":17,"index":471},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44265,"byte_end":44270,"line_start":6,"line_end":6,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1909},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44273,"byte_end":44276,"line_start":6,"line_end":6,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":1967},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44301,"byte_end":44310,"line_start":6,"line_end":6,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":1998},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44431,"byte_end":44436,"line_start":9,"line_end":9,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1909},"to":{"krate":0,"index":146}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44439,"byte_end":44442,"line_start":9,"line_end":9,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":1972},"to":{"krate":0,"index":146}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44467,"byte_end":44476,"line_start":9,"line_end":9,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2002},"to":{"krate":0,"index":146}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44597,"byte_end":44602,"line_start":12,"line_end":12,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1909},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44605,"byte_end":44608,"line_start":12,"line_end":12,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":1977},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44633,"byte_end":44642,"line_start":12,"line_end":12,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2006},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44763,"byte_end":44768,"line_start":15,"line_end":15,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1909},"to":{"krate":0,"index":150}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44771,"byte_end":44774,"line_start":15,"line_end":15,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":1982},"to":{"krate":0,"index":150}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44799,"byte_end":44808,"line_start":15,"line_end":15,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2010},"to":{"krate":0,"index":150}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44899,"byte_end":44904,"line_start":18,"line_end":18,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1909},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44907,"byte_end":44910,"line_start":18,"line_end":18,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1994},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":44966,"byte_end":44967,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":154},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45058,"byte_end":45059,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":157},"to":{"krate":0,"index":146}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45150,"byte_end":45151,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":160},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45242,"byte_end":45243,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":163},"to":{"krate":0,"index":150}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45320,"byte_end":45321,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":166},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45435,"byte_end":45444,"line_start":27,"line_end":27,"column_start":18,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":451},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45447,"byte_end":45456,"line_start":27,"line_end":27,"column_start":30,"column_end":39},"kind":"SuperTrait","from":{"krate":15,"index":616},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45459,"byte_end":45468,"line_start":27,"line_end":27,"column_start":42,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":152},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/field.rs","byte_start":45547,"byte_end":45554,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"kind":{"Impl":{"id":10}},"from":{"krate":17,"index":471},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":47031,"byte_end":47036,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1909},"to":{"krate":0,"index":174}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49010,"byte_end":49015,"line_start":64,"line_end":64,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1909},"to":{"krate":0,"index":180}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":49822,"byte_end":49824,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":188},"to":{"krate":0,"index":180}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/scalar/subset.rs","byte_start":52040,"byte_end":52047,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"kind":{"Impl":{"id":150}},"from":{"krate":17,"index":471},"to":{"krate":0,"index":174}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54542,"byte_end":54546,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1914},"to":{"krate":0,"index":217}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54549,"byte_end":54555,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"kind":"SuperTrait","from":{"krate":2,"index":2023},"to":{"krate":0,"index":217}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54579,"byte_end":54584,"line_start":10,"line_end":10,"column_start":42,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2028},"to":{"krate":0,"index":217}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_bool.rs","byte_start":54608,"byte_end":54614,"line_start":10,"line_end":10,"column_start":71,"column_end":77},"kind":"SuperTrait","from":{"krate":2,"index":2033},"to":{"krate":0,"index":217}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60161,"byte_end":60169,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":174},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60182,"byte_end":60192,"line_start":16,"line_end":16,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":180},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60204,"byte_end":60209,"line_start":17,"line_end":17,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":167},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60216,"byte_end":60220,"line_start":18,"line_end":18,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1914},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60227,"byte_end":60230,"line_start":19,"line_end":19,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1994},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60300,"byte_end":60304,"line_start":22,"line_end":22,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1904},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60311,"byte_end":60315,"line_start":23,"line_end":23,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1916},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60322,"byte_end":60325,"line_start":24,"line_end":24,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2394},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60346,"byte_end":60351,"line_start":26,"line_end":26,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":6069},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60358,"byte_end":60370,"line_start":27,"line_end":27,"column_start":7,"column_end":19},"kind":"SuperTrait","from":{"krate":15,"index":611},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60377,"byte_end":60383,"line_start":28,"line_end":28,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":15,"index":592},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60390,"byte_end":60399,"line_start":29,"line_end":29,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1634},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_complex.rs","byte_start":60683,"byte_end":60684,"line_start":37,"line_end":37,"column_start":44,"column_end":45},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":289},"to":{"krate":0,"index":286}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_option.rs","byte_start":66288,"byte_end":66298,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":68211,"byte_end":68220,"line_start":4,"line_end":4,"column_start":27,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":451},"to":{"krate":0,"index":363}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_partial_ord.rs","byte_start":69396,"byte_end":69397,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":376},"to":{"krate":0,"index":363}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71148,"byte_end":71162,"line_start":10,"line_end":10,"column_start":5,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":363},"to":{"krate":0,"index":394}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71165,"byte_end":71175,"line_start":10,"line_end":10,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":436},"to":{"krate":0,"index":394}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":71178,"byte_end":71194,"line_start":10,"line_end":10,"column_start":35,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":286},"to":{"krate":0,"index":394}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_real.rs","byte_start":72103,"byte_end":72104,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":414},"to":{"krate":0,"index":394}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":73869,"byte_end":73878,"line_start":5,"line_end":5,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":451},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_signed.rs","byte_start":74598,"byte_end":74599,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":443},"to":{"krate":0,"index":436}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":75180,"byte_end":75185,"line_start":4,"line_end":4,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1909},"to":{"krate":0,"index":451}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":78282,"byte_end":78286,"line_start":86,"line_end":86,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1914},"to":{"krate":0,"index":465}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":78289,"byte_end":78298,"line_start":86,"line_end":86,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":451},"to":{"krate":0,"index":465}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":78349,"byte_end":78356,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"kind":{"Impl":{"id":157}},"from":{"krate":17,"index":471},"to":{"krate":0,"index":451}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.0/src/simd/simd_value.rs","byte_start":79779,"byte_end":79786,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"kind":{"Impl":{"id":158}},"from":{"krate":17,"index":471},"to":{"krate":0,"index":465}}]}