{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13","program":"/home/farjad-ali/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","wayland_commons","/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"native_lib\"","--cfg","feature=\"wayland-sys\"","-C","metadata=b5d336ca4c5ad53a","-C","extra-filename=-b5d336ca4c5ad53a","--out-dir","/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps","-L","dependency=/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps","--extern","nix=/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps/libnix-df3862f79cb16575.rmeta","--extern","wayland_sys=/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps/libwayland_sys-487c1fc53f03d601.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/farjad-ali/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/farjad-ali/Rust/Quarter 2/kiss3d/target/rls/debug/deps/libwayland_commons-b5d336ca4c5ad53a.rmeta"},"prelude":{"crate_id":{"name":"wayland_commons","disambiguator":[111681503166199776,1406263068159985091]},"crate_root":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src","external_crates":[{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9564622754343001814,6395353584576912375]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16347567532895737325,10433174518283571136]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6035154360143295752,3120051156278071757]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17970804288108720841,8277620835330235672]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16732030649177302276,7623982932271952002]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[2049976911787826744,13979720418681232837]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17847122289935873599,14578858192368606437]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12400616498443773685,4537628398871354645]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1484644931138181661,6065563251080435870]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10540921678309121045,13783658537477923762]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14352423081837475994,16315607114161141584]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[15159368332461590608,12067571535011159917]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[565700744459104052,3788273681611333969]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[2676206115383283879,17948995864942817625]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":15,"id":{"name":"nix","disambiguator":[11543808118890909479,13450116920497985292]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":16,"id":{"name":"bitflags","disambiguator":[13008310792646294399,18111922045990790205]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[6956900293673062683,13192834746660551626]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":18,"id":{"name":"void","disambiguator":[11815998533742387518,4430998975436880262]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":19,"id":{"name":"libc","disambiguator":[657624222426815521,10684527131133059072]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":20,"id":{"name":"wayland_sys","disambiguator":[58845132537373547,749527072185617453]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":21,"id":{"name":"dlib","disambiguator":[10516392138572291689,2639125337849131278]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":22,"id":{"name":"libloading","disambiguator":[1634488434918171973,14734949137102962550]}},{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":23,"id":{"name":"lazy_static","disambiguator":[5010937200074350365,1885860319682956590]}}],"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":0,"byte_end":5100,"line_start":1,"line_end":151,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":0,"byte_end":5100,"line_start":1,"line_end":151,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":53},{"krate":0,"index":117},{"krate":0,"index":190},{"krate":0,"index":243},{"krate":0,"index":256},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":271}],"decl_id":null,"docs":" Common definitions for wayland","sig":null,"attributes":[{"value":"! Common definitions for wayland","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":0,"byte_end":34,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":35,"byte_end":38,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This crate hosts common type and traits used to represent wayland messages","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":39,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! and routines in the `wayland-client` and `wayland-server` crates.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":118,"byte_end":187,"line_start":4,"line_end":4,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":188,"byte_end":191,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This notably includes the `Interface` trait, which can exhaustively describe","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":192,"byte_end":272,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"! any wayland interface. Its implementations are intended to be generated by the","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":273,"byte_end":355,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"! `wayland-scanner` crate.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":356,"byte_end":384,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":385,"byte_end":388,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! The principal user-facing definition provided by this crate is the `Implementation`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":389,"byte_end":476,"line_start":10,"line_end":10,"column_start":1,"column_end":88}},{"value":"! trait, which as a user of `wayland-client` or `wayland-server` you will be using","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":477,"byte_end":561,"line_start":11,"line_end":11,"column_start":1,"column_end":85}},{"value":"! to define objects able to handle the messages your program receives. Note that","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":562,"byte_end":644,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"! this trait is auto-implemented for closures with appropriate signature, for","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":645,"byte_end":724,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"! convenience.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":725,"byte_end":741,"line_start":14,"line_end":14,"column_start":1,"column_end":17}},{"value":"warn(missing_docs)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":743,"byte_end":765,"line_start":16,"line_end":16,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":284},{"krate":0,"index":293},{"krate":0,"index":17},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":33},{"krate":0,"index":48},{"krate":0,"index":51}],"decl_id":null,"docs":" Wayland objects map\n","sig":null,"attributes":[{"value":"! Wayland objects map","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5102,"byte_end":5125,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":12},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5265,"byte_end":5280,"line_start":6,"line_end":6,"column_start":11,"column_end":26},"name":"SERVER_ID_LIMIT","qualname":"::map::SERVER_ID_LIMIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Limit separating server-created from client-created objects IDs in the namespace\n","sig":null,"attributes":[{"value":"/ Limit separating server-created from client-created objects IDs in the namespace","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5170,"byte_end":5254,"line_start":5,"line_end":5,"column_start":1,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":13},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5403,"byte_end":5417,"line_start":10,"line_end":10,"column_start":11,"column_end":25},"name":"ObjectMetadata","qualname":"::map::ObjectMetadata","value":"ObjectMetadata: Clone","parent":null,"children":[{"krate":0,"index":14}],"decl_id":null,"docs":" A trait representing the metadata a wayland implementation\n may attach to an object.\n","sig":null,"attributes":[{"value":"/ A trait representing the metadata a wayland implementation","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5301,"byte_end":5363,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ may attach to an object.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5364,"byte_end":5392,"line_start":9,"line_end":9,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5558,"byte_end":5563,"line_start":14,"line_end":14,"column_start":8,"column_end":13},"name":"child","qualname":"::map::ObjectMetadata::child","value":"fn (&self) -> Self","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Create the metadata for a child object","sig":null,"attributes":[{"value":"/ Create the metadata for a child object","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5431,"byte_end":5473,"line_start":11,"line_end":11,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5478,"byte_end":5481,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ Mostly needed for client side, to propagate the event queues","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5486,"byte_end":5550,"line_start":13,"line_end":13,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":284},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5732,"byte_end":5738,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"Object","qualname":"::map::Object","value":"Object { interface, version, requests, events, meta, childs_from_events, childs_from_requests }","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292}],"decl_id":null,"docs":" The representation of a protocol object\n","sig":null,"attributes":[{"value":"/ The representation of a protocol object","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5660,"byte_end":5703,"line_start":23,"line_end":23,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":286},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5809,"byte_end":5818,"line_start":27,"line_end":27,"column_start":9,"column_end":18},"name":"interface","qualname":"::map::Object::interface","value":"&'static str","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Interface name of this object\n","sig":null,"attributes":[{"value":"/ Interface name of this object","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5767,"byte_end":5800,"line_start":26,"line_end":26,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":287},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5873,"byte_end":5880,"line_start":29,"line_end":29,"column_start":9,"column_end":16},"name":"version","qualname":"::map::Object::version","value":"u32","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Version of this object\n","sig":null,"attributes":[{"value":"/ Version of this object","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5838,"byte_end":5864,"line_start":28,"line_end":28,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":288},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5946,"byte_end":5954,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"name":"requests","qualname":"::map::Object::requests","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Description of the requests of this object\n","sig":null,"attributes":[{"value":"/ Description of the requests of this object","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5891,"byte_end":5937,"line_start":30,"line_end":30,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":289},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6045,"byte_end":6051,"line_start":33,"line_end":33,"column_start":9,"column_end":15},"name":"events","qualname":"::map::Object::events","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Description of the events of this object\n","sig":null,"attributes":[{"value":"/ Description of the events of this object","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5992,"byte_end":6036,"line_start":32,"line_end":32,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":290},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6170,"byte_end":6174,"line_start":35,"line_end":35,"column_start":9,"column_end":13},"name":"meta","qualname":"::map::Object::meta","value":"Meta","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Metadata associated to this object (ex: its event queue client side)\n","sig":null,"attributes":[{"value":"/ Metadata associated to this object (ex: its event queue client side)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6089,"byte_end":6161,"line_start":34,"line_end":34,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":291},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6322,"byte_end":6340,"line_start":38,"line_end":38,"column_start":9,"column_end":27},"name":"childs_from_events","qualname":"::map::Object::childs_from_events","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this event if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6186,"byte_end":6264,"line_start":36,"line_end":36,"column_start":5,"column_end":83}},{"value":"/ object associated with this event if any","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6269,"byte_end":6313,"line_start":37,"line_end":37,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":292},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6529,"byte_end":6549,"line_start":41,"line_end":41,"column_start":9,"column_end":29},"name":"childs_from_requests","qualname":"::map::Object::childs_from_requests","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this request if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6391,"byte_end":6469,"line_start":39,"line_end":39,"column_start":5,"column_end":83}},{"value":"/ object associated with this request if any","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6474,"byte_end":6520,"line_start":40,"line_end":40,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6722,"byte_end":6736,"line_start":46,"line_end":46,"column_start":12,"column_end":26},"name":"from_interface","qualname":"<Object<Meta>>::from_interface","value":"fn <I> (version: u32, meta: Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create an Object corresponding to given interface and version\n","sig":null,"attributes":[{"value":"/ Create an Object corresponding to given interface and version","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6645,"byte_end":6710,"line_start":45,"line_end":45,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7258,"byte_end":7269,"line_start":60,"line_end":60,"column_start":12,"column_end":23},"name":"event_child","qualname":"<Object<Meta>>::event_child","value":"fn (&self, opcode: u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given event opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7133,"byte_end":7214,"line_start":58,"line_end":58,"column_start":5,"column_end":86}},{"value":"/ with given event opcode","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7219,"byte_end":7246,"line_start":59,"line_end":59,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7522,"byte_end":7535,"line_start":66,"line_end":66,"column_start":12,"column_end":25},"name":"request_child","qualname":"<Object<Meta>>::request_child","value":"fn (&self, opcode: u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given request opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7395,"byte_end":7476,"line_start":64,"line_end":64,"column_start":5,"column_end":86}},{"value":"/ with given request opcode","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7481,"byte_end":7510,"line_start":65,"line_end":65,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7726,"byte_end":7738,"line_start":71,"line_end":71,"column_start":12,"column_end":24},"name":"is_interface","qualname":"<Object<Meta>>::is_interface","value":"fn <I> (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether this object is of given interface\n","sig":null,"attributes":[{"value":"/ Check whether this object is of given interface","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7663,"byte_end":7714,"line_start":70,"line_end":70,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7961,"byte_end":7972,"line_start":77,"line_end":77,"column_start":12,"column_end":23},"name":"placeholder","qualname":"<Object<Meta>>::placeholder","value":"fn (meta: Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a placeholder object that will be filled-in by the message logic\n","sig":null,"attributes":[{"value":"/ Create a placeholder object that will be filled-in by the message logic","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7874,"byte_end":7949,"line_start":76,"line_end":76,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":29},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8646,"byte_end":8655,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"ObjectMap","qualname":"::map::ObjectMap","value":"ObjectMap {  }","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" A holder for the object store of a connection","sig":null,"attributes":[{"value":"/ A holder for the object store of a connection","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8470,"byte_end":8519,"line_start":98,"line_end":98,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8520,"byte_end":8523,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ Keeps track of which object id is associated to which","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8524,"byte_end":8581,"line_start":100,"line_end":100,"column_start":1,"column_end":58}},{"value":"/ interface object, and which is currently unused.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8582,"byte_end":8634,"line_start":101,"line_end":101,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8871,"byte_end":8874,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<ObjectMap<Meta>>::new","value":"fn () -> ObjectMap<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty object map\n","sig":null,"attributes":[{"value":"/ Create a new empty object map","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8826,"byte_end":8859,"line_start":108,"line_end":108,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9062,"byte_end":9066,"line_start":117,"line_end":117,"column_start":12,"column_end":16},"name":"find","qualname":"<ObjectMap<Meta>>::find","value":"fn (&self, id: u32) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Find an object in the store\n","sig":null,"attributes":[{"value":"/ Find an object in the store","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9019,"byte_end":9050,"line_start":116,"line_end":116,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9503,"byte_end":9509,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"name":"remove","qualname":"<ObjectMap<Meta>>::remove","value":"fn (&mut self, id: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove an object from the store","sig":null,"attributes":[{"value":"/ Remove an object from the store","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9388,"byte_end":9423,"line_start":127,"line_end":127,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9428,"byte_end":9431,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Does nothing if the object didn't previously exists","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9436,"byte_end":9491,"line_start":129,"line_end":129,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":10054,"byte_end":10063,"line_start":146,"line_end":146,"column_start":12,"column_end":21},"name":"insert_at","qualname":"<ObjectMap<Meta>>::insert_at","value":"fn (&mut self, id: u32, object: Object<Meta>) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Insert given object for given id","sig":null,"attributes":[{"value":"/ Insert given object for given id","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9873,"byte_end":9909,"line_start":142,"line_end":142,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9914,"byte_end":9917,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Can fail if the requested id is not the next free id of this store.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9922,"byte_end":9993,"line_start":144,"line_end":144,"column_start":5,"column_end":76}},{"value":"/ (In which case this is a protocol error)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9998,"byte_end":10042,"line_start":145,"line_end":145,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":10440,"byte_end":10457,"line_start":155,"line_end":155,"column_start":12,"column_end":29},"name":"client_insert_new","qualname":"<ObjectMap<Meta>>::client_insert_new","value":"fn (&mut self, object: Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the client namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the client namespace","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":10369,"byte_end":10428,"line_start":154,"line_end":154,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":10638,"byte_end":10655,"line_start":160,"line_end":160,"column_start":12,"column_end":29},"name":"server_insert_new","qualname":"<ObjectMap<Meta>>::server_insert_new","value":"fn (&mut self, object: Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the server namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the server namespace","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":10567,"byte_end":10626,"line_start":159,"line_end":159,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":10830,"byte_end":10834,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"with","qualname":"<ObjectMap<Meta>>::with","value":"fn <T, F> (&mut self, id: u32, f: F) -> Result<T, ()>","parent":null,"children":[],"decl_id":null,"docs":" Mutably access an object of the map\n","sig":null,"attributes":[{"value":"/ Mutably access an object of the map","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":10779,"byte_end":10818,"line_start":164,"line_end":164,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":11452,"byte_end":11460,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"with_all","qualname":"<ObjectMap<Meta>>::with_all","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Mutably access all objects of the map in sequence\n","sig":null,"attributes":[{"value":"/ Mutably access all objects of the map in sequence","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":11387,"byte_end":11440,"line_start":182,"line_end":182,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":53},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"socket","qualname":"::socket","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":89},{"krate":0,"index":102},{"krate":0,"index":107}],"decl_id":null,"docs":" Wayland socket manipulation\n","sig":null,"attributes":[{"value":"! Wayland socket manipulation","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":12824,"byte_end":12855,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":67},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13146,"byte_end":13157,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"MAX_FDS_OUT","qualname":"::socket::MAX_FDS_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of FD that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of FD that can be sent in a single socket message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13067,"byte_end":13135,"line_start":11,"line_end":11,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":68},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13253,"byte_end":13266,"line_start":14,"line_end":14,"column_start":11,"column_end":24},"name":"MAX_BYTES_OUT","qualname":"::socket::MAX_BYTES_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of bytes that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of bytes that can be sent in a single socket message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13171,"byte_end":13242,"line_start":13,"line_end":13,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":69},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13333,"byte_end":13339,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"Socket","qualname":"::socket::Socket","value":"Socket {  }","parent":null,"children":[{"krate":0,"index":70}],"decl_id":null,"docs":" A wayland socket\n","sig":null,"attributes":[{"value":"/ A wayland socket","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13301,"byte_end":13321,"line_start":20,"line_end":20,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13707,"byte_end":13715,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"send_msg","qualname":"<Socket>::send_msg","value":"fn (&self, bytes: &[u8], fds: &[RawFd]) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a single message to the socket","sig":null,"attributes":[{"value":"/ Send a single message to the socket","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13378,"byte_end":13417,"line_start":26,"line_end":26,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13422,"byte_end":13425,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13430,"byte_end":13494,"line_start":28,"line_end":28,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13499,"byte_end":13502,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ The `fds` slice should not be longer than `MAX_FDS_OUT`, and the `bytes`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13507,"byte_end":13583,"line_start":30,"line_end":30,"column_start":5,"column_end":81}},{"value":"/ slice should not be longer than `MAX_BYTES_OUT` otherwise the receiving","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13588,"byte_end":13663,"line_start":31,"line_end":31,"column_start":5,"column_end":80}},{"value":"/ end may lose some data.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13668,"byte_end":13695,"line_start":32,"line_end":32,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14623,"byte_end":14630,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"rcv_msg","qualname":"<Socket>::rcv_msg","value":"fn (&self, buffer: &mut [u8], fds: &mut [RawFd]) -> NixResult<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Receive a single message from the socket","sig":null,"attributes":[{"value":"/ Receive a single message from the socket","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14148,"byte_end":14192,"line_start":44,"line_end":44,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14197,"byte_end":14200,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Return the number of bytes received and the number of Fds received.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14205,"byte_end":14276,"line_start":46,"line_end":46,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14281,"byte_end":14284,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Errors with `WouldBlock` is no message is available.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14289,"byte_end":14345,"line_start":48,"line_end":48,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14350,"byte_end":14353,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14358,"byte_end":14423,"line_start":50,"line_end":50,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14428,"byte_end":14431,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ The `buffer` slice should be at least `MAX_BYTES_OUT` long and the `fds`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14436,"byte_end":14512,"line_start":52,"line_end":52,"column_start":5,"column_end":81}},{"value":"/ slice `MAX_FDS_OUT` long, otherwise some data of the received message may","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14517,"byte_end":14594,"line_start":53,"line_end":53,"column_start":5,"column_end":82}},{"value":"/ be lost.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14599,"byte_end":14611,"line_start":54,"line_end":54,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":83},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15864,"byte_end":15878,"line_start":106,"line_end":106,"column_start":12,"column_end":26},"name":"BufferedSocket","qualname":"::socket::BufferedSocket","value":"BufferedSocket {  }","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" An adapter around a raw Socket that directly handles buffering and\n conversion from/to wayland messages\n","sig":null,"attributes":[{"value":"/ An adapter around a raw Socket that directly handles buffering and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15742,"byte_end":15812,"line_start":104,"line_end":104,"column_start":1,"column_end":71}},{"value":"/ conversion from/to wayland messages","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15813,"byte_end":15852,"line_start":105,"line_end":105,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16090,"byte_end":16093,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferedSocket>::new","value":"fn (socket: Socket) -> BufferedSocket","parent":null,"children":[],"decl_id":null,"docs":" Wrap a Socket into a Buffered Socket\n","sig":null,"attributes":[{"value":"/ Wrap a Socket into a Buffered Socket","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16038,"byte_end":16078,"line_start":115,"line_end":115,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16570,"byte_end":16580,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"get_socket","qualname":"<BufferedSocket>::get_socket","value":"fn (&mut self) -> &mut Socket","parent":null,"children":[],"decl_id":null,"docs":" Get direct access to the underlying socket\n","sig":null,"attributes":[{"value":"/ Get direct access to the underlying socket","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16512,"byte_end":16558,"line_start":126,"line_end":126,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16778,"byte_end":16789,"line_start":134,"line_end":134,"column_start":12,"column_end":23},"name":"into_socket","qualname":"<BufferedSocket>::into_socket","value":"fn (self) -> Socket","parent":null,"children":[],"decl_id":null,"docs":" Retrieve ownership of the underlying Socket","sig":null,"attributes":[{"value":"/ Retrieve ownership of the underlying Socket","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16645,"byte_end":16692,"line_start":131,"line_end":131,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16697,"byte_end":16700,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Any leftover content in the internal buffers will be lost","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16705,"byte_end":16766,"line_start":133,"line_end":133,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16912,"byte_end":16917,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"flush","qualname":"<BufferedSocket>::flush","value":"fn (&mut self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the outgoing buffer into the socket\n","sig":null,"attributes":[{"value":"/ Flush the contents of the outgoing buffer into the socket","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16839,"byte_end":16900,"line_start":138,"line_end":138,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18345,"byte_end":18358,"line_start":179,"line_end":179,"column_start":12,"column_end":25},"name":"write_message","qualname":"<BufferedSocket>::write_message","value":"fn (&mut self, msg: &Message) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a message to the outgoing buffer","sig":null,"attributes":[{"value":"/ Write a message to the outgoing buffer","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18083,"byte_end":18125,"line_start":173,"line_end":173,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18130,"byte_end":18133,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ This method may flush the internal buffer if necessary (if it is full).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18138,"byte_end":18213,"line_start":175,"line_end":175,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18218,"byte_end":18221,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ If the message is too big to fit in the buffer, the error `Error::Sys(E2BIG)`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18226,"byte_end":18307,"line_start":177,"line_end":177,"column_start":5,"column_end":86}},{"value":"/ will be returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18312,"byte_end":18333,"line_start":178,"line_end":178,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18989,"byte_end":19010,"line_start":195,"line_end":195,"column_start":12,"column_end":33},"name":"fill_incoming_buffers","qualname":"<BufferedSocket>::fill_incoming_buffers","value":"fn (&mut self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to fill the incoming buffers of this socket, to prepare\n a new round of parsing.\n","sig":null,"attributes":[{"value":"/ Try to fill the incoming buffers of this socket, to prepare","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18882,"byte_end":18945,"line_start":193,"line_end":193,"column_start":5,"column_end":68}},{"value":"/ a new round of parsing.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18950,"byte_end":18977,"line_start":194,"line_end":194,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20884,"byte_end":20900,"line_start":237,"line_end":237,"column_start":12,"column_end":28},"name":"read_one_message","qualname":"<BufferedSocket>::read_one_message","value":"fn <F> (&mut self, mut signature: F) -> Result<Message, MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize a single message from the incoming buffers socket","sig":null,"attributes":[{"value":"/ Read and deserialize a single message from the incoming buffers socket","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":19982,"byte_end":20056,"line_start":222,"line_end":222,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20061,"byte_end":20064,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ This method requires one closure that given an object id and an opcode,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20069,"byte_end":20144,"line_start":224,"line_end":224,"column_start":5,"column_end":80}},{"value":"/ must provide the signature of the associated request/event, in the form of","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20149,"byte_end":20227,"line_start":225,"line_end":225,"column_start":5,"column_end":83}},{"value":"/ a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20232,"byte_end":20299,"line_start":226,"line_end":226,"column_start":5,"column_end":72}},{"value":"/ the couple object/opcode does not exist, an error will be returned.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20304,"byte_end":20375,"line_start":227,"line_end":227,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20380,"byte_end":20383,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20388,"byte_end":20434,"line_start":229,"line_end":229,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20439,"byte_end":20442,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(msg))`: no error occurred, this is the message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20447,"byte_end":20506,"line_start":231,"line_end":231,"column_start":5,"column_end":64}},{"value":"/ - `Ok(Err(e))`: either a malformed message was encountered or we need more data,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20511,"byte_end":20595,"line_start":232,"line_end":232,"column_start":5,"column_end":89}},{"value":"/    in the latter case you need to try calling `fill_incoming_buffers()`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20600,"byte_end":20676,"line_start":233,"line_end":233,"column_start":5,"column_end":81}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20681,"byte_end":20762,"line_start":234,"line_end":234,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20767,"byte_end":20853,"line_start":235,"line_end":235,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20858,"byte_end":20872,"line_start":236,"line_end":236,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":23442,"byte_end":23455,"line_start":294,"line_end":294,"column_start":12,"column_end":25},"name":"read_messages","qualname":"<BufferedSocket>::read_messages","value":"fn <F1, F2> (&mut self, mut signature: F1, mut callback: F2) -> NixResult<Result<usize, MessageParseError>>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize messages from the socket","sig":null,"attributes":[{"value":"/ Read and deserialize messages from the socket","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22085,"byte_end":22134,"line_start":269,"line_end":269,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22139,"byte_end":22142,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ This method requires two closures:","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22147,"byte_end":22185,"line_start":271,"line_end":271,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22190,"byte_end":22193,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ - The first one, given an object id and an opcode, must provide","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22198,"byte_end":22265,"line_start":273,"line_end":273,"column_start":5,"column_end":72}},{"value":"/   the signature of the associated request/event, in the form of","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22270,"byte_end":22337,"line_start":274,"line_end":274,"column_start":5,"column_end":72}},{"value":"/   a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22342,"byte_end":22411,"line_start":275,"line_end":275,"column_start":5,"column_end":74}},{"value":"/   the couple object/opcode does not exist, the parsing will be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22416,"byte_end":22482,"line_start":276,"line_end":276,"column_start":5,"column_end":71}},{"value":"/   prematurely interrupted and this method will return a","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22487,"byte_end":22546,"line_start":277,"line_end":277,"column_start":5,"column_end":64}},{"value":"/   `MessageParseError::Malformed` error.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22551,"byte_end":22594,"line_start":278,"line_end":278,"column_start":5,"column_end":48}},{"value":"/ - The second closure is charged to process the parsed message. If it","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22599,"byte_end":22671,"line_start":279,"line_end":279,"column_start":5,"column_end":77}},{"value":"/   returns `false`, the iteration will be prematurely stopped.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22676,"byte_end":22741,"line_start":280,"line_end":280,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22746,"byte_end":22749,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ In both cases of early stopping, the remaining unused data will be left","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22754,"byte_end":22829,"line_start":282,"line_end":282,"column_start":5,"column_end":80}},{"value":"/ in the buffers, and will start to be processed at the next call of this","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22834,"byte_end":22909,"line_start":283,"line_end":283,"column_start":5,"column_end":80}},{"value":"/ method.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22914,"byte_end":22925,"line_start":284,"line_end":284,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22930,"byte_end":22933,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22938,"byte_end":22984,"line_start":286,"line_end":286,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22989,"byte_end":22992,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(n))`: no error occurred, `n` messages where processed","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":22997,"byte_end":23063,"line_start":288,"line_end":288,"column_start":5,"column_end":71}},{"value":"/ - `Ok(Err(MessageParseError::Malformed))`: a malformed message was encountered","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":23068,"byte_end":23150,"line_start":289,"line_end":289,"column_start":5,"column_end":87}},{"value":"/   (this is a protocol error and is supposed to be fatal to the connection).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":23155,"byte_end":23234,"line_start":290,"line_end":290,"column_start":5,"column_end":84}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":23239,"byte_end":23320,"line_start":291,"line_end":291,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":23325,"byte_end":23411,"line_start":292,"line_end":292,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":23416,"byte_end":23430,"line_start":293,"line_end":293,"column_start":5,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":157}],"decl_id":null,"docs":" Various utilities used for other implementations\n","sig":null,"attributes":[{"value":"! Various utilities used for other implementations","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":34661,"byte_end":34713,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":123},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":34917,"byte_end":34925,"line_start":10,"line_end":10,"column_start":12,"column_end":20},"name":"UserData","qualname":"::utils::UserData","value":"UserData {  }","parent":null,"children":[{"krate":0,"index":124}],"decl_id":null,"docs":" A wrapper for user data, able to store any type, and correctly\n handling access from a wrong thread\n","sig":null,"attributes":[{"value":"/ A wrapper for user data, able to store any type, and correctly","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":34799,"byte_end":34865,"line_start":8,"line_end":8,"column_start":1,"column_end":67}},{"value":"/ handling access from a wrong thread","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":34866,"byte_end":34905,"line_start":9,"line_end":9,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35435,"byte_end":35449,"line_start":29,"line_end":29,"column_start":12,"column_end":26},"name":"new_threadsafe","qualname":"<UserData>::new_threadsafe","value":"fn <T> (value: T) -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UserData` using a threadsafe type","sig":null,"attributes":[{"value":"/ Create a new `UserData` using a threadsafe type","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35310,"byte_end":35361,"line_start":26,"line_end":26,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35366,"byte_end":35369,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ Its contents can be accessed from any thread.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35374,"byte_end":35423,"line_start":28,"line_end":28,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35781,"byte_end":35784,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<UserData>::new","value":"fn <T> (value: T) -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UserData` using a non-threadsafe type","sig":null,"attributes":[{"value":"/ Create a new `UserData` using a non-threadsafe type","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35603,"byte_end":35658,"line_start":35,"line_end":35,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35663,"byte_end":35666,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Its contents can only be accessed from the same thread as the one you","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35671,"byte_end":35744,"line_start":37,"line_end":37,"column_start":5,"column_end":78}},{"value":"/ are creating it.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35749,"byte_end":35769,"line_start":38,"line_end":38,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36009,"byte_end":36014,"line_start":46,"line_end":46,"column_start":12,"column_end":17},"name":"empty","qualname":"<UserData>::empty","value":"fn () -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UserData` containing nothing\n","sig":null,"attributes":[{"value":"/ Create a new `UserData` containing nothing","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35951,"byte_end":35997,"line_start":45,"line_end":45,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36462,"byte_end":36465,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"get","qualname":"<UserData>::get","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36112,"byte_end":36155,"line_start":52,"line_end":52,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36160,"byte_end":36163,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if either:","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36168,"byte_end":36201,"line_start":54,"line_end":54,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36206,"byte_end":36209,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ - The requested type `T` does not match the type used for construction","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36214,"byte_end":36288,"line_start":56,"line_end":56,"column_start":5,"column_end":79}},{"value":"/ - This `UserData` has been created using the non-threadsafe variant and access","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36293,"byte_end":36375,"line_start":57,"line_end":57,"column_start":5,"column_end":87}},{"value":"/   is attempted from an other thread than the one it was created on","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36380,"byte_end":36450,"line_start":58,"line_end":58,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":145},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37120,"byte_end":37131,"line_start":77,"line_end":77,"column_start":12,"column_end":23},"name":"UserDataMap","qualname":"::utils::UserDataMap","value":"UserDataMap {  }","parent":null,"children":[{"krate":0,"index":146}],"decl_id":null,"docs":" A storage able to store several values of `UserData`\n of different types. It behaves similarly to a `TypeMap`.\n","sig":null,"attributes":[{"value":"/ A storage able to store several values of `UserData`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36991,"byte_end":37047,"line_start":75,"line_end":75,"column_start":1,"column_end":57}},{"value":"/ of different types. It behaves similarly to a `TypeMap`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37048,"byte_end":37108,"line_start":76,"line_end":76,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37224,"byte_end":37227,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<UserDataMap>::new","value":"fn () -> UserDataMap","parent":null,"children":[],"decl_id":null,"docs":" Create a new map\n","sig":null,"attributes":[{"value":"/ Create a new map","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37192,"byte_end":37212,"line_start":82,"line_end":82,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37529,"byte_end":37532,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"get","qualname":"<UserDataMap>::get","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data of a given type","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data of a given type","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37327,"byte_end":37386,"line_start":89,"line_end":89,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37391,"byte_end":37394,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if no value of type `T` is stored in this `UserDataMap`","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37399,"byte_end":37477,"line_start":91,"line_end":91,"column_start":5,"column_end":83}},{"value":"/ and accessible from this thread","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37482,"byte_end":37517,"line_start":92,"line_end":92,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38245,"byte_end":38262,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"insert_if_missing","qualname":"<UserDataMap>::insert_if_missing","value":"fn <T, F> (&self, init: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37742,"byte_end":37798,"line_start":102,"line_end":102,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37803,"byte_end":37806,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ This is the non-threadsafe variant, the type you insert don't have to be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37811,"byte_end":37887,"line_start":104,"line_end":104,"column_start":5,"column_end":81}},{"value":"/ threadsafe, but they will not be visible from other threads (even if they are","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37892,"byte_end":37973,"line_start":105,"line_end":105,"column_start":5,"column_end":86}},{"value":"/ actually threadsafe).","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37978,"byte_end":38003,"line_start":106,"line_end":106,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38008,"byte_end":38011,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38016,"byte_end":38096,"line_start":108,"line_end":108,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38101,"byte_end":38182,"line_start":109,"line_end":109,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38187,"byte_end":38233,"line_start":110,"line_end":110,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38898,"byte_end":38926,"line_start":127,"line_end":127,"column_start":12,"column_end":40},"name":"insert_if_missing_threadsafe","qualname":"<UserDataMap>::insert_if_missing_threadsafe","value":"fn <T, F> (&self, init: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38467,"byte_end":38523,"line_start":119,"line_end":119,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38528,"byte_end":38531,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ This is the threadsafe variant, the type you insert must be threadsafe and will","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38536,"byte_end":38619,"line_start":121,"line_end":121,"column_start":5,"column_end":88}},{"value":"/ be visible from all threads.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38624,"byte_end":38656,"line_start":122,"line_end":122,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38661,"byte_end":38664,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38669,"byte_end":38749,"line_start":124,"line_end":124,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38754,"byte_end":38835,"line_start":125,"line_end":125,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38840,"byte_end":38886,"line_start":126,"line_end":126,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":308},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":39694,"byte_end":39704,"line_start":157,"line_end":157,"column_start":16,"column_end":26},"name":"AppendList","qualname":"::utils::list::AppendList","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":40294,"byte_end":40297,"line_start":178,"line_end":178,"column_start":16,"column_end":19},"name":"new","qualname":"<AppendList<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":40373,"byte_end":40379,"line_start":182,"line_end":182,"column_start":16,"column_end":22},"name":"append","qualname":"<AppendList<T>>::append","value":"fn (&self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41103,"byte_end":41114,"line_start":205,"line_end":205,"column_start":16,"column_end":27},"name":"append_list","qualname":"<AppendList<T>>::append_list","value":"fn (&self, other: AppendList<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41300,"byte_end":41304,"line_start":211,"line_end":211,"column_start":16,"column_end":20},"name":"iter","qualname":"<AppendList<T>>::iter","value":"fn (&self) -> AppendListIterator<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":315},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41834,"byte_end":41852,"line_start":232,"line_end":232,"column_start":16,"column_end":34},"name":"AppendListIterator","qualname":"::utils::list::AppendListIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":190},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wire","qualname":"::wire","value":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":324},{"krate":0,"index":348},{"krate":0,"index":346},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":341},{"krate":0,"index":349},{"krate":0,"index":380},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":374},{"krate":0,"index":204},{"krate":0,"index":382},{"krate":0,"index":392},{"krate":0,"index":390},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":394},{"krate":0,"index":402},{"krate":0,"index":400},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":404},{"krate":0,"index":413},{"krate":0,"index":411},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":230},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":240}],"decl_id":null,"docs":" Types and routines used to manipulate arguments from the wire format\n","sig":null,"attributes":[{"value":"! Types and routines used to manipulate arguments from the wire format","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":42645,"byte_end":42717,"line_start":1,"line_end":1,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":200},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":42918,"byte_end":42929,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"MessageDesc","qualname":"::wire::MessageDesc","value":"MessageDesc { name, signature, since }","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203}],"decl_id":null,"docs":" Wire metadata of a given message\n","sig":null,"attributes":[{"value":"/ Wire metadata of a given message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":42870,"byte_end":42906,"line_start":10,"line_end":10,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":201},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":42969,"byte_end":42973,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"name","qualname":"::wire::MessageDesc::name","value":"&'static str","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Name of this message\n","sig":null,"attributes":[{"value":"/ Name of this message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":42936,"byte_end":42960,"line_start":12,"line_end":12,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":202},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43030,"byte_end":43039,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"name":"signature","qualname":"::wire::MessageDesc::signature","value":"&'static [wire::ArgumentType]","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Signature of the message\n","sig":null,"attributes":[{"value":"/ Signature of the message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":42993,"byte_end":43021,"line_start":14,"line_end":14,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":203},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43124,"byte_end":43129,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"name":"since","qualname":"::wire::MessageDesc::since","value":"u32","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Minimum required version of the interface\n","sig":null,"attributes":[{"value":"/ Minimum required version of the interface","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43070,"byte_end":43115,"line_start":16,"line_end":16,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":325},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43282,"byte_end":43285,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::ArgumentType::Int","value":"ArgumentType::Int","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43270,"byte_end":43277,"line_start":23,"line_end":23,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":327},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43303,"byte_end":43307,"line_start":26,"line_end":26,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::ArgumentType::Uint","value":"ArgumentType::Uint","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43291,"byte_end":43298,"line_start":25,"line_end":25,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":329},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43350,"byte_end":43355,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::ArgumentType::Fixed","value":"ArgumentType::Fixed","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43313,"byte_end":43345,"line_start":27,"line_end":27,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":331},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43377,"byte_end":43380,"line_start":30,"line_end":30,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::ArgumentType::Str","value":"ArgumentType::Str","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" CString\n","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43361,"byte_end":43372,"line_start":29,"line_end":29,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":333},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43417,"byte_end":43423,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::ArgumentType::Object","value":"ArgumentType::Object","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43386,"byte_end":43412,"line_start":31,"line_end":31,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":335},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43474,"byte_end":43479,"line_start":34,"line_end":34,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::ArgumentType::NewId","value":"ArgumentType::NewId","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43429,"byte_end":43469,"line_start":33,"line_end":33,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":337},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43501,"byte_end":43506,"line_start":36,"line_end":36,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::ArgumentType::Array","value":"ArgumentType::Array","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Vec<u8>\n","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43485,"byte_end":43496,"line_start":35,"line_end":35,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":339},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43526,"byte_end":43528,"line_start":38,"line_end":38,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::ArgumentType::Fd","value":"ArgumentType::Fd","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43512,"byte_end":43521,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":324},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43251,"byte_end":43263,"line_start":22,"line_end":22,"column_start":10,"column_end":22},"name":"ArgumentType","qualname":"::wire::ArgumentType","value":"ArgumentType::{Int, Uint, Fixed, Str, Object, NewId, Array, Fd}","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":339}],"decl_id":null,"docs":" Enum of possible argument types as recognized by the wire\n","sig":null,"attributes":[{"value":"/ Enum of possible argument types as recognized by the wire","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43139,"byte_end":43200,"line_start":20,"line_end":20,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":350},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43678,"byte_end":43681,"line_start":45,"line_end":45,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::Argument::Int","value":"Argument::Int(i32)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43666,"byte_end":43673,"line_start":44,"line_end":44,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":353},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43704,"byte_end":43708,"line_start":47,"line_end":47,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::Argument::Uint","value":"Argument::Uint(u32)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43692,"byte_end":43699,"line_start":46,"line_end":46,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":356},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43756,"byte_end":43761,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::Argument::Fixed","value":"Argument::Fixed(i32)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43719,"byte_end":43751,"line_start":48,"line_end":48,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":359},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43788,"byte_end":43791,"line_start":51,"line_end":51,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::Argument::Str","value":"Argument::Str(CString)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" CString\n","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43772,"byte_end":43783,"line_start":50,"line_end":50,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":362},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43837,"byte_end":43843,"line_start":53,"line_end":53,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::Argument::Object","value":"Argument::Object(u32)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43806,"byte_end":43832,"line_start":52,"line_end":52,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":365},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43899,"byte_end":43904,"line_start":55,"line_end":55,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::Argument::NewId","value":"Argument::NewId(u32)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43854,"byte_end":43894,"line_start":54,"line_end":54,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":368},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43931,"byte_end":43936,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::Argument::Array","value":"Argument::Array(Vec<u8>)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Vec<u8>\n","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43915,"byte_end":43926,"line_start":56,"line_end":56,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":371},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43965,"byte_end":43967,"line_start":59,"line_end":59,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::Argument::Fd","value":"Argument::Fd(RawFd)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43951,"byte_end":43960,"line_start":58,"line_end":58,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":349},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43651,"byte_end":43659,"line_start":43,"line_end":43,"column_start":10,"column_end":18},"name":"Argument","qualname":"::wire::Argument","value":"Argument::{Int, Uint, Fixed, Str, Object, NewId, Array, Fd}","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":368},{"krate":0,"index":371}],"decl_id":null,"docs":" Enum of possible argument as recognized by the wire, including values\n","sig":null,"attributes":[{"value":"/ Enum of possible argument as recognized by the wire, including values","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43533,"byte_end":43606,"line_start":41,"line_end":41,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44061,"byte_end":44069,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"name":"get_type","qualname":"<Argument>::get_type","value":"fn (&self) -> ArgumentType","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the type of a given argument instance\n","sig":null,"attributes":[{"value":"/ Retrieve the type of a given argument instance","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43999,"byte_end":44049,"line_start":63,"line_end":63,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":382},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44627,"byte_end":44634,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"Message","qualname":"::wire::Message","value":"Message { sender_id, opcode, args }","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":" A wire message\n","sig":null,"attributes":[{"value":"/ A wire message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44562,"byte_end":44580,"line_start":78,"line_end":78,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":383},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44691,"byte_end":44700,"line_start":82,"line_end":82,"column_start":9,"column_end":18},"name":"sender_id","qualname":"::wire::Message::sender_id","value":"u32","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" ID of the object sending this message\n","sig":null,"attributes":[{"value":"/ ID of the object sending this message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44641,"byte_end":44682,"line_start":81,"line_end":81,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":384},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44745,"byte_end":44751,"line_start":84,"line_end":84,"column_start":9,"column_end":15},"name":"opcode","qualname":"::wire::Message::opcode","value":"u16","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Opcode of the message\n","sig":null,"attributes":[{"value":"/ Opcode of the message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44711,"byte_end":44736,"line_start":83,"line_end":83,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":385},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44799,"byte_end":44803,"line_start":86,"line_end":86,"column_start":9,"column_end":13},"name":"args","qualname":"::wire::Message::args","value":"std::vec::Vec<wire::Argument>","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Arguments of the message\n","sig":null,"attributes":[{"value":"/ Arguments of the message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44762,"byte_end":44790,"line_start":85,"line_end":85,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":395},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45009,"byte_end":45023,"line_start":93,"line_end":93,"column_start":5,"column_end":19},"name":"BufferTooSmall","qualname":"::wire::MessageWriteError::BufferTooSmall","value":"MessageWriteError::BufferTooSmall","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" The buffer is too small to hold the message contents\n","sig":null,"attributes":[{"value":"/ The buffer is too small to hold the message contents","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44948,"byte_end":45004,"line_start":92,"line_end":92,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":397},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45088,"byte_end":45099,"line_start":95,"line_end":95,"column_start":5,"column_end":16},"name":"DupFdFailed","qualname":"::wire::MessageWriteError::DupFdFailed","value":"MessageWriteError::DupFdFailed(::nix::Error)","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" The message contains a FD that could not be dup-ed\n","sig":null,"attributes":[{"value":"/ The message contains a FD that could not be dup-ed","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45029,"byte_end":45083,"line_start":94,"line_end":94,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":394},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44924,"byte_end":44941,"line_start":91,"line_end":91,"column_start":10,"column_end":27},"name":"MessageWriteError","qualname":"::wire::MessageWriteError","value":"MessageWriteError::{BufferTooSmall, DupFdFailed}","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":397}],"decl_id":null,"docs":" Error generated when trying to serialize a message into buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to serialize a message into buffers","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44823,"byte_end":44890,"line_start":89,"line_end":89,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":405},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45896,"byte_end":45905,"line_start":119,"line_end":119,"column_start":5,"column_end":14},"name":"MissingFD","qualname":"::wire::MessageParseError::MissingFD","value":"MessageParseError::MissingFD","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The message references a FD but the buffer FD is empty\n","sig":null,"attributes":[{"value":"/ The message references a FD but the buffer FD is empty","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45833,"byte_end":45891,"line_start":118,"line_end":118,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":407},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45966,"byte_end":45977,"line_start":121,"line_end":121,"column_start":5,"column_end":16},"name":"MissingData","qualname":"::wire::MessageParseError::MissingData","value":"MessageParseError::MissingData","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" More data is needed to deserialize the message\n","sig":null,"attributes":[{"value":"/ More data is needed to deserialize the message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45911,"byte_end":45961,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":409},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46037,"byte_end":46046,"line_start":123,"line_end":123,"column_start":5,"column_end":14},"name":"Malformed","qualname":"::wire::MessageParseError::Malformed","value":"MessageParseError::Malformed","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The message is malformed and cannot be parsed\n","sig":null,"attributes":[{"value":"/ The message is malformed and cannot be parsed","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45983,"byte_end":46032,"line_start":122,"line_end":122,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":404},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45809,"byte_end":45826,"line_start":117,"line_end":117,"column_start":10,"column_end":27},"name":"MessageParseError","qualname":"::wire::MessageParseError","value":"MessageParseError::{MissingFD, MissingData, Malformed}","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409}],"decl_id":null,"docs":" Error generated when trying to deserialize a message from buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to deserialize a message from buffers","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45706,"byte_end":45775,"line_start":115,"line_end":115,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46904,"byte_end":46920,"line_start":148,"line_end":148,"column_start":12,"column_end":28},"name":"write_to_buffers","qualname":"<Message>::write_to_buffers","value":"fn <'a, 'b> (&self, payload: &'a mut [u32], mut fds: &'b mut [RawFd]) -> Result<(usize, usize), MessageWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the contents of this message into provided buffers","sig":null,"attributes":[{"value":"/ Serialize the contents of this message into provided buffers","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46690,"byte_end":46754,"line_start":143,"line_end":143,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46759,"byte_end":46762,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements written in each buffer","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46767,"byte_end":46824,"line_start":145,"line_end":145,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46829,"byte_end":46832,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Any serialized Fd will be `dup()`-ed in the process","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46837,"byte_end":46892,"line_start":147,"line_end":147,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":50729,"byte_end":50737,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<Message>::from_raw","value":"fn <'a, 'b> (raw: &'a [u32], signature: &[ArgumentType], fds: &'b [RawFd]) -> Result<(Message, &'a [u32], &'b [RawFd]), MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to parse a single wayland message with the given signature.","sig":null,"attributes":[{"value":"/ Attempts to parse a single wayland message with the given signature.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":50361,"byte_end":50433,"line_start":232,"line_end":232,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":50438,"byte_end":50441,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ If the buffers contains several messages, only the first one will be parsed,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":50446,"byte_end":50526,"line_start":234,"line_end":234,"column_start":5,"column_end":85}},{"value":"/ and the unused tail of the buffers is returned. If a single message was present,","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":50531,"byte_end":50615,"line_start":235,"line_end":235,"column_start":5,"column_end":89}},{"value":"/ the returned slices should thus be empty.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":50620,"byte_end":50665,"line_start":236,"line_end":236,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":50670,"byte_end":50673,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Errors if the message is malformed.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":50678,"byte_end":50717,"line_start":238,"line_end":238,"column_start":5,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":230},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":54335,"byte_end":54349,"line_start":329,"line_end":329,"column_start":8,"column_end":22},"name":"dup_fd_cloexec","qualname":"::wire::dup_fd_cloexec","value":"fn (fd: RawFd) -> NixResult<RawFd>","parent":null,"children":[],"decl_id":null,"docs":" Duplicate a `RawFd` and set the CLOEXEC flag on the copy\n","sig":null,"attributes":[{"value":"/ Duplicate a `RawFd` and set the CLOEXEC flag on the copy","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":54267,"byte_end":54327,"line_start":328,"line_end":328,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":243},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1333,"byte_end":1345,"line_start":39,"line_end":39,"column_start":11,"column_end":23},"name":"MessageGroup","qualname":"::MessageGroup","value":"MessageGroup: Sized","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253}],"decl_id":null,"docs":" A group of messages","sig":null,"attributes":[{"value":"/ A group of messages","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1038,"byte_end":1061,"line_start":32,"line_end":32,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1062,"byte_end":1065,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This represents a group of message that can be serialized on the protocol wire.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1066,"byte_end":1149,"line_start":34,"line_end":34,"column_start":1,"column_end":84}},{"value":"/ Typically the set of events or requests of a single interface.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1150,"byte_end":1216,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1217,"byte_end":1220,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1221,"byte_end":1273,"line_start":37,"line_end":37,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1274,"byte_end":1322,"line_start":38,"line_end":38,"column_start":1,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":244},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1414,"byte_end":1422,"line_start":41,"line_end":41,"column_start":11,"column_end":19},"name":"MESSAGES","qualname":"::MessageGroup::MESSAGES","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Wire representation of this MessageGroup\n","sig":null,"attributes":[{"value":"/ Wire representation of this MessageGroup","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1359,"byte_end":1403,"line_start":40,"line_end":40,"column_start":5,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":245},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1595,"byte_end":1598,"line_start":44,"line_end":44,"column_start":10,"column_end":13},"name":"Map","qualname":"::MessageGroup::Map","value":"type Map;","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" The wrapper type for ObjectMap allowing the mapping of Object and\n NewId arguments to the object map during parsing.\n","sig":null,"attributes":[{"value":"/ The wrapper type for ObjectMap allowing the mapping of Object and","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1458,"byte_end":1527,"line_start":42,"line_end":42,"column_start":5,"column_end":74}},{"value":"/ NewId arguments to the object map during parsing.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1532,"byte_end":1585,"line_start":43,"line_end":43,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1642,"byte_end":1648,"line_start":46,"line_end":46,"column_start":8,"column_end":14},"name":"opcode","qualname":"::MessageGroup::opcode","value":"fn (&self) -> u16","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" The opcode of this message\n","sig":null,"attributes":[{"value":"/ The opcode of this message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1604,"byte_end":1634,"line_start":45,"line_end":45,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1810,"byte_end":1823,"line_start":50,"line_end":50,"column_start":8,"column_end":21},"name":"is_destructor","qualname":"::MessageGroup::is_destructor","value":"fn (&self) -> bool","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Whether this message is a destructor","sig":null,"attributes":[{"value":"/ Whether this message is a destructor","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1668,"byte_end":1708,"line_start":47,"line_end":47,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1713,"byte_end":1716,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ If it is, once send or receive the associated object cannot be used any more.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1721,"byte_end":1802,"line_start":49,"line_end":49,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1919,"byte_end":1924,"line_start":52,"line_end":52,"column_start":8,"column_end":13},"name":"child","qualname":"::MessageGroup::child","value":"fn <Meta> (opcode: u16, version: u32, meta: &Meta) -> Option<::map::Object<Meta>>","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Retrieve the child `Object` associated with this message if any\n","sig":null,"attributes":[{"value":"/ Retrieve the child `Object` associated with this message if any","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1844,"byte_end":1911,"line_start":51,"line_end":51,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2124,"byte_end":2132,"line_start":58,"line_end":58,"column_start":8,"column_end":16},"name":"from_raw","qualname":"::MessageGroup::from_raw","value":"fn (msg: wire::Message, map: &mut Self::Map) -> Result<Self, ()>","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Construct a message from its raw representation\n","sig":null,"attributes":[{"value":"/ Construct a message from its raw representation","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2065,"byte_end":2116,"line_start":57,"line_end":57,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2256,"byte_end":2264,"line_start":60,"line_end":60,"column_start":8,"column_end":16},"name":"into_raw","qualname":"::MessageGroup::into_raw","value":"fn (self, send_id: u32) -> wire::Message","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Turn this message into its raw representation\n","sig":null,"attributes":[{"value":"/ Turn this message into its raw representation","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2199,"byte_end":2248,"line_start":59,"line_end":59,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2420,"byte_end":2430,"line_start":63,"line_end":63,"column_start":15,"column_end":25},"name":"from_raw_c","qualname":"::MessageGroup::from_raw_c","value":"fn (obj: *mut c_void, opcode: u32, args: *const syscom::wl_argument) -> Result<Self, ()>","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Construct a message of this group from its C representation\n","sig":null,"attributes":[{"value":"cfg(feature = \"native_lib\")","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2307,"byte_end":2337,"line_start":61,"line_end":61,"column_start":5,"column_end":35}},{"value":"/ Construct a message of this group from its C representation","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2342,"byte_end":2405,"line_start":62,"line_end":62,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2722,"byte_end":2733,"line_start":70,"line_end":70,"column_start":8,"column_end":19},"name":"as_raw_c_in","qualname":"::MessageGroup::as_raw_c_in","value":"fn <F, T> (self, f: F) -> T","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Build a C representation of this message","sig":null,"attributes":[{"value":"cfg(feature = \"native_lib\")","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2529,"byte_end":2559,"line_start":65,"line_end":65,"column_start":5,"column_end":35}},{"value":"/ Build a C representation of this message","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2564,"byte_end":2608,"line_start":66,"line_end":66,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2613,"byte_end":2616,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ It can only be accessed from the provided closure, and this consumes","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2621,"byte_end":2693,"line_start":68,"line_end":68,"column_start":5,"column_end":77}},{"value":"/ the message.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2698,"byte_end":2714,"line_start":69,"line_end":69,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":256},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2986,"byte_end":2995,"line_start":79,"line_end":79,"column_start":11,"column_end":20},"name":"Interface","qualname":"::Interface","value":"Interface: 'static","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"decl_id":null,"docs":" The description of a wayland interface","sig":null,"attributes":[{"value":"/ The description of a wayland interface","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2827,"byte_end":2869,"line_start":75,"line_end":75,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2870,"byte_end":2873,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2874,"byte_end":2926,"line_start":77,"line_end":77,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2927,"byte_end":2975,"line_start":78,"line_end":78,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":257},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3137,"byte_end":3144,"line_start":83,"line_end":83,"column_start":10,"column_end":17},"name":"Request","qualname":"::Interface::Request","value":"type Request: MessageGroup + 'static;","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Set of requests associated to this interface","sig":null,"attributes":[{"value":"/ Set of requests associated to this interface","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3011,"byte_end":3059,"line_start":80,"line_end":80,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3064,"byte_end":3067,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Requests are messages from the client to the server","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3072,"byte_end":3127,"line_start":82,"line_end":82,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":258},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3296,"byte_end":3301,"line_start":87,"line_end":87,"column_start":10,"column_end":15},"name":"Event","qualname":"::Interface::Event","value":"type Event: MessageGroup + 'static;","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Set of events associated to this interface","sig":null,"attributes":[{"value":"/ Set of events associated to this interface","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3174,"byte_end":3220,"line_start":84,"line_end":84,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3225,"byte_end":3228,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Events are messages from the server to the client","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3233,"byte_end":3286,"line_start":86,"line_end":86,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":259},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3368,"byte_end":3372,"line_start":89,"line_end":89,"column_start":11,"column_end":15},"name":"NAME","qualname":"::Interface::NAME","value":"&'static str","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Name of this interface\n","sig":null,"attributes":[{"value":"/ Name of this interface","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3331,"byte_end":3357,"line_start":88,"line_end":88,"column_start":5,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":260},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3450,"byte_end":3457,"line_start":91,"line_end":91,"column_start":11,"column_end":18},"name":"VERSION","qualname":"::Interface::VERSION","value":"u32","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Maximum supported version of this interface\n","sig":null,"attributes":[{"value":"/ Maximum supported version of this interface","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3392,"byte_end":3439,"line_start":90,"line_end":90,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3564,"byte_end":3575,"line_start":94,"line_end":94,"column_start":8,"column_end":19},"name":"c_interface","qualname":"::Interface::c_interface","value":"fn () -> *const ::syscom::wl_interface","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Pointer to the C representation of this interface\n","sig":null,"attributes":[{"value":"cfg(feature = \"native_lib\")","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3468,"byte_end":3498,"line_start":92,"line_end":92,"column_start":5,"column_end":35}},{"value":"/ Pointer to the C representation of this interface","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3503,"byte_end":3556,"line_start":93,"line_end":93,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":262},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3771,"byte_end":3786,"line_start":101,"line_end":101,"column_start":12,"column_end":27},"name":"AnonymousObject","qualname":"::AnonymousObject","value":"","parent":null,"children":[],"decl_id":null,"docs":" Anonymous interface","sig":null,"attributes":[{"value":"/ Anonymous interface","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3615,"byte_end":3638,"line_start":97,"line_end":97,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3639,"byte_end":3642,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ A special Interface implementation representing an","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3643,"byte_end":3697,"line_start":99,"line_end":99,"column_start":1,"column_end":55}},{"value":"/ handle to an object for which the interface is not known.","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3698,"byte_end":3759,"line_start":100,"line_end":100,"column_start":1,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":264},"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3861,"byte_end":3870,"line_start":104,"line_end":104,"column_start":10,"column_end":19},"name":"NoMessage","qualname":"::NoMessage","value":"NoMessage::{}","parent":null,"children":[],"decl_id":null,"docs":" An empty enum representing a MessageGroup with no messages\n","sig":null,"attributes":[{"value":"/ An empty enum representing a MessageGroup with no messages","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3789,"byte_end":3851,"line_start":103,"line_end":103,"column_start":1,"column_end":63}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6626,"byte_end":6632,"line_start":44,"line_end":44,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8804,"byte_end":8813,"line_start":107,"line_end":107,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13365,"byte_end":13371,"line_start":25,"line_end":25,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15348,"byte_end":15354,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15454,"byte_end":15460,"line_start":82,"line_end":82,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15542,"byte_end":15548,"line_start":88,"line_end":88,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15626,"byte_end":15632,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16017,"byte_end":16031,"line_start":114,"line_end":114,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":25688,"byte_end":25694,"line_start":370,"line_end":370,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35244,"byte_end":35252,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35277,"byte_end":35285,"line_start":23,"line_end":23,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35295,"byte_end":35303,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37174,"byte_end":37185,"line_start":81,"line_end":81,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":39742,"byte_end":39752,"line_start":159,"line_end":159,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41648,"byte_end":41658,"line_start":225,"line_end":225,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41923,"byte_end":41941,"line_start":234,"line_end":234,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43984,"byte_end":43992,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45147,"byte_end":45164,"line_start":98,"line_end":98,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45533,"byte_end":45550,"line_start":109,"line_end":109,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46080,"byte_end":46097,"line_start":126,"line_end":126,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46498,"byte_end":46515,"line_start":136,"line_end":136,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46676,"byte_end":46683,"line_start":142,"line_end":142,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":55551,"byte_end":55558,"line_start":366,"line_end":366,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":55773,"byte_end":55780,"line_start":378,"line_end":378,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3894,"byte_end":3909,"line_start":106,"line_end":106,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":4222,"byte_end":4231,"line_start":118,"line_end":118,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":987,"byte_end":990,"line_start":27,"line_end":27,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1000,"byte_end":1006,"line_start":28,"line_end":28,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":53}},{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1016,"byte_end":1021,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":117}},{"kind":"Mod","span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1031,"byte_end":1035,"line_start":30,"line_end":30,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":190}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5419,"byte_end":5424,"line_start":10,"line_end":10,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1606},"to":{"krate":0,"index":13}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6626,"byte_end":6632,"line_start":44,"line_end":44,"column_start":28,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8804,"byte_end":8813,"line_start":107,"line_end":107,"column_start":28,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":29},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13365,"byte_end":13371,"line_start":25,"line_end":25,"column_start":6,"column_end":12},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":69},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15348,"byte_end":15354,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":8190}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15454,"byte_end":15460,"line_start":82,"line_end":82,"column_start":18,"column_end":24},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":8188}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15542,"byte_end":15548,"line_start":88,"line_end":88,"column_start":20,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":8192}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15626,"byte_end":15632,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":69},"to":{"krate":2,"index":2097}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16017,"byte_end":16031,"line_start":114,"line_end":114,"column_start":6,"column_end":20},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":25688,"byte_end":25694,"line_start":370,"line_end":370,"column_start":25,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35244,"byte_end":35252,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":1904}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35277,"byte_end":35285,"line_start":23,"line_end":23,"column_start":22,"column_end":30},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":1916}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35295,"byte_end":35303,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37174,"byte_end":37185,"line_start":81,"line_end":81,"column_start":6,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":39742,"byte_end":39752,"line_start":159,"line_end":159,"column_start":13,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41648,"byte_end":41658,"line_start":225,"line_end":225,"column_start":22,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":308},"to":{"krate":2,"index":2097}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41923,"byte_end":41941,"line_start":234,"line_end":234,"column_start":34,"column_end":52},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":315},"to":{"krate":2,"index":4852}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43984,"byte_end":43992,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45147,"byte_end":45164,"line_start":98,"line_end":98,"column_start":30,"column_end":47},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45533,"byte_end":45550,"line_start":109,"line_end":109,"column_start":30,"column_end":47},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46080,"byte_end":46097,"line_start":126,"line_end":126,"column_start":30,"column_end":47},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":404},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46498,"byte_end":46515,"line_start":136,"line_end":136,"column_start":30,"column_end":47},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":404},"to":{"krate":2,"index":6074}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46676,"byte_end":46683,"line_start":142,"line_end":142,"column_start":6,"column_end":13},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":55551,"byte_end":55558,"line_start":366,"line_end":366,"column_start":6,"column_end":13},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":55773,"byte_end":55780,"line_start":378,"line_end":378,"column_start":15,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":234},"to":{"krate":2,"index":2097}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1347,"byte_end":1352,"line_start":39,"line_end":39,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1909},"to":{"krate":0,"index":243}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3894,"byte_end":3909,"line_start":106,"line_end":106,"column_start":20,"column_end":35},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":262},"to":{"krate":0,"index":256}},{"span":{"file_name":"/home/farjad-ali/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":4222,"byte_end":4231,"line_start":118,"line_end":118,"column_start":23,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":264},"to":{"krate":0,"index":243}}]}